"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@livekit";
exports.ids = ["vendor-chunks/@livekit"];
exports.modules = {

/***/ "(ssr)/./node_modules/@livekit/components-styles/dist/general/index.css":
/*!************************************************************************!*\
  !*** ./node_modules/@livekit/components-styles/dist/general/index.css ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"50acbf9d58bb\");\nif (false) {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGxpdmVraXQvY29tcG9uZW50cy1zdHlsZXMvZGlzdC9nZW5lcmFsL2luZGV4LmNzcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsaUVBQWUsY0FBYztBQUM3QixJQUFJLEtBQVUsRUFBRSxFQUF1QiIsInNvdXJjZXMiOlsid2VicGFjazovL2NsaWVudC8uL25vZGVfbW9kdWxlcy9AbGl2ZWtpdC9jb21wb25lbnRzLXN0eWxlcy9kaXN0L2dlbmVyYWwvaW5kZXguY3NzP2RiNGMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgXCI1MGFjYmY5ZDU4YmJcIlxuaWYgKG1vZHVsZS5ob3QpIHsgbW9kdWxlLmhvdC5hY2NlcHQoKSB9XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@livekit/components-styles/dist/general/index.css\n");

/***/ }),

/***/ "(ssr)/./node_modules/@livekit/components-core/dist/index.mjs":
/*!**************************************************************!*\
  !*** ./node_modules/@livekit/components-core/dist/index.mjs ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DataTopic: () => (/* binding */ DataTopic),\n/* harmony export */   GRID_LAYOUTS: () => (/* binding */ GRID_LAYOUTS),\n/* harmony export */   PIN_DEFAULT_STATE: () => (/* binding */ PIN_DEFAULT_STATE),\n/* harmony export */   WIDGET_DEFAULT_STATE: () => (/* binding */ WIDGET_DEFAULT_STATE),\n/* harmony export */   activeSpeakerObserver: () => (/* binding */ activeSpeakerObserver),\n/* harmony export */   allParticipantEvents: () => (/* binding */ allParticipantEvents),\n/* harmony export */   allParticipantRoomEvents: () => (/* binding */ allParticipantRoomEvents),\n/* harmony export */   allRemoteParticipantEvents: () => (/* binding */ allRemoteParticipantEvents),\n/* harmony export */   allRemoteParticipantRoomEvents: () => (/* binding */ allRemoteParticipantRoomEvents),\n/* harmony export */   attachIfSubscribed: () => (/* binding */ attachIfSubscribed),\n/* harmony export */   computeMenuPosition: () => (/* binding */ computeMenuPosition),\n/* harmony export */   connectedParticipantObserver: () => (/* binding */ connectedParticipantObserver),\n/* harmony export */   connectedParticipantsObserver: () => (/* binding */ connectedParticipantsObserver),\n/* harmony export */   connectionStateObserver: () => (/* binding */ connectionStateObserver),\n/* harmony export */   createActiveDeviceObservable: () => (/* binding */ createActiveDeviceObservable),\n/* harmony export */   createConnectionQualityObserver: () => (/* binding */ createConnectionQualityObserver),\n/* harmony export */   createDataObserver: () => (/* binding */ createDataObserver),\n/* harmony export */   createDefaultGrammar: () => (/* binding */ createDefaultGrammar),\n/* harmony export */   createEmailRegExp: () => (/* reexport safe */ email_regex__WEBPACK_IMPORTED_MODULE_1__[\"default\"]),\n/* harmony export */   createInteractingObservable: () => (/* binding */ createInteractingObservable),\n/* harmony export */   createIsSpeakingObserver: () => (/* binding */ createIsSpeakingObserver),\n/* harmony export */   createMediaDeviceObserver: () => (/* binding */ createMediaDeviceObserver),\n/* harmony export */   createTrackObserver: () => (/* binding */ createTrackObserver),\n/* harmony export */   createUrlRegExp: () => (/* binding */ createUrlRegExp),\n/* harmony export */   cssPrefix: () => (/* binding */ cssPrefix),\n/* harmony export */   encryptionStatusObservable: () => (/* binding */ encryptionStatusObservable),\n/* harmony export */   getScrollBarWidth: () => (/* binding */ getScrollBarWidth),\n/* harmony export */   getTrackByIdentifier: () => (/* binding */ getTrackByIdentifier),\n/* harmony export */   getTrackReferenceId: () => (/* binding */ getTrackReferenceId),\n/* harmony export */   getTrackReferenceSource: () => (/* binding */ getTrackReferenceSource),\n/* harmony export */   isEqualTrackRef: () => (/* binding */ isEqualTrackRef),\n/* harmony export */   isLocal: () => (/* binding */ isLocal),\n/* harmony export */   isMobileBrowser: () => (/* binding */ isMobileBrowser),\n/* harmony export */   isParticipantSourcePinned: () => (/* binding */ isParticipantSourcePinned),\n/* harmony export */   isParticipantTrackReferencePinned: () => (/* binding */ isParticipantTrackReferencePinned),\n/* harmony export */   isPlaceholderReplacement: () => (/* binding */ isPlaceholderReplacement),\n/* harmony export */   isRemote: () => (/* binding */ isRemote),\n/* harmony export */   isSourceWitOptions: () => (/* binding */ isSourceWitOptions),\n/* harmony export */   isSourcesWithOptions: () => (/* binding */ isSourcesWithOptions),\n/* harmony export */   isTrackReference: () => (/* binding */ isTrackReference),\n/* harmony export */   isTrackReferencePinned: () => (/* binding */ isTrackReferencePinned),\n/* harmony export */   isTrackReferencePlaceholder: () => (/* binding */ isTrackReferencePlaceholder),\n/* harmony export */   isWeb: () => (/* binding */ isWeb),\n/* harmony export */   loadUserChoices: () => (/* binding */ loadUserChoices),\n/* harmony export */   log: () => (/* binding */ log),\n/* harmony export */   mutedObserver: () => (/* binding */ mutedObserver),\n/* harmony export */   observeParticipantEvents: () => (/* binding */ observeParticipantEvents),\n/* harmony export */   observeParticipantMedia: () => (/* binding */ observeParticipantMedia),\n/* harmony export */   observeRoomEvents: () => (/* binding */ observeRoomEvents),\n/* harmony export */   observeTrackEvents: () => (/* binding */ observeTrackEvents),\n/* harmony export */   participantEventSelector: () => (/* binding */ participantEventSelector),\n/* harmony export */   participantInfoObserver: () => (/* binding */ participantInfoObserver),\n/* harmony export */   participantPermissionObserver: () => (/* binding */ participantPermissionObserver),\n/* harmony export */   roomAudioPlaybackAllowedObservable: () => (/* binding */ roomAudioPlaybackAllowedObservable),\n/* harmony export */   roomEventSelector: () => (/* binding */ roomEventSelector),\n/* harmony export */   roomInfoObserver: () => (/* binding */ roomInfoObserver),\n/* harmony export */   roomObserver: () => (/* binding */ roomObserver),\n/* harmony export */   roomVideoPlaybackAllowedObservable: () => (/* binding */ roomVideoPlaybackAllowedObservable),\n/* harmony export */   saveUserChoices: () => (/* binding */ saveUserChoices),\n/* harmony export */   screenShareObserver: () => (/* binding */ screenShareObserver),\n/* harmony export */   selectGridLayout: () => (/* binding */ selectGridLayout),\n/* harmony export */   sendMessage: () => (/* binding */ sendMessage),\n/* harmony export */   setDifference: () => (/* binding */ setDifference),\n/* harmony export */   setLogExtension: () => (/* binding */ setLogExtension),\n/* harmony export */   setLogLevel: () => (/* binding */ setLogLevel),\n/* harmony export */   setupChat: () => (/* binding */ setupChat),\n/* harmony export */   setupChatToggle: () => (/* binding */ setupChatToggle),\n/* harmony export */   setupClearPinButton: () => (/* binding */ setupClearPinButton),\n/* harmony export */   setupConnectionQualityIndicator: () => (/* binding */ setupConnectionQualityIndicator),\n/* harmony export */   setupDataMessageHandler: () => (/* binding */ setupDataMessageHandler),\n/* harmony export */   setupDeviceSelector: () => (/* binding */ setupDeviceSelector),\n/* harmony export */   setupDisconnectButton: () => (/* binding */ setupDisconnectButton),\n/* harmony export */   setupFocusToggle: () => (/* binding */ setupFocusToggle),\n/* harmony export */   setupLiveKitRoom: () => (/* binding */ setupLiveKitRoom),\n/* harmony export */   setupManualToggle: () => (/* binding */ setupManualToggle),\n/* harmony export */   setupMediaToggle: () => (/* binding */ setupMediaToggle),\n/* harmony export */   setupMediaTrack: () => (/* binding */ setupMediaTrack),\n/* harmony export */   setupParticipantName: () => (/* binding */ setupParticipantName),\n/* harmony export */   setupParticipantTile: () => (/* binding */ setupParticipantTile),\n/* harmony export */   setupStartAudio: () => (/* binding */ setupStartAudio),\n/* harmony export */   setupStartVideo: () => (/* binding */ setupStartVideo),\n/* harmony export */   setupTrackMutedIndicator: () => (/* binding */ setupTrackMutedIndicator),\n/* harmony export */   sortParticipants: () => (/* binding */ sortParticipants),\n/* harmony export */   sortTrackReferences: () => (/* binding */ sortTrackReferences),\n/* harmony export */   supportsScreenSharing: () => (/* binding */ supportsScreenSharing),\n/* harmony export */   tokenize: () => (/* binding */ tokenize),\n/* harmony export */   trackObservable: () => (/* binding */ trackObservable),\n/* harmony export */   trackReferencesObservable: () => (/* binding */ trackReferencesObservable),\n/* harmony export */   updatePages: () => (/* binding */ updatePages),\n/* harmony export */   wasClickOutside: () => (/* binding */ wasClickOutside)\n/* harmony export */ });\n/* harmony import */ var livekit_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! livekit-client */ \"(ssr)/./node_modules/livekit-client/dist/livekit-client.esm.mjs\");\n/* harmony import */ var email_regex__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! email-regex */ \"(ssr)/./node_modules/email-regex/index.js\");\n/* harmony import */ var _floating_ui_dom__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @floating-ui/dom */ \"(ssr)/./node_modules/@floating-ui/dom/dist/floating-ui.dom.mjs\");\n/* harmony import */ var _floating_ui_dom__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @floating-ui/dom */ \"(ssr)/./node_modules/@floating-ui/core/dist/floating-ui.core.mjs\");\n/* harmony import */ var loglevel__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! loglevel */ \"(ssr)/./node_modules/loglevel/lib/loglevel.js\");\n/* harmony import */ var _barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! __barrel_optimize__?names=concat,distinctUntilChanged,fromEvent,map,of,skipUntil,timeout!=!rxjs */ \"(ssr)/./node_modules/rxjs/dist/esm5/internal/operators/map.js\");\n/* harmony import */ var _barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! __barrel_optimize__?names=Observable,map,startWith!=!rxjs */ \"(ssr)/./node_modules/rxjs/dist/esm5/internal/operators/startWith.js\");\n/* harmony import */ var _barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! __barrel_optimize__?names=BehaviorSubject,Subject,map,scan,takeUntil!=!rxjs */ \"(ssr)/./node_modules/rxjs/dist/esm5/internal/Subject.js\");\n/* harmony import */ var _barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! __barrel_optimize__?names=Observable,map,startWith!=!rxjs */ \"(ssr)/./node_modules/rxjs/dist/esm5/internal/Observable.js\");\n/* harmony import */ var _barrel_optimize_names_Observable_map_startWith_switchMap_rxjs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! __barrel_optimize__?names=Observable,map,startWith,switchMap!=!rxjs */ \"(ssr)/./node_modules/rxjs/dist/esm5/internal/operators/switchMap.js\");\n/* harmony import */ var _barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! __barrel_optimize__?names=Observable,Subject,concat,filter,finalize,map,startWith!=!rxjs */ \"(ssr)/./node_modules/rxjs/dist/esm5/internal/operators/finalize.js\");\n/* harmony import */ var _barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! __barrel_optimize__?names=concat,distinctUntilChanged,fromEvent,map,of,skipUntil,timeout!=!rxjs */ \"(ssr)/./node_modules/rxjs/dist/esm5/internal/observable/concat.js\");\n/* harmony import */ var _barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! __barrel_optimize__?names=Observable,filter,map!=!rxjs */ \"(ssr)/./node_modules/rxjs/dist/esm5/internal/operators/filter.js\");\n/* harmony import */ var _barrel_optimize_names_BehaviorSubject_rxjs__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! __barrel_optimize__?names=BehaviorSubject,Subject,map,scan,takeUntil!=!rxjs */ \"(ssr)/./node_modules/rxjs/dist/esm5/internal/BehaviorSubject.js\");\n/* harmony import */ var _barrel_optimize_names_BehaviorSubject_Subject_map_scan_takeUntil_rxjs__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! __barrel_optimize__?names=BehaviorSubject,Subject,map,scan,takeUntil!=!rxjs */ \"(ssr)/./node_modules/rxjs/dist/esm5/internal/operators/takeUntil.js\");\n/* harmony import */ var _barrel_optimize_names_BehaviorSubject_Subject_map_scan_takeUntil_rxjs__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! __barrel_optimize__?names=BehaviorSubject,Subject,map,scan,takeUntil!=!rxjs */ \"(ssr)/./node_modules/rxjs/dist/esm5/internal/operators/scan.js\");\n/* harmony import */ var _barrel_optimize_names_concat_distinctUntilChanged_fromEvent_map_of_skipUntil_timeout_rxjs__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! __barrel_optimize__?names=concat,distinctUntilChanged,fromEvent,map,of,skipUntil,timeout!=!rxjs */ \"(ssr)/./node_modules/rxjs/dist/esm5/internal/observable/of.js\");\n/* harmony import */ var _barrel_optimize_names_concat_distinctUntilChanged_fromEvent_map_of_skipUntil_timeout_rxjs__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! __barrel_optimize__?names=concat,distinctUntilChanged,fromEvent,map,of,skipUntil,timeout!=!rxjs */ \"(ssr)/./node_modules/rxjs/dist/esm5/internal/observable/fromEvent.js\");\n/* harmony import */ var _barrel_optimize_names_concat_distinctUntilChanged_fromEvent_map_of_skipUntil_timeout_rxjs__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! __barrel_optimize__?names=concat,distinctUntilChanged,fromEvent,map,of,skipUntil,timeout!=!rxjs */ \"(ssr)/./node_modules/rxjs/dist/esm5/internal/operators/timeout.js\");\n/* harmony import */ var _barrel_optimize_names_concat_distinctUntilChanged_fromEvent_map_of_skipUntil_timeout_rxjs__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! __barrel_optimize__?names=concat,distinctUntilChanged,fromEvent,map,of,skipUntil,timeout!=!rxjs */ \"(ssr)/./node_modules/rxjs/dist/esm5/internal/operators/skipUntil.js\");\n/* harmony import */ var _barrel_optimize_names_concat_distinctUntilChanged_fromEvent_map_of_skipUntil_timeout_rxjs__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! __barrel_optimize__?names=concat,distinctUntilChanged,fromEvent,map,of,skipUntil,timeout!=!rxjs */ \"(ssr)/./node_modules/rxjs/dist/esm5/internal/operators/distinctUntilChanged.js\");\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __spreadValues = (a, b)=>{\n    for(var prop in b || (b = {}))if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n    if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)){\n        if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n    }\n    return a;\n};\nvar __spreadProps = (a, b)=>__defProps(a, __getOwnPropDescs(b));\nvar __objRest = (source, exclude)=>{\n    var target = {};\n    for(var prop in source)if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0) target[prop] = source[prop];\n    if (source != null && __getOwnPropSymbols) for (var prop of __getOwnPropSymbols(source)){\n        if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop)) target[prop] = source[prop];\n    }\n    return target;\n};\nvar __async = (__this, __arguments, generator)=>{\n    return new Promise((resolve, reject)=>{\n        var fulfilled = (value)=>{\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        };\n        var rejected = (value)=>{\n            try {\n                step(generator.throw(value));\n            } catch (e) {\n                reject(e);\n            }\n        };\n        var step = (x)=>x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n        step((generator = generator.apply(__this, __arguments)).next());\n    });\n};\n// src/constants.ts\nvar cssPrefix = \"lk\";\n// src/utils.ts\n\n// src/track-reference/track-reference.types.ts\nfunction isTrackReference(trackReference) {\n    if (typeof trackReference === \"undefined\") {\n        return false;\n    }\n    return isTrackReferenceSubscribed(trackReference) || isTrackReferencePublished(trackReference);\n}\nfunction isTrackReferenceSubscribed(trackReference) {\n    var _a;\n    if (!trackReference) {\n        return false;\n    }\n    return trackReference.hasOwnProperty(\"participant\") && trackReference.hasOwnProperty(\"source\") && trackReference.hasOwnProperty(\"track\") && typeof ((_a = trackReference.publication) == null ? void 0 : _a.track) !== \"undefined\";\n}\nfunction isTrackReferencePublished(trackReference) {\n    if (!trackReference) {\n        return false;\n    }\n    return trackReference.hasOwnProperty(\"participant\") && trackReference.hasOwnProperty(\"source\") && trackReference.hasOwnProperty(\"publication\") && typeof trackReference.publication !== \"undefined\";\n}\nfunction isTrackReferencePlaceholder(trackReference) {\n    if (!trackReference) {\n        return false;\n    }\n    return trackReference.hasOwnProperty(\"participant\") && trackReference.hasOwnProperty(\"source\") && typeof trackReference.publication === \"undefined\";\n}\n// src/track-reference/track-reference.utils.ts\nfunction getTrackReferenceId(trackReference) {\n    if (typeof trackReference === \"string\" || typeof trackReference === \"number\") {\n        return `${trackReference}`;\n    } else if (isTrackReferencePlaceholder(trackReference)) {\n        return `${trackReference.participant.identity}_${trackReference.source}_placeholder`;\n    } else if (isTrackReference(trackReference)) {\n        return `${trackReference.participant.identity}_${trackReference.publication.source}_${trackReference.publication.trackSid}`;\n    } else {\n        throw new Error(`Can't generate a id for the given track reference: ${trackReference}`);\n    }\n}\nfunction getTrackReferenceSource(trackReference) {\n    if (isTrackReference(trackReference)) {\n        return trackReference.publication.source;\n    } else {\n        return trackReference.source;\n    }\n}\nfunction isEqualTrackRef(a, b) {\n    if (a === void 0 || b === void 0) {\n        return false;\n    }\n    if (isTrackReference(a) && isTrackReference(b)) {\n        return a.publication.trackSid === b.publication.trackSid;\n    } else {\n        return getTrackReferenceId(a) === getTrackReferenceId(b);\n    }\n}\nfunction isTrackReferencePinned(trackReference, pinState) {\n    if (typeof pinState === \"undefined\") {\n        return false;\n    }\n    if (isTrackReference(trackReference)) {\n        return pinState.some((pinnedTrackReference)=>pinnedTrackReference.participant.identity === trackReference.participant.identity && isTrackReference(pinnedTrackReference) && pinnedTrackReference.publication.trackSid === trackReference.publication.trackSid);\n    } else if (isTrackReferencePlaceholder(trackReference)) {\n        return pinState.some((pinnedTrackReference)=>pinnedTrackReference.participant.identity === trackReference.participant.identity && isTrackReferencePlaceholder(pinnedTrackReference) && pinnedTrackReference.source === trackReference.source);\n    } else {\n        return false;\n    }\n}\nfunction isPlaceholderReplacement(currentTrackRef, nextTrackRef) {\n    return isTrackReferencePlaceholder(currentTrackRef) && isTrackReference(nextTrackRef) && nextTrackRef.participant.identity === currentTrackRef.participant.identity && nextTrackRef.source === currentTrackRef.source;\n}\n// src/utils.ts\nfunction isLocal(p) {\n    return p instanceof livekit_client__WEBPACK_IMPORTED_MODULE_0__.LocalParticipant;\n}\nfunction isRemote(p) {\n    return p instanceof livekit_client__WEBPACK_IMPORTED_MODULE_0__.RemoteParticipant;\n}\nvar attachIfSubscribed = (publication, element)=>{\n    if (!publication) return;\n    const { isSubscribed, track } = publication;\n    if (element && track) {\n        if (isSubscribed) {\n            track.attach(element);\n        } else {\n            track.detach(element);\n        }\n    }\n};\nfunction isParticipantSourcePinned(participant, source, pinState) {\n    if (pinState === void 0) {\n        return false;\n    }\n    return pinState.some(({ source: pinnedSource, participant: pinnedParticipant })=>pinnedSource === source && pinnedParticipant.identity === participant.identity);\n}\nfunction isParticipantTrackReferencePinned(trackRef, pinState) {\n    if (pinState === void 0) {\n        return false;\n    }\n    return pinState.some((pinnedTrackRef)=>isEqualTrackRef(pinnedTrackRef, trackRef));\n}\nfunction getScrollBarWidth() {\n    const inner = document.createElement(\"p\");\n    inner.style.width = \"100%\";\n    inner.style.height = \"200px\";\n    const outer = document.createElement(\"div\");\n    outer.style.position = \"absolute\";\n    outer.style.top = \"0px\";\n    outer.style.left = \"0px\";\n    outer.style.visibility = \"hidden\";\n    outer.style.width = \"200px\";\n    outer.style.height = \"150px\";\n    outer.style.overflow = \"hidden\";\n    outer.appendChild(inner);\n    document.body.appendChild(outer);\n    const w1 = inner.offsetWidth;\n    outer.style.overflow = \"scroll\";\n    let w2 = inner.offsetWidth;\n    if (w1 === w2) {\n        w2 = outer.clientWidth;\n    }\n    document.body.removeChild(outer);\n    const scrollBarWidth = w1 - w2;\n    return scrollBarWidth;\n}\n// src/helper/detectMobileBrowser.ts\nfunction isWeb() {\n    return typeof document !== \"undefined\";\n}\nfunction isMobileBrowser() {\n    return isWeb() ? /Mobi/i.test(window.navigator.userAgent) : false;\n}\n// src/helper/url-regex.ts\nfunction createUrlRegExp(options) {\n    options = __spreadValues({}, options);\n    const protocol = `(?:(?:[a-z]+:)?//)?`;\n    const auth = \"(?:\\\\S+(?::\\\\S*)?@)?\";\n    const ip = new RegExp(\"(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]\\\\d|\\\\d)(?:\\\\.(?:25[0-5]|2[0-4]\\\\d|1\\\\d\\\\d|[1-9]\\\\d|\\\\d)){3}\", \"g\").source;\n    const host = \"(?:(?:[a-z\\\\u00a1-\\\\uffff0-9][-_]*)*[a-z\\\\u00a1-\\\\uffff0-9]+)\";\n    const domain = \"(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)*\";\n    const tld = `(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff]{2,}))\\\\.?`;\n    const port = \"(?::\\\\d{2,5})?\";\n    const path = '(?:[/?#][^\\\\s\"]*)?';\n    const regex = `(?:${protocol}|www\\\\.)${auth}(?:localhost|${ip}|${host}${domain}${tld})${port}${path}`;\n    return options.exact ? new RegExp(`(?:^${regex}$)`, \"i\") : new RegExp(regex, \"ig\");\n}\n// src/helper/emailRegex.ts\n\n// src/helper/floating-menu.ts\n\nfunction computeMenuPosition(button, menu) {\n    return __async(this, null, function*() {\n        const { x, y } = yield (0,_floating_ui_dom__WEBPACK_IMPORTED_MODULE_2__.computePosition)(button, menu, {\n            placement: \"top\",\n            middleware: [\n                (0,_floating_ui_dom__WEBPACK_IMPORTED_MODULE_3__.offset)(6),\n                (0,_floating_ui_dom__WEBPACK_IMPORTED_MODULE_2__.flip)(),\n                (0,_floating_ui_dom__WEBPACK_IMPORTED_MODULE_2__.shift)({\n                    padding: 5\n                })\n            ]\n        });\n        return {\n            x,\n            y\n        };\n    });\n}\nfunction wasClickOutside(insideElement, event) {\n    const isOutside = !insideElement.contains(event.target);\n    return isOutside;\n}\n// src/helper/tokenizer.ts\nvar createDefaultGrammar = ()=>{\n    return {\n        email: (0,email_regex__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(),\n        url: createUrlRegExp({})\n    };\n};\nfunction tokenize(input, grammar) {\n    const matches = Object.entries(grammar).map(([type, rx], weight)=>Array.from(input.matchAll(rx)).map(({ index, 0: content })=>({\n                type,\n                weight,\n                content,\n                index: index != null ? index : 0\n            }))).flat().sort((a, b)=>{\n        const d = a.index - b.index;\n        return d !== 0 ? d : a.weight - b.weight;\n    }).filter(({ index }, i, arr)=>{\n        if (i === 0) return true;\n        const prev = arr[i - 1];\n        return prev.index + prev.content.length <= index;\n    });\n    const tokens = [];\n    let pos = 0;\n    for (const { type, content, index } of matches){\n        if (index > pos) tokens.push(input.substring(pos, index));\n        tokens.push({\n            type,\n            content\n        });\n        pos = index + content.length;\n    }\n    if (input.length > pos) tokens.push(input.substring(pos));\n    return tokens;\n}\n// src/helper/eventGroups.ts\n\nvar allRemoteParticipantRoomEvents = [\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ConnectionStateChanged,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.RoomMetadataChanged,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ActiveSpeakersChanged,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ConnectionQualityChanged,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ParticipantConnected,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ParticipantDisconnected,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ParticipantPermissionsChanged,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ParticipantMetadataChanged,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.TrackMuted,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.TrackUnmuted,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.TrackPublished,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.TrackUnpublished,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.TrackStreamStateChanged,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.TrackSubscriptionFailed,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.TrackSubscriptionPermissionChanged,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.TrackSubscriptionStatusChanged\n];\nvar allParticipantRoomEvents = [\n    ...allRemoteParticipantRoomEvents,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.LocalTrackPublished,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.LocalTrackUnpublished\n];\nvar allRemoteParticipantEvents = [\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.ConnectionQualityChanged,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.IsSpeakingChanged,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.ParticipantMetadataChanged,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.ParticipantPermissionsChanged,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackMuted,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackUnmuted,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackPublished,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackUnpublished,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackStreamStateChanged,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackSubscriptionFailed,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackSubscriptionPermissionChanged,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackSubscriptionStatusChanged\n];\nvar allParticipantEvents = [\n    ...allRemoteParticipantEvents,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.LocalTrackPublished,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.LocalTrackUnpublished\n];\n// src/logger.ts\n\n\nvar log = loglevel__WEBPACK_IMPORTED_MODULE_4__.getLogger(\"lk-components-js\");\nlog.setDefaultLevel(\"WARN\");\nfunction setLogLevel(level, options = {}) {\n    var _a;\n    log.setLevel(level);\n    (0,livekit_client__WEBPACK_IMPORTED_MODULE_0__.setLogLevel)((_a = options.liveKitClientLogLevel) != null ? _a : level);\n}\nfunction setLogExtension(extension, options = {}) {\n    var _a;\n    const originalFactory = log.methodFactory;\n    log.methodFactory = (methodName, configLevel, loggerName)=>{\n        const rawMethod = originalFactory(methodName, configLevel, loggerName);\n        const logLevel = livekit_client__WEBPACK_IMPORTED_MODULE_0__.LogLevel[methodName];\n        const needLog = logLevel >= configLevel && logLevel < livekit_client__WEBPACK_IMPORTED_MODULE_0__.LogLevel.silent;\n        return (msg, context)=>{\n            if (context) rawMethod(msg, context);\n            else rawMethod(msg);\n            if (needLog) {\n                extension(logLevel, msg, context);\n            }\n        };\n    };\n    log.setLevel(log.getLevel());\n    (0,livekit_client__WEBPACK_IMPORTED_MODULE_0__.setLogExtension)((_a = options.liveKitClientLogExtension) != null ? _a : extension);\n}\n// src/helper/grid-layouts.ts\nvar GRID_LAYOUTS = [\n    {\n        columns: 1,\n        rows: 1,\n        name: \"1x1\",\n        minTiles: 1,\n        maxTiles: 1,\n        minWidth: 0,\n        minHeight: 0\n    },\n    {\n        columns: 1,\n        rows: 2,\n        name: \"1x2\",\n        minTiles: 2,\n        maxTiles: 2,\n        minWidth: 0,\n        minHeight: 0\n    },\n    {\n        columns: 2,\n        rows: 1,\n        name: \"2x1\",\n        minTiles: 2,\n        maxTiles: 2,\n        minWidth: 900,\n        minHeight: 0\n    },\n    {\n        columns: 2,\n        rows: 2,\n        name: \"2x2\",\n        minTiles: 3,\n        maxTiles: 4,\n        minWidth: 560,\n        minHeight: 0\n    },\n    {\n        columns: 3,\n        rows: 3,\n        name: \"3x3\",\n        minTiles: 5,\n        maxTiles: 9,\n        minWidth: 700,\n        minHeight: 0\n    },\n    {\n        columns: 4,\n        rows: 4,\n        name: \"4x4\",\n        minTiles: 10,\n        maxTiles: 16,\n        minWidth: 960,\n        minHeight: 0\n    },\n    {\n        columns: 5,\n        rows: 5,\n        name: \"5x5\",\n        minTiles: 17,\n        maxTiles: 25,\n        minWidth: 1100,\n        minHeight: 0\n    }\n];\nfunction selectGridLayout(layouts, participantCount, width, height) {\n    let currentLayoutIndex = 0;\n    let layout = layouts.find((layout_, index, allLayouts)=>{\n        currentLayoutIndex = index;\n        const isBiggerLayoutAvailable = allLayouts.findIndex((l, i)=>{\n            const layoutIsBiggerThanCurrent = i > index;\n            const layoutFitsSameAmountOfParticipants = l.maxTiles === layout_.maxTiles;\n            return layoutIsBiggerThanCurrent && layoutFitsSameAmountOfParticipants;\n        }) !== -1;\n        return layout_.maxTiles >= participantCount && !isBiggerLayoutAvailable;\n    });\n    if (layout === void 0) {\n        layout = layouts[layouts.length - 1];\n        if (layout) {\n            log.warn(`No layout found for: participantCount: ${participantCount}, width/height: ${width}/${height} fallback to biggest available layout (${layout.name}).`);\n        } else {\n            throw new Error(`No layout or fallback layout found.`);\n        }\n    }\n    if (width < layout.minWidth || height < layout.minHeight) {\n        if (currentLayoutIndex > 0) {\n            const smallerLayout = layouts[currentLayoutIndex - 1];\n            layout = selectGridLayout(layouts.slice(0, currentLayoutIndex), smallerLayout.maxTiles, width, height);\n        }\n    }\n    return layout;\n}\n// src/helper/set-helper.ts\nfunction setDifference(setA, setB) {\n    const _difference = new Set(setA);\n    for (const elem of setB){\n        _difference.delete(elem);\n    }\n    return _difference;\n}\n// src/helper/featureDetection.ts\nfunction supportsScreenSharing() {\n    return typeof navigator !== \"undefined\" && navigator.mediaDevices && !!navigator.mediaDevices.getDisplayMedia;\n}\n// src/types.ts\nvar PIN_DEFAULT_STATE = [];\nvar WIDGET_DEFAULT_STATE = {\n    showChat: false,\n    unreadMessages: 0\n};\nfunction isSourceWitOptions(source) {\n    return typeof source === \"object\";\n}\nfunction isSourcesWithOptions(sources) {\n    return Array.isArray(sources) && sources.filter(isSourceWitOptions).length > 0;\n}\n// src/sorting/sort-track-bundles.ts\n\n// src/sorting/base-sort-functions.ts\n\nfunction sortParticipantsByAudioLevel(a, b) {\n    return b.audioLevel - a.audioLevel;\n}\nfunction sortParticipantsByIsSpeaking(a, b) {\n    if (a.isSpeaking === b.isSpeaking) {\n        return 0;\n    } else {\n        return a.isSpeaking ? -1 : 1;\n    }\n}\nfunction sortParticipantsByLastSpokenAT(a, b) {\n    var _a, _b, _c, _d;\n    if (a.lastSpokeAt !== void 0 || b.lastSpokeAt !== void 0) {\n        return ((_b = (_a = b.lastSpokeAt) == null ? void 0 : _a.getTime()) != null ? _b : 0) - ((_d = (_c = a.lastSpokeAt) == null ? void 0 : _c.getTime()) != null ? _d : 0);\n    } else {\n        return 0;\n    }\n}\nfunction sortParticipantsByJoinedAt(a, b) {\n    var _a, _b, _c, _d;\n    return ((_b = (_a = a.joinedAt) == null ? void 0 : _a.getTime()) != null ? _b : 0) - ((_d = (_c = b.joinedAt) == null ? void 0 : _c.getTime()) != null ? _d : 0);\n}\nfunction sortTrackReferencesByType(a, b) {\n    if (isTrackReference(a)) {\n        if (isTrackReference(b)) {\n            return 0;\n        } else {\n            return -1;\n        }\n    } else if (isTrackReference(b)) {\n        return 1;\n    } else {\n        return 0;\n    }\n}\nfunction sortTrackRefsByIsCameraEnabled(a, b) {\n    const aVideo = a.participant.isCameraEnabled;\n    const bVideo = b.participant.isCameraEnabled;\n    if (aVideo !== bVideo) {\n        if (aVideo) {\n            return -1;\n        } else {\n            return 1;\n        }\n    } else {\n        return 0;\n    }\n}\n// src/sorting/sort-track-bundles.ts\nfunction sortTrackReferences(tracks) {\n    const localTracks = [];\n    const screenShareTracks = [];\n    const cameraTracks = [];\n    const undefinedTracks = [];\n    tracks.forEach((trackRef)=>{\n        if (trackRef.participant.isLocal && trackRef.source === livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.Camera) {\n            localTracks.push(trackRef);\n        } else if (trackRef.source === livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.ScreenShare) {\n            screenShareTracks.push(trackRef);\n        } else if (trackRef.source === livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.Camera) {\n            cameraTracks.push(trackRef);\n        } else {\n            undefinedTracks.push(trackRef);\n        }\n    });\n    const sortedScreenShareTracks = sortScreenShareTracks(screenShareTracks);\n    const sortedCameraTracks = sortCameraTracks(cameraTracks);\n    return [\n        ...localTracks,\n        ...sortedScreenShareTracks,\n        ...sortedCameraTracks,\n        ...undefinedTracks\n    ];\n}\nfunction sortScreenShareTracks(screenShareTracks) {\n    const localScreenShares = [];\n    const remoteScreenShares = [];\n    screenShareTracks.forEach((trackRef)=>{\n        if (trackRef.participant.isLocal) {\n            localScreenShares.push(trackRef);\n        } else {\n            remoteScreenShares.push(trackRef);\n        }\n    });\n    localScreenShares.sort((a, b)=>sortParticipantsByJoinedAt(a.participant, b.participant));\n    remoteScreenShares.sort((a, b)=>sortParticipantsByJoinedAt(a.participant, b.participant));\n    const sortedScreenShareTrackRefs = [\n        ...remoteScreenShares,\n        ...localScreenShares\n    ];\n    return sortedScreenShareTrackRefs;\n}\nfunction sortCameraTracks(cameraTrackReferences) {\n    const localCameraTracks = [];\n    const remoteCameraTracks = [];\n    cameraTrackReferences.forEach((trackRef)=>{\n        if (trackRef.participant.isLocal) {\n            localCameraTracks.push(trackRef);\n        } else {\n            remoteCameraTracks.push(trackRef);\n        }\n    });\n    remoteCameraTracks.sort((a, b)=>{\n        if (a.participant.isSpeaking && b.participant.isSpeaking) {\n            return sortParticipantsByAudioLevel(a.participant, b.participant);\n        }\n        if (a.participant.isSpeaking !== b.participant.isSpeaking) {\n            return sortParticipantsByIsSpeaking(a.participant, b.participant);\n        }\n        if (a.participant.lastSpokeAt !== b.participant.lastSpokeAt) {\n            return sortParticipantsByLastSpokenAT(a.participant, b.participant);\n        }\n        if (isTrackReference(a) !== isTrackReference(b)) {\n            return sortTrackReferencesByType(a, b);\n        }\n        if (a.participant.isCameraEnabled !== b.participant.isCameraEnabled) {\n            return sortTrackRefsByIsCameraEnabled(a, b);\n        }\n        return sortParticipantsByJoinedAt(a.participant, b.participant);\n    });\n    return [\n        ...localCameraTracks,\n        ...remoteCameraTracks\n    ];\n}\n// src/sorting/sort-participants.ts\n\nfunction sortParticipants(participants) {\n    const sortedParticipants = [\n        ...participants\n    ];\n    sortedParticipants.sort((a, b)=>{\n        if (a.isSpeaking && b.isSpeaking) {\n            return sortParticipantsByAudioLevel(a, b);\n        }\n        if (a.isSpeaking !== b.isSpeaking) {\n            return sortParticipantsByIsSpeaking(a, b);\n        }\n        if (a.lastSpokeAt !== b.lastSpokeAt) {\n            return sortParticipantsByLastSpokenAT(a, b);\n        }\n        const aVideo = a.videoTracks.size > 0;\n        const bVideo = b.videoTracks.size > 0;\n        if (aVideo !== bVideo) {\n            if (aVideo) {\n                return -1;\n            } else {\n                return 1;\n            }\n        }\n        return sortParticipantsByJoinedAt(a, b);\n    });\n    const localParticipant = sortedParticipants.find((p)=>p instanceof livekit_client__WEBPACK_IMPORTED_MODULE_0__.LocalParticipant);\n    if (localParticipant) {\n        const localIdx = sortedParticipants.indexOf(localParticipant);\n        if (localIdx >= 0) {\n            sortedParticipants.splice(localIdx, 1);\n            if (sortedParticipants.length > 0) {\n                sortedParticipants.splice(0, 0, localParticipant);\n            } else {\n                sortedParticipants.push(localParticipant);\n            }\n        }\n    }\n    return sortedParticipants;\n}\n// src/helper/array-helper.ts\nfunction chunk(input, size) {\n    return input.reduce((arr, item, idx)=>{\n        return idx % size === 0 ? [\n            ...arr,\n            [\n                item\n            ]\n        ] : [\n            ...arr.slice(0, -1),\n            [\n                ...arr.slice(-1)[0],\n                item\n            ]\n        ];\n    }, []);\n}\nfunction zip(a1, a2) {\n    const resultLength = Math.max(a1.length, a2.length);\n    return new Array(resultLength).fill([]).map((_val, idx)=>[\n            a1[idx],\n            a2[idx]\n        ]);\n}\nfunction differenceBy(a1, a2, by) {\n    return a1.filter((c)=>!a2.map((v)=>by(v)).includes(by(c)));\n}\n// src/track-reference/test-utils.ts\n\nfunction flatTrackReferenceArray(list) {\n    return list.map((item)=>{\n        if (typeof item === \"string\" || typeof item === \"number\") {\n            return `${item}`;\n        } else {\n            return getTrackReferenceId(item);\n        }\n    });\n}\n// src/sorting/tile-array-update.ts\nfunction visualPageChange(state, next) {\n    return {\n        dropped: differenceBy(state, next, getTrackReferenceId),\n        added: differenceBy(next, state, getTrackReferenceId)\n    };\n}\nfunction listNeedsUpdating(changes) {\n    return changes.added.length !== 0 || changes.dropped.length !== 0;\n}\nfunction findIndex(trackReference, trackReferences) {\n    const indexToReplace = trackReferences.findIndex((trackReference_)=>getTrackReferenceId(trackReference_) === getTrackReferenceId(trackReference));\n    if (indexToReplace === -1) {\n        throw new Error(`Element not part of the array: ${getTrackReferenceId(trackReference)} not in ${flatTrackReferenceArray(trackReferences)}`);\n    }\n    return indexToReplace;\n}\nfunction swapItems(moveForward, moveBack, trackReferences) {\n    const indexToReplace = findIndex(moveForward, trackReferences);\n    const indexReplaceWith = findIndex(moveBack, trackReferences);\n    trackReferences.splice(indexToReplace, 1, moveBack);\n    trackReferences.splice(indexReplaceWith, 1, moveForward);\n    return trackReferences;\n}\nfunction dropItem(itemToDrop, list) {\n    const indexOfElementToDrop = findIndex(itemToDrop, list);\n    list.splice(indexOfElementToDrop, 1);\n    return list;\n}\nfunction addItem(itemToAdd, list) {\n    return [\n        ...list,\n        itemToAdd\n    ];\n}\nfunction divideIntoPages(list, maxElementsOnPage) {\n    const pages = chunk(list, maxElementsOnPage);\n    return pages;\n}\nfunction updatePages(currentList, nextList, maxItemsOnPage) {\n    let updatedList = refreshList(currentList, nextList);\n    if (updatedList.length < nextList.length) {\n        const addedItems = differenceBy(nextList, updatedList, getTrackReferenceId);\n        updatedList = [\n            ...updatedList,\n            ...addedItems\n        ];\n    }\n    const currentPages = divideIntoPages(updatedList, maxItemsOnPage);\n    const nextPages = divideIntoPages(nextList, maxItemsOnPage);\n    zip(currentPages, nextPages).forEach(([currentPage, nextPage], pageIndex)=>{\n        if (currentPage && nextPage) {\n            const updatedPage = divideIntoPages(updatedList, maxItemsOnPage)[pageIndex];\n            const changes = visualPageChange(updatedPage, nextPage);\n            if (listNeedsUpdating(changes)) {\n                log.debug(`Detected visual changes on page: ${pageIndex}, current: ${flatTrackReferenceArray(currentPage)}, next: ${flatTrackReferenceArray(nextPage)}`, {\n                    changes\n                });\n                if (changes.added.length === changes.dropped.length) {\n                    zip(changes.added, changes.dropped).forEach(([added, dropped])=>{\n                        if (added && dropped) {\n                            updatedList = swapItems(added, dropped, updatedList);\n                        } else {\n                            throw new Error(`For a swap action we need a addition and a removal one is missing: ${added}, ${dropped}`);\n                        }\n                    });\n                }\n                if (changes.added.length === 0 && changes.dropped.length > 0) {\n                    changes.dropped.forEach((item)=>{\n                        updatedList = dropItem(item, updatedList);\n                    });\n                }\n                if (changes.added.length > 0 && changes.dropped.length === 0) {\n                    changes.added.forEach((item)=>{\n                        updatedList = addItem(item, updatedList);\n                    });\n                }\n            }\n        }\n    });\n    if (updatedList.length > nextList.length) {\n        const missingItems = differenceBy(updatedList, nextList, getTrackReferenceId);\n        updatedList = updatedList.filter((item)=>!missingItems.map(getTrackReferenceId).includes(getTrackReferenceId(item)));\n    }\n    return updatedList;\n}\nfunction refreshList(currentList, nextList) {\n    return currentList.map((currentItem)=>{\n        const updateForCurrentItem = nextList.find((newItem_)=>// If the IDs match or ..\n            getTrackReferenceId(currentItem) === getTrackReferenceId(newItem_) || // ... if the current item is a placeholder and the new item is the track reference can replace it.\n            typeof currentItem !== \"number\" && isTrackReferencePlaceholder(currentItem) && isTrackReference(newItem_) && isPlaceholderReplacement(currentItem, newItem_));\n        return updateForCurrentItem != null ? updateForCurrentItem : currentItem;\n    });\n}\n// src/components/mediaToggle.ts\n\n\n// src/observables/participant.ts\n\n\n// src/observables/room.ts\n\n\nfunction observeRoomEvents(room, ...events) {\n    const observable = new _barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_5__.Observable((subscribe)=>{\n        const onRoomUpdate = ()=>{\n            subscribe.next(room);\n        };\n        events.forEach((evt)=>{\n            room.on(evt, onRoomUpdate);\n        });\n        const unsubscribe = ()=>{\n            events.forEach((evt)=>{\n                room.off(evt, onRoomUpdate);\n            });\n        };\n        return unsubscribe;\n    }).pipe((0,_barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_6__.startWith)(room));\n    return observable;\n}\nfunction roomEventSelector(room, event) {\n    const observable = new _barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_5__.Observable((subscribe)=>{\n        const update = (...params)=>{\n            subscribe.next(params);\n        };\n        room.on(event, update);\n        const unsubscribe = ()=>{\n            room.off(event, update);\n        };\n        return unsubscribe;\n    });\n    return observable;\n}\nfunction roomObserver(room) {\n    const observable = observeRoomEvents(room, livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ParticipantConnected, livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ParticipantDisconnected, livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ActiveSpeakersChanged, livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.TrackSubscribed, livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.TrackUnsubscribed, livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.LocalTrackPublished, livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.LocalTrackUnpublished, livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.AudioPlaybackStatusChanged, livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ConnectionStateChanged).pipe((0,_barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_6__.startWith)(room));\n    return observable;\n}\nfunction connectionStateObserver(room) {\n    return roomEventSelector(room, livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ConnectionStateChanged).pipe((0,_barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_7__.map)(([connectionState])=>connectionState), (0,_barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_6__.startWith)(room.state));\n}\nfunction screenShareObserver(room) {\n    let screenShareSubscriber;\n    const observers = [];\n    const observable = new _barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_5__.Observable((subscriber)=>{\n        screenShareSubscriber = subscriber;\n        return ()=>{\n            observers.forEach((observer)=>{\n                observer.unsubscribe();\n            });\n        };\n    });\n    const screenShareTracks = [];\n    const handleSub = (publication, participant)=>{\n        if (publication.source !== livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.ScreenShare && publication.source !== livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.ScreenShareAudio) {\n            return;\n        }\n        let trackMap = screenShareTracks.find((tr)=>tr.participant.identity === participant.identity);\n        const getScreenShareTracks = (participant2)=>{\n            return participant2.getTracks().filter((track)=>(track.source === livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.ScreenShare || track.source === livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.ScreenShareAudio) && track.track);\n        };\n        if (!trackMap) {\n            trackMap = {\n                participant,\n                tracks: getScreenShareTracks(participant)\n            };\n        } else {\n            const index = screenShareTracks.indexOf(trackMap);\n            screenShareTracks.splice(index, 1);\n            trackMap.tracks = getScreenShareTracks(participant);\n        }\n        if (trackMap.tracks.length > 0) {\n            screenShareTracks.push(trackMap);\n        }\n        screenShareSubscriber.next(screenShareTracks);\n    };\n    observers.push(roomEventSelector(room, livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.TrackSubscribed).subscribe(([, ...args])=>handleSub(...args)));\n    observers.push(roomEventSelector(room, livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.TrackUnsubscribed).subscribe(([, ...args])=>handleSub(...args)));\n    observers.push(roomEventSelector(room, livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.LocalTrackPublished).subscribe((args)=>handleSub(...args)));\n    observers.push(roomEventSelector(room, livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.LocalTrackUnpublished).subscribe((args)=>{\n        handleSub(...args);\n    }));\n    observers.push(roomEventSelector(room, livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.TrackMuted).subscribe((args)=>{\n        handleSub(...args);\n    }));\n    observers.push(roomEventSelector(room, livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.TrackUnmuted).subscribe((args)=>{\n        handleSub(...args);\n    }));\n    setTimeout(()=>{\n        for (const p of room.participants.values()){\n            p.getTracks().forEach((track)=>{\n                handleSub(track, p);\n            });\n        }\n    }, 1);\n    return observable;\n}\nfunction roomInfoObserver(room) {\n    const observer = observeRoomEvents(room, livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.RoomMetadataChanged, livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ConnectionStateChanged).pipe((0,_barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_7__.map)((r)=>{\n        return {\n            name: r.name,\n            metadata: r.metadata\n        };\n    }));\n    return observer;\n}\nfunction activeSpeakerObserver(room) {\n    return roomEventSelector(room, livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ActiveSpeakersChanged).pipe((0,_barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_7__.map)(([speakers])=>speakers));\n}\nfunction createMediaDeviceObserver(kind, onError, requestPermissions = true) {\n    var _a;\n    const onDeviceChange = ()=>__async(this, null, function*() {\n            try {\n                const newDevices = yield livekit_client__WEBPACK_IMPORTED_MODULE_0__.Room.getLocalDevices(kind, requestPermissions);\n                deviceSubject.next(newDevices);\n            } catch (e) {\n                onError == null ? void 0 : onError(e);\n            }\n        });\n    const deviceSubject = new _barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_8__.Subject();\n    const observable = deviceSubject.pipe((0,_barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_9__.finalize)(()=>{\n        var _a2;\n        (_a2 = navigator == null ? void 0 : navigator.mediaDevices) == null ? void 0 : _a2.removeEventListener(\"devicechange\", onDeviceChange);\n    }));\n    if (false) {}\n    return (0,_barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_10__.concat)(livekit_client__WEBPACK_IMPORTED_MODULE_0__.Room.getLocalDevices(kind, requestPermissions).catch((e)=>onError == null ? void 0 : onError(e)), observable);\n}\nfunction createDataObserver(room) {\n    return roomEventSelector(room, livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.DataReceived);\n}\nfunction roomAudioPlaybackAllowedObservable(room) {\n    const observable = observeRoomEvents(room, livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.AudioPlaybackStatusChanged).pipe((0,_barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_7__.map)((room2)=>{\n        return {\n            canPlayAudio: room2.canPlaybackAudio\n        };\n    }));\n    return observable;\n}\nfunction roomVideoPlaybackAllowedObservable(room) {\n    const observable = observeRoomEvents(room, livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.VideoPlaybackStatusChanged).pipe((0,_barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_7__.map)((room2)=>{\n        return {\n            canPlayVideo: room2.canPlaybackVideo\n        };\n    }));\n    return observable;\n}\nfunction createActiveDeviceObservable(room, kind) {\n    return roomEventSelector(room, livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ActiveDeviceChanged).pipe((0,_barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_11__.filter)(([kindOfDevice])=>kindOfDevice === kind), (0,_barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_7__.map)(([kind2, deviceId])=>{\n        log.debug(\"activeDeviceObservable | RoomEvent.ActiveDeviceChanged\", {\n            kind: kind2,\n            deviceId\n        });\n        return deviceId;\n    }), (0,_barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_6__.startWith)(room.getActiveDevice(kind)));\n}\nfunction encryptionStatusObservable(room, participant) {\n    return roomEventSelector(room, livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ParticipantEncryptionStatusChanged).pipe((0,_barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_11__.filter)(([, p])=>participant.identity === (p == null ? void 0 : p.identity) || !p && participant.identity === room.localParticipant.identity), (0,_barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_7__.map)(([encrypted])=>encrypted), (0,_barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_6__.startWith)(participant instanceof livekit_client__WEBPACK_IMPORTED_MODULE_0__.LocalParticipant ? participant.isE2EEEnabled : participant.isEncrypted));\n}\n// src/components/mediaTrack.ts\n\n\n// src/styles-interface/class-prefixer.ts\nfunction prefixClass(unprefixedClassName) {\n    return `${cssPrefix}-${unprefixedClassName}`;\n}\n// src/components/mediaTrack.ts\nfunction setupMediaTrack(trackIdentifier) {\n    const initialPub = getTrackByIdentifier(trackIdentifier);\n    const trackObserver = observeParticipantMedia(trackIdentifier.participant).pipe((0,_barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_7__.map)(()=>{\n        return getTrackByIdentifier(trackIdentifier);\n    }), (0,_barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_6__.startWith)(initialPub));\n    const className = prefixClass(trackIdentifier.source === livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.Camera || trackIdentifier.source === livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.ScreenShare ? \"participant-media-video\" : \"participant-media-audio\");\n    return {\n        className,\n        trackObserver\n    };\n}\nfunction getTrackByIdentifier(options) {\n    if (isTrackReference(options)) {\n        return options.publication;\n    } else {\n        const { source, name, participant } = options;\n        if (source && name) {\n            return participant.getTracks().find((pub)=>pub.source === source && pub.trackName === name);\n        } else if (name) {\n            return participant.getTrackByName(name);\n        } else if (source) {\n            return participant.getTrack(source);\n        } else {\n            throw new Error(\"At least one of source and name needs to be defined\");\n        }\n    }\n}\n// src/observables/participant.ts\nfunction observeParticipantEvents(participant, ...events) {\n    const observable = new _barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_5__.Observable((subscribe)=>{\n        const onParticipantUpdate = ()=>{\n            subscribe.next(participant);\n        };\n        events.forEach((evt)=>{\n            participant.on(evt, onParticipantUpdate);\n        });\n        const unsubscribe = ()=>{\n            events.forEach((evt)=>{\n                participant.off(evt, onParticipantUpdate);\n            });\n        };\n        return unsubscribe;\n    }).pipe((0,_barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_6__.startWith)(participant));\n    return observable;\n}\nfunction observeParticipantMedia(participant) {\n    const participantObserver = observeParticipantEvents(participant, livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackMuted, livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackUnmuted, livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.ParticipantPermissionsChanged, // ParticipantEvent.IsSpeakingChanged,\n    livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackPublished, livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackUnpublished, livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.LocalTrackPublished, livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.LocalTrackUnpublished, livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.MediaDevicesError, livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackSubscriptionStatusChanged).pipe((0,_barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_7__.map)((p)=>{\n        const { isMicrophoneEnabled, isCameraEnabled, isScreenShareEnabled } = p;\n        const microphoneTrack = p.getTrack(livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.Microphone);\n        const cameraTrack = p.getTrack(livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.Camera);\n        const participantMedia = {\n            isCameraEnabled,\n            isMicrophoneEnabled,\n            isScreenShareEnabled,\n            cameraTrack,\n            microphoneTrack,\n            participant: p\n        };\n        return participantMedia;\n    }));\n    return participantObserver;\n}\nfunction createTrackObserver(participant, options) {\n    return observeParticipantMedia(participant).pipe((0,_barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_7__.map)(()=>{\n        return {\n            publication: getTrackByIdentifier(options)\n        };\n    }));\n}\nfunction participantInfoObserver(participant) {\n    const observer = observeParticipantEvents(participant, livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.ParticipantMetadataChanged).pipe((0,_barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_7__.map)(({ name, identity, metadata })=>{\n        return {\n            name,\n            identity,\n            metadata\n        };\n    }), (0,_barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_6__.startWith)({\n        name: participant.name,\n        identity: participant.identity,\n        metadata: participant.metadata\n    }));\n    return observer;\n}\nfunction createConnectionQualityObserver(participant) {\n    const observer = participantEventSelector(participant, livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.ConnectionQualityChanged).pipe((0,_barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_7__.map)(([quality])=>quality), (0,_barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_6__.startWith)(participant.connectionQuality));\n    return observer;\n}\nfunction participantEventSelector(participant, event) {\n    const observable = new _barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_5__.Observable((subscribe)=>{\n        const update = (...params)=>{\n            subscribe.next(params);\n        };\n        participant.on(event, update);\n        const unsubscribe = ()=>{\n            participant.off(event, update);\n        };\n        return unsubscribe;\n    });\n    return observable;\n}\nfunction mutedObserver(trackRef) {\n    var _a, _b, _c, _d;\n    return observeParticipantEvents(trackRef.participant, livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackMuted, livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackUnmuted, livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackSubscribed, livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.TrackUnsubscribed, livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.LocalTrackPublished, livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.LocalTrackUnpublished).pipe((0,_barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_7__.map)((participant)=>{\n        var _a2, _b2;\n        const pub = (_a2 = trackRef.publication) != null ? _a2 : participant.getTrack(trackRef.source);\n        return (_b2 = pub == null ? void 0 : pub.isMuted) != null ? _b2 : true;\n    }), (0,_barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_6__.startWith)((_d = (_c = (_a = trackRef.publication) == null ? void 0 : _a.isMuted) != null ? _c : (_b = trackRef.participant.getTrack(trackRef.source)) == null ? void 0 : _b.isMuted) != null ? _d : true));\n}\nfunction createIsSpeakingObserver(participant) {\n    return participantEventSelector(participant, livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.IsSpeakingChanged).pipe((0,_barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_7__.map)(([isSpeaking])=>isSpeaking));\n}\nfunction connectedParticipantsObserver(room, options = {}) {\n    var _a;\n    let subscriber;\n    const observable = new _barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_5__.Observable((sub)=>{\n        subscriber = sub;\n        return ()=>listener.unsubscribe();\n    }).pipe((0,_barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_6__.startWith)(Array.from(room.participants.values())));\n    const additionalRoomEvents = (_a = options.additionalRoomEvents) != null ? _a : allParticipantRoomEvents;\n    const roomEvents = Array.from(/* @__PURE__ */ new Set([\n        livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ParticipantConnected,\n        livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ParticipantDisconnected,\n        livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ConnectionStateChanged,\n        ...additionalRoomEvents\n    ]));\n    const listener = observeRoomEvents(room, ...roomEvents).subscribe((r)=>subscriber == null ? void 0 : subscriber.next(Array.from(r.participants.values())));\n    if (room.participants.size > 0) {\n        subscriber == null ? void 0 : subscriber.next(Array.from(room.participants.values()));\n    }\n    return observable;\n}\nfunction connectedParticipantObserver(room, identity, options = {}) {\n    var _a;\n    const additionalEvents = (_a = options.additionalEvents) != null ? _a : allParticipantEvents;\n    const observable = observeRoomEvents(room, livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ParticipantConnected, livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ParticipantDisconnected, livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ConnectionStateChanged).pipe((0,_barrel_optimize_names_Observable_map_startWith_switchMap_rxjs__WEBPACK_IMPORTED_MODULE_12__.switchMap)((r)=>{\n        const participant = r.getParticipantByIdentity(identity);\n        if (participant) {\n            return observeParticipantEvents(participant, ...additionalEvents);\n        } else {\n            return new _barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_5__.Observable((subscribe)=>subscribe.next(void 0));\n        }\n    }), (0,_barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_6__.startWith)(room.getParticipantByIdentity(identity)));\n    return observable;\n}\nfunction participantPermissionObserver(participant) {\n    const observer = participantEventSelector(participant, livekit_client__WEBPACK_IMPORTED_MODULE_0__.ParticipantEvent.ParticipantPermissionsChanged).pipe((0,_barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_7__.map)(()=>participant.permissions), (0,_barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_6__.startWith)(participant.permissions));\n    return observer;\n}\n// src/components/mediaToggle.ts\nfunction setupMediaToggle(source, room, options) {\n    const { localParticipant } = room;\n    const getSourceEnabled = (source2, localParticipant2)=>{\n        let isEnabled = false;\n        switch(source2){\n            case livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.Camera:\n                isEnabled = localParticipant2.isCameraEnabled;\n                break;\n            case livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.Microphone:\n                isEnabled = localParticipant2.isMicrophoneEnabled;\n                break;\n            case livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.ScreenShare:\n                isEnabled = localParticipant2.isScreenShareEnabled;\n                break;\n            default:\n                break;\n        }\n        return isEnabled;\n    };\n    const enabledObserver = observeParticipantMedia(localParticipant).pipe((0,_barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_7__.map)((media)=>{\n        return getSourceEnabled(source, media.participant);\n    }), (0,_barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_6__.startWith)(getSourceEnabled(source, localParticipant)));\n    const pendingSubject = new _barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_8__.Subject();\n    const toggle = (forceState, captureOptions)=>__async(this, null, function*() {\n            try {\n                captureOptions != null ? captureOptions : captureOptions = options;\n                pendingSubject.next(true);\n                switch(source){\n                    case livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.Camera:\n                        yield localParticipant.setCameraEnabled(forceState != null ? forceState : !localParticipant.isCameraEnabled, captureOptions);\n                        break;\n                    case livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.Microphone:\n                        yield localParticipant.setMicrophoneEnabled(forceState != null ? forceState : !localParticipant.isMicrophoneEnabled, captureOptions);\n                        break;\n                    case livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.ScreenShare:\n                        yield localParticipant.setScreenShareEnabled(forceState != null ? forceState : !localParticipant.isScreenShareEnabled, captureOptions);\n                        break;\n                    default:\n                        break;\n                }\n            } finally{\n                pendingSubject.next(false);\n            }\n        });\n    const className = prefixClass(\"button\");\n    return {\n        className,\n        toggle,\n        enabledObserver,\n        pendingObserver: pendingSubject.asObservable()\n    };\n}\nfunction setupManualToggle() {\n    let state = false;\n    const enabledSubject = new _barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_8__.Subject();\n    const pendingSubject = new _barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_8__.Subject();\n    const toggle = (forceState)=>__async(this, null, function*() {\n            pendingSubject.next(true);\n            state = forceState != null ? forceState : !state;\n            enabledSubject.next(state);\n            pendingSubject.next(false);\n        });\n    const className = prefixClass(\"button\");\n    return {\n        className,\n        toggle,\n        enabledObserver: enabledSubject.asObservable(),\n        pendingObserver: pendingSubject.asObservable()\n    };\n}\n// src/components/mediaDeviceSelect.ts\n\n\nfunction setupDeviceSelector(kind, room, localTrack) {\n    const activeDeviceSubject = new _barrel_optimize_names_BehaviorSubject_rxjs__WEBPACK_IMPORTED_MODULE_13__.BehaviorSubject(void 0);\n    const activeDeviceObservable = room ? createActiveDeviceObservable(room, kind) : activeDeviceSubject.asObservable();\n    const setActiveMediaDevice = (_0, ..._1)=>__async(this, [\n            _0,\n            ..._1\n        ], function*(id, options = {}) {\n            var _a, _b, _c;\n            if (room) {\n                log.debug(`Switching active device of kind \"${kind}\" with id ${id}.`);\n                yield room.switchActiveDevice(kind, id, options.exact);\n                const actualDeviceId = (_a = room.getActiveDevice(kind)) != null ? _a : id;\n                if (actualDeviceId !== id && id !== \"default\") {\n                    log.info(`We tried to select the device with id (${id}), but the browser decided to select the device with id (${actualDeviceId}) instead.`);\n                }\n                let targetTrack = void 0;\n                if (kind === \"audioinput\") targetTrack = (_b = room.localParticipant.getTrack(livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.Microphone)) == null ? void 0 : _b.track;\n                else if (kind === \"videoinput\") {\n                    targetTrack = (_c = room.localParticipant.getTrack(livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.Camera)) == null ? void 0 : _c.track;\n                }\n                const useDefault = id === \"default\" && !targetTrack || id === \"default\" && (targetTrack == null ? void 0 : targetTrack.mediaStreamTrack.label.startsWith(\"Default\"));\n                activeDeviceSubject.next(useDefault ? id : actualDeviceId);\n            } else if (localTrack) {\n                yield localTrack.setDeviceId(options.exact ? {\n                    exact: id\n                } : id);\n                const actualId = yield localTrack.getDeviceId();\n                activeDeviceSubject.next(id === \"default\" && localTrack.mediaStreamTrack.label.startsWith(\"Default\") ? id : actualId);\n            } else if (activeDeviceSubject.value !== id) {\n                log.warn(\"device switch skipped, please provide either a room or a local track to switch on. \");\n                activeDeviceSubject.next(id);\n            }\n        });\n    const className = prefixClass(\"media-device-select\");\n    return {\n        className,\n        activeDeviceObservable,\n        setActiveMediaDevice\n    };\n}\n// src/components/disconnectButton.ts\nfunction setupDisconnectButton(room) {\n    const disconnect = (stopTracks)=>{\n        room.disconnect(stopTracks);\n    };\n    const className = prefixClass(\"disconnect-button\");\n    return {\n        className,\n        disconnect\n    };\n}\n// src/components/connectionQualityIndicator.ts\nfunction setupConnectionQualityIndicator(participant) {\n    const className = prefixClass(\"connection-quality\");\n    const connectionQualityObserver = createConnectionQualityObserver(participant);\n    return {\n        className,\n        connectionQualityObserver\n    };\n}\n// src/components/trackMutedIndicator.ts\n\nfunction setupTrackMutedIndicator(trackRef) {\n    let classForSource = \"track-muted-indicator-camera\";\n    switch(trackRef.source){\n        case livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.Camera:\n            classForSource = \"track-muted-indicator-camera\";\n            break;\n        case livekit_client__WEBPACK_IMPORTED_MODULE_0__.Track.Source.Microphone:\n            classForSource = \"track-muted-indicator-microphone\";\n            break;\n        default:\n            break;\n    }\n    const className = prefixClass(classForSource);\n    const mediaMutedObserver = mutedObserver(trackRef);\n    return {\n        className,\n        mediaMutedObserver\n    };\n}\n// src/components/participantName.ts\nfunction setupParticipantName(participant) {\n    const infoObserver = participantInfoObserver(participant);\n    return {\n        className: \"lk-participant-name\",\n        infoObserver\n    };\n}\n// src/components/participantTile.ts\nfunction setupParticipantTile() {\n    const className = prefixClass(\"participant-tile\");\n    return {\n        className\n    };\n}\n// src/components/chat.ts\n\n\n// src/observables/dataChannel.ts\n\n\nvar DataTopic = {\n    CHAT: \"lk-chat-topic\"\n};\nfunction sendMessage(_0, _1, _2) {\n    return __async(this, arguments, function*(localParticipant, payload, topic, options = {}) {\n        const { kind, destination } = options;\n        yield localParticipant.publishData(payload, kind != null ? kind : livekit_client__WEBPACK_IMPORTED_MODULE_0__.DataPacket_Kind.RELIABLE, {\n            destination,\n            topic\n        });\n    });\n}\nfunction setupDataMessageHandler(room, topic, onMessage) {\n    const messageObservable = createDataObserver(room).pipe((0,_barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_11__.filter)(([, , , messageTopic])=>topic === void 0 || messageTopic === topic), (0,_barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_7__.map)(([payload, participant, , messageTopic])=>{\n        const msg = {\n            payload,\n            topic: messageTopic,\n            from: participant\n        };\n        onMessage == null ? void 0 : onMessage(msg);\n        return msg;\n    }));\n    let isSendingSubscriber;\n    const isSendingObservable = new _barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_5__.Observable((subscriber)=>{\n        isSendingSubscriber = subscriber;\n    });\n    const send = (_0, ..._1)=>__async(this, [\n            _0,\n            ..._1\n        ], function*(payload, options = {}) {\n            isSendingSubscriber.next(true);\n            try {\n                yield sendMessage(room.localParticipant, payload, topic, options);\n            } finally{\n                isSendingSubscriber.next(false);\n            }\n        });\n    return {\n        messageObservable,\n        isSendingObservable,\n        send\n    };\n}\n// src/components/chat.ts\nvar encoder = new TextEncoder();\nvar decoder = new TextDecoder();\nvar topicSubjectMap = /* @__PURE__ */ new Map();\nvar encode = (message)=>encoder.encode(JSON.stringify({\n        message: message.message,\n        timestamp: message.timestamp\n    }));\nvar decode = (message)=>JSON.parse(decoder.decode(message));\nfunction setupChat(room, options) {\n    var _a, _b;\n    const onDestroyObservable = new _barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_8__.Subject();\n    const { messageDecoder, messageEncoder, channelTopic } = options != null ? options : {};\n    const topic = channelTopic != null ? channelTopic : DataTopic.CHAT;\n    let needsSetup = false;\n    if (!topicSubjectMap.has(room)) {\n        needsSetup = true;\n    }\n    const topicMap = (_a = topicSubjectMap.get(room)) != null ? _a : /* @__PURE__ */ new Map();\n    const messageSubject = (_b = topicMap.get(topic)) != null ? _b : new _barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_8__.Subject();\n    topicMap.set(topic, messageSubject);\n    topicSubjectMap.set(room, topicMap);\n    if (needsSetup) {\n        const { messageObservable } = setupDataMessageHandler(room, topic);\n        messageObservable.pipe((0,_barrel_optimize_names_BehaviorSubject_Subject_map_scan_takeUntil_rxjs__WEBPACK_IMPORTED_MODULE_14__.takeUntil)(onDestroyObservable)).subscribe(messageSubject);\n    }\n    const finalMessageDecoder = messageDecoder != null ? messageDecoder : decode;\n    const messagesObservable = messageSubject.pipe((0,_barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_7__.map)((msg)=>{\n        const parsedMessage = finalMessageDecoder(msg.payload);\n        const newMessage = __spreadProps(__spreadValues({}, parsedMessage), {\n            from: msg.from\n        });\n        return newMessage;\n    }), (0,_barrel_optimize_names_BehaviorSubject_Subject_map_scan_takeUntil_rxjs__WEBPACK_IMPORTED_MODULE_15__.scan)((acc, value)=>[\n            ...acc,\n            value\n        ], []), (0,_barrel_optimize_names_BehaviorSubject_Subject_map_scan_takeUntil_rxjs__WEBPACK_IMPORTED_MODULE_14__.takeUntil)(onDestroyObservable));\n    const isSending$ = new _barrel_optimize_names_BehaviorSubject_rxjs__WEBPACK_IMPORTED_MODULE_13__.BehaviorSubject(false);\n    const finalMessageEncoder = messageEncoder != null ? messageEncoder : encode;\n    const send = (message)=>__async(this, null, function*() {\n            const timestamp = Date.now();\n            const encodedMsg = finalMessageEncoder({\n                message,\n                timestamp\n            });\n            isSending$.next(true);\n            try {\n                yield sendMessage(room.localParticipant, encodedMsg, topic, {\n                    kind: livekit_client__WEBPACK_IMPORTED_MODULE_0__.DataPacket_Kind.RELIABLE\n                });\n                messageSubject.next({\n                    payload: encodedMsg,\n                    topic,\n                    from: room.localParticipant\n                });\n            } finally{\n                isSending$.next(false);\n            }\n        });\n    function destroy() {\n        onDestroyObservable.next();\n        onDestroyObservable.complete();\n        topicSubjectMap.clear();\n    }\n    room.once(livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.Disconnected, destroy);\n    return {\n        messageObservable: messagesObservable,\n        isSendingObservable: isSending$,\n        send\n    };\n}\n// src/components/startAudio.ts\nfunction setupStartAudio() {\n    const handleStartAudioPlayback = (room)=>__async(this, null, function*() {\n            log.info(\"Start Audio for room: \", room);\n            yield room.startAudio();\n        });\n    const className = prefixClass(\"start-audio-button\");\n    return {\n        className,\n        roomAudioPlaybackAllowedObservable,\n        handleStartAudioPlayback\n    };\n}\n// src/components/startVideo.ts\nfunction setupStartVideo() {\n    const handleStartVideoPlayback = (room)=>__async(this, null, function*() {\n            log.info(\"Start Video for room: \", room);\n            yield room.startVideo();\n        });\n    const className = prefixClass(\"start-audio-button\");\n    return {\n        className,\n        roomVideoPlaybackAllowedObservable,\n        handleStartVideoPlayback\n    };\n}\n// src/components/chatToggle.ts\nfunction setupChatToggle() {\n    const className = [\n        prefixClass(\"button\"),\n        prefixClass(\"chat-toggle\")\n    ].join(\" \");\n    return {\n        className\n    };\n}\n// src/components/focusToggle.ts\nfunction setupFocusToggle() {\n    const className = [\n        prefixClass(\"button\"),\n        prefixClass(\"focus-toggle-button\")\n    ].join(\" \");\n    return {\n        className\n    };\n}\n// src/components/clearPinButton.ts\nfunction setupClearPinButton() {\n    const className = \"lk-clear-pin-button lk-button\";\n    return {\n        className\n    };\n}\n// src/components/room.ts\nfunction setupLiveKitRoom() {\n    const className = \"lk-room-container\";\n    return {\n        className\n    };\n}\n// src/observables/track.ts\n\n\nfunction trackObservable(track) {\n    const trackObserver = observeTrackEvents(track, livekit_client__WEBPACK_IMPORTED_MODULE_0__.TrackEvent.Muted, livekit_client__WEBPACK_IMPORTED_MODULE_0__.TrackEvent.Unmuted, livekit_client__WEBPACK_IMPORTED_MODULE_0__.TrackEvent.Subscribed, livekit_client__WEBPACK_IMPORTED_MODULE_0__.TrackEvent.Unsubscribed);\n    return trackObserver;\n}\nfunction observeTrackEvents(track, ...events) {\n    const observable = new _barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_5__.Observable((subscribe)=>{\n        const onTrackUpdate = ()=>{\n            subscribe.next(track);\n        };\n        events.forEach((evt)=>{\n            track.on(evt, onTrackUpdate);\n        });\n        const unsubscribe = ()=>{\n            events.forEach((evt)=>{\n                track.off(evt, onTrackUpdate);\n            });\n        };\n        return unsubscribe;\n    }).pipe((0,_barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_6__.startWith)(track));\n    return observable;\n}\nfunction getTrackReferences(room, sources, onlySubscribedTracks = true) {\n    const localParticipant = room.localParticipant;\n    const allParticipants = [\n        localParticipant,\n        ...Array.from(room.participants.values())\n    ];\n    const trackReferences = [];\n    allParticipants.forEach((participant)=>{\n        sources.forEach((source)=>{\n            const sourceReferences = Array.from(participant.tracks.values()).filter((track)=>track.source === source && // either return all or only the ones that are subscribed\n                (!onlySubscribedTracks || track.track)).map((track)=>{\n                return {\n                    participant,\n                    publication: track,\n                    source: track.source\n                };\n            });\n            trackReferences.push(...sourceReferences);\n        });\n    });\n    return {\n        trackReferences,\n        participants: allParticipants\n    };\n}\nfunction trackReferencesObservable(room, sources, options) {\n    var _a, _b;\n    const additionalRoomEvents = (_a = options.additionalRoomEvents) != null ? _a : allParticipantRoomEvents;\n    const onlySubscribedTracks = (_b = options.onlySubscribed) != null ? _b : true;\n    const roomEvents = Array.from(/* @__PURE__ */ new Set([\n        livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ParticipantConnected,\n        livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ParticipantDisconnected,\n        livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.ConnectionStateChanged,\n        livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.LocalTrackPublished,\n        livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.LocalTrackUnpublished,\n        livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.TrackPublished,\n        livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.TrackUnpublished,\n        livekit_client__WEBPACK_IMPORTED_MODULE_0__.RoomEvent.TrackSubscriptionStatusChanged,\n        ...additionalRoomEvents\n    ]).values());\n    const observable = observeRoomEvents(room, ...roomEvents).pipe((0,_barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_7__.map)((room2)=>{\n        const data = getTrackReferences(room2, sources, onlySubscribedTracks);\n        log.debug(`TrackReference[] was updated. (length ${data.trackReferences.length})`, data);\n        return data;\n    }), (0,_barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_6__.startWith)(getTrackReferences(room, sources, onlySubscribedTracks)));\n    return observable;\n}\n// src/observables/dom-event.ts\n\nfunction createInteractingObservable(htmlElement, inactiveAfter = 1e3) {\n    if (htmlElement === null) return (0,_barrel_optimize_names_concat_distinctUntilChanged_fromEvent_map_of_skipUntil_timeout_rxjs__WEBPACK_IMPORTED_MODULE_16__.of)(false);\n    const move$ = (0,_barrel_optimize_names_concat_distinctUntilChanged_fromEvent_map_of_skipUntil_timeout_rxjs__WEBPACK_IMPORTED_MODULE_17__.fromEvent)(htmlElement, \"mousemove\", {\n        passive: true\n    }).pipe((0,_barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_7__.map)(()=>true));\n    const moveAndStop$ = move$.pipe((0,_barrel_optimize_names_concat_distinctUntilChanged_fromEvent_map_of_skipUntil_timeout_rxjs__WEBPACK_IMPORTED_MODULE_18__.timeout)({\n        each: inactiveAfter,\n        with: ()=>(0,_barrel_optimize_names_Observable_Subject_concat_filter_finalize_map_startWith_rxjs__WEBPACK_IMPORTED_MODULE_10__.concat)((0,_barrel_optimize_names_concat_distinctUntilChanged_fromEvent_map_of_skipUntil_timeout_rxjs__WEBPACK_IMPORTED_MODULE_16__.of)(false), moveAndStop$.pipe((0,_barrel_optimize_names_concat_distinctUntilChanged_fromEvent_map_of_skipUntil_timeout_rxjs__WEBPACK_IMPORTED_MODULE_19__.skipUntil)(move$)))\n    }), (0,_barrel_optimize_names_concat_distinctUntilChanged_fromEvent_map_of_skipUntil_timeout_rxjs__WEBPACK_IMPORTED_MODULE_20__.distinctUntilChanged)());\n    return moveAndStop$;\n}\n// src/persistent-storage/local-storage-helpers.ts\nfunction saveToLocalStorage(key, value) {\n    if (typeof localStorage === \"undefined\") {\n        log.error(\"Local storage is not available.\");\n        return;\n    }\n    try {\n        localStorage.setItem(key, JSON.stringify(value));\n    } catch (error) {\n        log.error(`Error setting item to local storage: ${error}`);\n    }\n}\nfunction loadFromLocalStorage(key) {\n    if (typeof localStorage === \"undefined\") {\n        log.error(\"Local storage is not available.\");\n        return void 0;\n    }\n    try {\n        const item = localStorage.getItem(key);\n        if (!item) {\n            log.warn(`Item with key ${key} does not exist in local storage.`);\n            return void 0;\n        }\n        return JSON.parse(item);\n    } catch (error) {\n        log.error(`Error getting item from local storage: ${error}`);\n        return void 0;\n    }\n}\nfunction createLocalStorageInterface(key) {\n    return {\n        load: ()=>loadFromLocalStorage(key),\n        save: (value)=>saveToLocalStorage(key, value)\n    };\n}\n// src/persistent-storage/user-choices.ts\nvar USER_CHOICES_KEY = `${cssPrefix}-user-choices`;\nvar defaultUserChoices = {\n    videoEnabled: true,\n    audioEnabled: true,\n    videoDeviceId: \"\",\n    audioDeviceId: \"\",\n    username: \"\",\n    e2ee: false,\n    sharedPassphrase: \"\"\n};\nvar { load, save } = createLocalStorageInterface(USER_CHOICES_KEY);\nfunction saveUserChoices(userChoices, preventSave = false) {\n    if (preventSave === true) {\n        return;\n    }\n    const _a = userChoices, { e2ee, sharedPassphrase } = _a, toSave = __objRest(_a, [\n        \"e2ee\",\n        \"sharedPassphrase\"\n    ]);\n    save(toSave);\n}\nfunction loadUserChoices(defaults, preventLoad = false) {\n    var _a, _b, _c, _d, _e, _f, _g;\n    const fallback = {\n        videoEnabled: (_a = defaults == null ? void 0 : defaults.videoEnabled) != null ? _a : defaultUserChoices.videoEnabled,\n        audioEnabled: (_b = defaults == null ? void 0 : defaults.audioEnabled) != null ? _b : defaultUserChoices.audioEnabled,\n        videoDeviceId: (_c = defaults == null ? void 0 : defaults.videoDeviceId) != null ? _c : defaultUserChoices.videoDeviceId,\n        audioDeviceId: (_d = defaults == null ? void 0 : defaults.audioDeviceId) != null ? _d : defaultUserChoices.audioDeviceId,\n        username: (_e = defaults == null ? void 0 : defaults.username) != null ? _e : defaultUserChoices.username,\n        e2ee: (_f = defaults == null ? void 0 : defaults.e2ee) != null ? _f : defaultUserChoices.e2ee,\n        sharedPassphrase: (_g = defaults == null ? void 0 : defaults.sharedPassphrase) != null ? _g : defaultUserChoices.sharedPassphrase\n    };\n    if (preventLoad) {\n        return fallback;\n    } else {\n        const maybeLoadedObject = load();\n        const result = __spreadValues(__spreadValues({}, fallback), maybeLoadedObject != null ? maybeLoadedObject : {});\n        return result;\n    }\n}\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@livekit/components-core/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/@livekit/components-react/dist/index.mjs":
/*!***************************************************************!*\
  !*** ./node_modules/@livekit/components-react/dist/index.mjs ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AudioConference: () => (/* binding */ AudioConference),\n/* harmony export */   AudioTrack: () => (/* binding */ AudioTrack),\n/* harmony export */   AudioVisualizer: () => (/* binding */ AudioVisualizer),\n/* harmony export */   CameraDisabledIcon: () => (/* binding */ CameraDisabledIcon_default),\n/* harmony export */   CameraIcon: () => (/* binding */ CameraIcon_default),\n/* harmony export */   CarouselLayout: () => (/* binding */ CarouselLayout),\n/* harmony export */   CarouselView: () => (/* binding */ CarouselView),\n/* harmony export */   Chat: () => (/* binding */ Chat),\n/* harmony export */   ChatCloseIcon: () => (/* binding */ ChatCloseIcon_default),\n/* harmony export */   ChatEntry: () => (/* binding */ ChatEntry),\n/* harmony export */   ChatIcon: () => (/* binding */ ChatIcon_default),\n/* harmony export */   ChatToggle: () => (/* binding */ ChatToggle),\n/* harmony export */   Chevron: () => (/* binding */ Chevron_default),\n/* harmony export */   ClearPinButton: () => (/* binding */ ClearPinButton),\n/* harmony export */   ConnectionQualityIndicator: () => (/* binding */ ConnectionQualityIndicator),\n/* harmony export */   ConnectionState: () => (/* binding */ ConnectionState3),\n/* harmony export */   ConnectionStateToast: () => (/* binding */ ConnectionStateToast),\n/* harmony export */   ControlBar: () => (/* binding */ ControlBar),\n/* harmony export */   DisconnectButton: () => (/* binding */ DisconnectButton),\n/* harmony export */   FocusLayout: () => (/* binding */ FocusLayout),\n/* harmony export */   FocusLayoutContainer: () => (/* binding */ FocusLayoutContainer),\n/* harmony export */   FocusToggle: () => (/* binding */ FocusToggle),\n/* harmony export */   FocusToggleIcon: () => (/* binding */ FocusToggleIcon_default),\n/* harmony export */   GearIcon: () => (/* binding */ GearIcon_default),\n/* harmony export */   GridLayout: () => (/* binding */ GridLayout),\n/* harmony export */   LKFeatureContext: () => (/* binding */ LKFeatureContext),\n/* harmony export */   LayoutContext: () => (/* binding */ LayoutContext),\n/* harmony export */   LayoutContextProvider: () => (/* binding */ LayoutContextProvider),\n/* harmony export */   LeaveIcon: () => (/* binding */ LeaveIcon_default),\n/* harmony export */   LiveKitRoom: () => (/* binding */ LiveKitRoom),\n/* harmony export */   LockLockedIcon: () => (/* binding */ LockLockedIcon_default),\n/* harmony export */   MediaDeviceMenu: () => (/* binding */ MediaDeviceMenu),\n/* harmony export */   MediaDeviceSelect: () => (/* binding */ MediaDeviceSelect),\n/* harmony export */   MicDisabledIcon: () => (/* binding */ MicDisabledIcon_default),\n/* harmony export */   MicIcon: () => (/* binding */ MicIcon_default),\n/* harmony export */   ParticipantAudioTile: () => (/* binding */ ParticipantAudioTile),\n/* harmony export */   ParticipantContext: () => (/* binding */ ParticipantContext),\n/* harmony export */   ParticipantContextIfNeeded: () => (/* binding */ ParticipantContextIfNeeded),\n/* harmony export */   ParticipantLoop: () => (/* binding */ ParticipantLoop),\n/* harmony export */   ParticipantName: () => (/* binding */ ParticipantName),\n/* harmony export */   ParticipantPlaceholder: () => (/* binding */ ParticipantPlaceholder_default),\n/* harmony export */   ParticipantTile: () => (/* binding */ ParticipantTile),\n/* harmony export */   PreJoin: () => (/* binding */ PreJoin),\n/* harmony export */   QualityExcellentIcon: () => (/* binding */ QualityExcellentIcon_default),\n/* harmony export */   QualityGoodIcon: () => (/* binding */ QualityGoodIcon_default),\n/* harmony export */   QualityPoorIcon: () => (/* binding */ QualityPoorIcon_default),\n/* harmony export */   QualityUnknownIcon: () => (/* binding */ QualityUnknownIcon_default),\n/* harmony export */   RoomAudioRenderer: () => (/* binding */ RoomAudioRenderer),\n/* harmony export */   RoomContext: () => (/* binding */ RoomContext),\n/* harmony export */   RoomName: () => (/* binding */ RoomName),\n/* harmony export */   ScreenShareIcon: () => (/* binding */ ScreenShareIcon_default),\n/* harmony export */   ScreenShareStopIcon: () => (/* binding */ ScreenShareStopIcon_default),\n/* harmony export */   SpinnerIcon: () => (/* binding */ SpinnerIcon_default),\n/* harmony export */   StartAudio: () => (/* binding */ StartAudio),\n/* harmony export */   Toast: () => (/* binding */ Toast),\n/* harmony export */   TrackContext: () => (/* binding */ TrackContext),\n/* harmony export */   TrackLoop: () => (/* binding */ TrackLoop),\n/* harmony export */   TrackMutedIndicator: () => (/* binding */ TrackMutedIndicator),\n/* harmony export */   TrackRefContext: () => (/* binding */ TrackRefContext),\n/* harmony export */   TrackToggle: () => (/* binding */ TrackToggle),\n/* harmony export */   UnfocusToggleIcon: () => (/* binding */ UnfocusToggleIcon_default),\n/* harmony export */   VideoConference: () => (/* binding */ VideoConference),\n/* harmony export */   VideoTrack: () => (/* binding */ VideoTrack),\n/* harmony export */   formatChatMessageLinks: () => (/* binding */ formatChatMessageLinks),\n/* harmony export */   isTrackReference: () => (/* reexport safe */ _livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.isTrackReference),\n/* harmony export */   setLogExtension: () => (/* reexport safe */ _livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.setLogExtension),\n/* harmony export */   setLogLevel: () => (/* reexport safe */ _livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.setLogLevel),\n/* harmony export */   useAudioPlayback: () => (/* binding */ useAudioPlayback),\n/* harmony export */   useChat: () => (/* binding */ useChat),\n/* harmony export */   useChatToggle: () => (/* binding */ useChatToggle),\n/* harmony export */   useClearPinButton: () => (/* binding */ useClearPinButton),\n/* harmony export */   useConnectionQualityIndicator: () => (/* binding */ useConnectionQualityIndicator),\n/* harmony export */   useConnectionState: () => (/* binding */ useConnectionState),\n/* harmony export */   useCreateLayoutContext: () => (/* binding */ useCreateLayoutContext),\n/* harmony export */   useDataChannel: () => (/* binding */ useDataChannel),\n/* harmony export */   useDisconnectButton: () => (/* binding */ useDisconnectButton),\n/* harmony export */   useEnsureCreateLayoutContext: () => (/* binding */ useEnsureCreateLayoutContext),\n/* harmony export */   useEnsureLayoutContext: () => (/* binding */ useEnsureLayoutContext),\n/* harmony export */   useEnsureParticipant: () => (/* binding */ useEnsureParticipant),\n/* harmony export */   useEnsureRoom: () => (/* binding */ useEnsureRoom),\n/* harmony export */   useEnsureTrackRef: () => (/* binding */ useEnsureTrackRef),\n/* harmony export */   useEnsureTrackReference: () => (/* binding */ useEnsureTrackReference),\n/* harmony export */   useFacingMode: () => (/* binding */ useFacingMode),\n/* harmony export */   useFeatureContext: () => (/* binding */ useFeatureContext),\n/* harmony export */   useFocusToggle: () => (/* binding */ useFocusToggle),\n/* harmony export */   useGridLayout: () => (/* binding */ useGridLayout),\n/* harmony export */   useIsEncrypted: () => (/* binding */ useIsEncrypted),\n/* harmony export */   useIsMuted: () => (/* binding */ useIsMuted),\n/* harmony export */   useIsSpeaking: () => (/* binding */ useIsSpeaking),\n/* harmony export */   useLayoutContext: () => (/* binding */ useLayoutContext),\n/* harmony export */   useLiveKitRoom: () => (/* binding */ useLiveKitRoom),\n/* harmony export */   useLocalParticipant: () => (/* binding */ useLocalParticipant),\n/* harmony export */   useLocalParticipantPermissions: () => (/* binding */ useLocalParticipantPermissions),\n/* harmony export */   useMaybeLayoutContext: () => (/* binding */ useMaybeLayoutContext),\n/* harmony export */   useMaybeParticipantContext: () => (/* binding */ useMaybeParticipantContext),\n/* harmony export */   useMaybeRoomContext: () => (/* binding */ useMaybeRoomContext),\n/* harmony export */   useMaybeTrackContext: () => (/* binding */ useMaybeTrackContext),\n/* harmony export */   useMaybeTrackRefContext: () => (/* binding */ useMaybeTrackRefContext),\n/* harmony export */   useMediaDeviceSelect: () => (/* binding */ useMediaDeviceSelect),\n/* harmony export */   useMediaDevices: () => (/* binding */ useMediaDevices),\n/* harmony export */   useMediaTrack: () => (/* binding */ useMediaTrack),\n/* harmony export */   useMediaTrackByName: () => (/* binding */ useMediaTrackByName),\n/* harmony export */   useMultibandTrackVolume: () => (/* binding */ useMultibandTrackVolume),\n/* harmony export */   usePagination: () => (/* binding */ usePagination),\n/* harmony export */   useParticipantContext: () => (/* binding */ useParticipantContext),\n/* harmony export */   useParticipantInfo: () => (/* binding */ useParticipantInfo),\n/* harmony export */   useParticipantPermissions: () => (/* binding */ useParticipantPermissions),\n/* harmony export */   useParticipantTile: () => (/* binding */ useParticipantTile),\n/* harmony export */   useParticipants: () => (/* binding */ useParticipants),\n/* harmony export */   usePersistentUserChoices: () => (/* binding */ usePersistentUserChoices),\n/* harmony export */   usePinnedTracks: () => (/* binding */ usePinnedTracks),\n/* harmony export */   usePreviewDevice: () => (/* binding */ usePreviewDevice),\n/* harmony export */   usePreviewTracks: () => (/* binding */ usePreviewTracks),\n/* harmony export */   useRemoteParticipant: () => (/* binding */ useRemoteParticipant),\n/* harmony export */   useRemoteParticipants: () => (/* binding */ useRemoteParticipants),\n/* harmony export */   useRoomContext: () => (/* binding */ useRoomContext),\n/* harmony export */   useRoomInfo: () => (/* binding */ useRoomInfo),\n/* harmony export */   useSortedParticipants: () => (/* binding */ useSortedParticipants),\n/* harmony export */   useSpeakingParticipants: () => (/* binding */ useSpeakingParticipants),\n/* harmony export */   useStartAudio: () => (/* binding */ useStartAudio),\n/* harmony export */   useStartVideo: () => (/* binding */ useStartVideo),\n/* harmony export */   useSwipe: () => (/* binding */ useSwipe),\n/* harmony export */   useToken: () => (/* binding */ useToken),\n/* harmony export */   useTrack: () => (/* binding */ useTrack),\n/* harmony export */   useTrackByName: () => (/* binding */ useTrackByName),\n/* harmony export */   useTrackContext: () => (/* binding */ useTrackContext),\n/* harmony export */   useTrackMutedIndicator: () => (/* binding */ useTrackMutedIndicator),\n/* harmony export */   useTrackRefContext: () => (/* binding */ useTrackRefContext),\n/* harmony export */   useTrackToggle: () => (/* binding */ useTrackToggle),\n/* harmony export */   useTrackVolume: () => (/* binding */ useTrackVolume),\n/* harmony export */   useTracks: () => (/* binding */ useTracks),\n/* harmony export */   useVisualStableUpdate: () => (/* binding */ useVisualStableUpdate)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _react_hook_latest__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @react-hook/latest */ \"(ssr)/./node_modules/@react-hook/latest/dist/esm/index.mjs\");\n/* harmony import */ var _livekit_components_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @livekit/components-core */ \"(ssr)/./node_modules/@livekit/components-core/dist/index.mjs\");\n/* harmony import */ var clsx__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! clsx */ \"(ssr)/./node_modules/clsx/dist/clsx.mjs\");\n/* harmony import */ var livekit_client__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! livekit-client */ \"(ssr)/./node_modules/livekit-client/dist/livekit-client.esm.mjs\");\n/* harmony import */ var usehooks_ts__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! usehooks-ts */ \"(ssr)/./node_modules/usehooks-ts/dist/esm/index.js\");\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __spreadValues = (a, b)=>{\n    for(var prop in b || (b = {}))if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n    if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)){\n        if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n    }\n    return a;\n};\nvar __spreadProps = (a, b)=>__defProps(a, __getOwnPropDescs(b));\nvar __objRest = (source, exclude)=>{\n    var target = {};\n    for(var prop in source)if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0) target[prop] = source[prop];\n    if (source != null && __getOwnPropSymbols) for (var prop of __getOwnPropSymbols(source)){\n        if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop)) target[prop] = source[prop];\n    }\n    return target;\n};\nvar __async = (__this, __arguments, generator)=>{\n    return new Promise((resolve, reject)=>{\n        var fulfilled = (value)=>{\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        };\n        var rejected = (value)=>{\n            try {\n                step(generator.throw(value));\n            } catch (e) {\n                reject(e);\n            }\n        };\n        var step = (x)=>x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n        step((generator = generator.apply(__this, __arguments)).next());\n    });\n};\n// src/components/controls/ClearPinButton.tsx\n\n// src/hooks/useAudioPlayback.ts\n\n// src/hooks/internal/useResizeObserver.ts\n\n\nfunction useResizeObserver(target, callback) {\n    const resizeObserver = getResizeObserver();\n    const storedCallback = (0,_react_hook_latest__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(callback);\n    react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect(()=>{\n        let didUnsubscribe = false;\n        const targetEl = target.current;\n        if (!targetEl) return;\n        function cb(entry, observer) {\n            if (didUnsubscribe) return;\n            storedCallback.current(entry, observer);\n        }\n        resizeObserver == null ? void 0 : resizeObserver.subscribe(targetEl, cb);\n        return ()=>{\n            didUnsubscribe = true;\n            resizeObserver == null ? void 0 : resizeObserver.unsubscribe(targetEl, cb);\n        };\n    }, [\n        target.current,\n        resizeObserver,\n        storedCallback\n    ]);\n    return resizeObserver == null ? void 0 : resizeObserver.observer;\n}\nfunction createResizeObserver() {\n    let ticking = false;\n    let allEntries = [];\n    const callbacks = /* @__PURE__ */ new Map();\n    if (true) {\n        return;\n    }\n    const observer = new ResizeObserver((entries, obs)=>{\n        allEntries = allEntries.concat(entries);\n        if (!ticking) {\n            window.requestAnimationFrame(()=>{\n                const triggered = /* @__PURE__ */ new Set();\n                for(let i = 0; i < allEntries.length; i++){\n                    if (triggered.has(allEntries[i].target)) continue;\n                    triggered.add(allEntries[i].target);\n                    const cbs = callbacks.get(allEntries[i].target);\n                    cbs == null ? void 0 : cbs.forEach((cb)=>cb(allEntries[i], obs));\n                }\n                allEntries = [];\n                ticking = false;\n            });\n        }\n        ticking = true;\n    });\n    return {\n        observer,\n        subscribe (target, callback) {\n            var _a;\n            observer.observe(target);\n            const cbs = (_a = callbacks.get(target)) != null ? _a : [];\n            cbs.push(callback);\n            callbacks.set(target, cbs);\n        },\n        unsubscribe (target, callback) {\n            var _a;\n            const cbs = (_a = callbacks.get(target)) != null ? _a : [];\n            if (cbs.length === 1) {\n                observer.unobserve(target);\n                callbacks.delete(target);\n                return;\n            }\n            const cbIndex = cbs.indexOf(callback);\n            if (cbIndex !== -1) cbs.splice(cbIndex, 1);\n            callbacks.set(target, cbs);\n        }\n    };\n}\nvar _resizeObserver;\nvar getResizeObserver = ()=>!_resizeObserver ? _resizeObserver = createResizeObserver() : _resizeObserver;\nvar useSize = (target)=>{\n    const [size, setSize] = react__WEBPACK_IMPORTED_MODULE_0__.useState({\n        width: 0,\n        height: 0\n    });\n    react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect(()=>{\n        if (target.current) {\n            const { width, height } = target.current.getBoundingClientRect();\n            setSize({\n                width,\n                height\n            });\n        }\n    }, [\n        target.current\n    ]);\n    const resizeCallback = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((entry)=>setSize(entry.contentRect), []);\n    useResizeObserver(target, resizeCallback);\n    return size;\n};\n// src/hooks/internal/useObservableState.ts\n\nfunction useObservableState(observable, startWith) {\n    const [state, setState] = react__WEBPACK_IMPORTED_MODULE_0__.useState(startWith);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        if (true) return;\n        const subscription = observable.subscribe(setState);\n        return ()=>subscription.unsubscribe();\n    }, [\n        observable\n    ]);\n    return state;\n}\n// src/hooks/internal/useMediaQuery.ts\n\nfunction useMediaQuery(query) {\n    const getMatches = (query2)=>{\n        if (false) {}\n        return false;\n    };\n    const [matches, setMatches] = react__WEBPACK_IMPORTED_MODULE_0__.useState(getMatches(query));\n    function handleChange() {\n        setMatches(getMatches(query));\n    }\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        const matchMedia = window.matchMedia(query);\n        handleChange();\n        if (matchMedia.addListener) {\n            matchMedia.addListener(handleChange);\n        } else {\n            matchMedia.addEventListener(\"change\", handleChange);\n        }\n        return ()=>{\n            if (matchMedia.removeListener) {\n                matchMedia.removeListener(handleChange);\n            } else {\n                matchMedia.removeEventListener(\"change\", handleChange);\n            }\n        };\n    }, [\n        query\n    ]);\n    return matches;\n}\n// src/hooks/useAudioPlayback.ts\n\n// src/context/layout-context.ts\n\n\n// src/context/chat-context.ts\nfunction chatReducer(state, action) {\n    if (action.msg === \"show_chat\") {\n        return __spreadProps(__spreadValues({}, state), {\n            showChat: true,\n            unreadMessages: 0\n        });\n    } else if (action.msg === \"hide_chat\") {\n        return __spreadProps(__spreadValues({}, state), {\n            showChat: false\n        });\n    } else if (action.msg === \"toggle_chat\") {\n        const newState = __spreadProps(__spreadValues({}, state), {\n            showChat: !state.showChat\n        });\n        if (newState.showChat === true) {\n            newState.unreadMessages = 0;\n        }\n        return newState;\n    } else if (action.msg === \"unread_msg\") {\n        return __spreadProps(__spreadValues({}, state), {\n            unreadMessages: action.count\n        });\n    } else {\n        return __spreadValues({}, state);\n    }\n}\n// src/context/pin-context.ts\nfunction pinReducer(state, action) {\n    if (action.msg === \"set_pin\") {\n        return [\n            action.trackReference\n        ];\n    } else if (action.msg === \"clear_pin\") {\n        return [];\n    } else {\n        return __spreadValues({}, state);\n    }\n}\n// src/context/layout-context.ts\nvar LayoutContext = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext(void 0);\nfunction useLayoutContext() {\n    const layoutContext = react__WEBPACK_IMPORTED_MODULE_0__.useContext(LayoutContext);\n    if (!layoutContext) {\n        throw Error(\"Tried to access LayoutContext context outside a LayoutContextProvider provider.\");\n    }\n    return layoutContext;\n}\nfunction useEnsureLayoutContext(layoutContext) {\n    const layout = useMaybeLayoutContext();\n    layoutContext != null ? layoutContext : layoutContext = layout;\n    if (!layoutContext) {\n        throw Error(\"Tried to access LayoutContext context outside a LayoutContextProvider provider.\");\n    }\n    return layoutContext;\n}\nfunction useCreateLayoutContext() {\n    const [pinState, pinDispatch] = react__WEBPACK_IMPORTED_MODULE_0__.useReducer(pinReducer, _livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.PIN_DEFAULT_STATE);\n    const [widgetState, widgetDispatch] = react__WEBPACK_IMPORTED_MODULE_0__.useReducer(chatReducer, _livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.WIDGET_DEFAULT_STATE);\n    return {\n        pin: {\n            dispatch: pinDispatch,\n            state: pinState\n        },\n        widget: {\n            dispatch: widgetDispatch,\n            state: widgetState\n        }\n    };\n}\nfunction useEnsureCreateLayoutContext(layoutContext) {\n    const [pinState, pinDispatch] = react__WEBPACK_IMPORTED_MODULE_0__.useReducer(pinReducer, _livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.PIN_DEFAULT_STATE);\n    const [widgetState, widgetDispatch] = react__WEBPACK_IMPORTED_MODULE_0__.useReducer(chatReducer, _livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.WIDGET_DEFAULT_STATE);\n    return layoutContext != null ? layoutContext : {\n        pin: {\n            dispatch: pinDispatch,\n            state: pinState\n        },\n        widget: {\n            dispatch: widgetDispatch,\n            state: widgetState\n        }\n    };\n}\nfunction useMaybeLayoutContext() {\n    return react__WEBPACK_IMPORTED_MODULE_0__.useContext(LayoutContext);\n}\n// src/context/participant-context.ts\n\n// src/context/track-reference-context.ts\n\nvar TrackRefContext = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext(void 0);\nvar TrackContext = TrackRefContext;\nfunction useTrackContext() {\n    return useTrackRefContext();\n}\nfunction useTrackRefContext() {\n    const trackReference = react__WEBPACK_IMPORTED_MODULE_0__.useContext(TrackRefContext);\n    if (!trackReference) {\n        throw Error(\"tried to access track context outside of track context provider\");\n    }\n    return trackReference;\n}\nfunction useMaybeTrackContext() {\n    return useMaybeTrackRefContext();\n}\nfunction useMaybeTrackRefContext() {\n    return react__WEBPACK_IMPORTED_MODULE_0__.useContext(TrackRefContext);\n}\nfunction useEnsureTrackReference(track) {\n    return useEnsureTrackRef(track);\n}\nfunction useEnsureTrackRef(trackRef) {\n    const context = useMaybeTrackRefContext();\n    const ref = trackRef != null ? trackRef : context;\n    if (!ref) {\n        throw new Error(\"No TrackRef, make sure you are inside a TrackRefContext or pass the TrackRef explicitly\");\n    }\n    return ref;\n}\n// src/context/participant-context.ts\nvar ParticipantContext = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext(void 0);\nfunction useParticipantContext() {\n    const participant = react__WEBPACK_IMPORTED_MODULE_0__.useContext(ParticipantContext);\n    if (!participant) {\n        throw Error(\"tried to access participant context outside of participant context provider\");\n    }\n    return participant;\n}\nfunction useMaybeParticipantContext() {\n    return react__WEBPACK_IMPORTED_MODULE_0__.useContext(ParticipantContext);\n}\nfunction useEnsureParticipant(participant) {\n    var _a;\n    const context = useMaybeParticipantContext();\n    const trackContext = useMaybeTrackRefContext();\n    const p = (_a = participant != null ? participant : context) != null ? _a : trackContext == null ? void 0 : trackContext.participant;\n    if (!p) {\n        throw new Error(\"No participant provided, make sure you are inside a participant context or pass the participant explicitly\");\n    }\n    return p;\n}\n// src/context/room-context.ts\n\nvar RoomContext = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext(void 0);\nfunction useRoomContext() {\n    const ctx = react__WEBPACK_IMPORTED_MODULE_0__.useContext(RoomContext);\n    if (!ctx) {\n        throw Error(\"tried to access room context outside of livekit room component\");\n    }\n    return ctx;\n}\nfunction useMaybeRoomContext() {\n    return react__WEBPACK_IMPORTED_MODULE_0__.useContext(RoomContext);\n}\nfunction useEnsureRoom(room) {\n    const context = useMaybeRoomContext();\n    const r = room != null ? room : context;\n    if (!r) {\n        throw new Error(\"No room provided, make sure you are inside a Room context or pass the room explicitly\");\n    }\n    return r;\n}\n// src/context/feature-context.ts\n\nvar LKFeatureContext = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext(void 0);\nfunction useFeatureContext(require2) {\n    const ctx = react__WEBPACK_IMPORTED_MODULE_0__.useContext(LKFeatureContext);\n    if (require2 === true) {\n        if (ctx) {\n            return ctx;\n        } else {\n            throw Error(\"tried to access feature context, but none is present\");\n        }\n    }\n    return ctx;\n}\n// src/hooks/useAudioPlayback.ts\nfunction useAudioPlayback(room) {\n    const roomEnsured = useEnsureRoom(room);\n    const startAudio = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(()=>__async(this, null, function*() {\n            yield roomEnsured.startAudio();\n        }), [\n        roomEnsured\n    ]);\n    const observable = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>(0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.roomAudioPlaybackAllowedObservable)(roomEnsured), [\n        roomEnsured\n    ]);\n    const { canPlayAudio } = useObservableState(observable, {\n        canPlayAudio: roomEnsured.canPlaybackAudio\n    });\n    return {\n        canPlayAudio,\n        startAudio\n    };\n}\n// src/hooks/useClearPinButton.ts\n\n\n// src/mergeProps.ts\n\nfunction chain(...callbacks) {\n    return (...args)=>{\n        for (const callback of callbacks){\n            if (typeof callback === \"function\") {\n                callback(...args);\n            }\n        }\n    };\n}\nfunction mergeProps(...args) {\n    const result = __spreadValues({}, args[0]);\n    for(let i = 1; i < args.length; i++){\n        const props = args[i];\n        for(const key in props){\n            const a = result[key];\n            const b = props[key];\n            if (typeof a === \"function\" && typeof b === \"function\" && // This is a lot faster than a regex.\n            key[0] === \"o\" && key[1] === \"n\" && key.charCodeAt(2) >= /* 'A' */ 65 && key.charCodeAt(2) <= /* 'Z' */ 90) {\n                result[key] = chain(a, b);\n            } else if ((key === \"className\" || key === \"UNSAFE_className\") && typeof a === \"string\" && typeof b === \"string\") {\n                result[key] = (0,clsx__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(a, b);\n            } else {\n                result[key] = b !== void 0 ? b : a;\n            }\n        }\n    }\n    return result;\n}\n// src/hooks/useClearPinButton.ts\nfunction useClearPinButton(props) {\n    const { state, dispatch } = useLayoutContext().pin;\n    const buttonProps = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>{\n        const { className } = (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.setupClearPinButton)();\n        const mergedProps = mergeProps(props, {\n            className,\n            disabled: !(state == null ? void 0 : state.length),\n            onClick: ()=>{\n                if (dispatch) dispatch({\n                    msg: \"clear_pin\"\n                });\n            }\n        });\n        return mergedProps;\n    }, [\n        props,\n        dispatch,\n        state\n    ]);\n    return {\n        buttonProps\n    };\n}\n// src/hooks/useConnectionQualityIndicator.ts\n\n\n\nfunction useConnectionQualityIndicator(options = {}) {\n    const p = useEnsureParticipant(options.participant);\n    const { className, connectionQualityObserver } = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>(0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.setupConnectionQualityIndicator)(p), [\n        p\n    ]);\n    const quality = useObservableState(connectionQualityObserver, livekit_client__WEBPACK_IMPORTED_MODULE_4__.ConnectionQuality.Unknown);\n    return {\n        className,\n        quality\n    };\n}\n// src/hooks/useConnectionStatus.ts\n\n\nfunction useConnectionState(room) {\n    const r = useEnsureRoom(room);\n    const observable = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>(0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.connectionStateObserver)(r), [\n        r\n    ]);\n    const connectionState = useObservableState(observable, r.state);\n    return connectionState;\n}\n// src/hooks/useDataChannel.ts\n\n\nfunction useDataChannel(topicOrCallback, callback) {\n    const onMessage = typeof topicOrCallback === \"function\" ? topicOrCallback : callback;\n    const topic = typeof topicOrCallback === \"string\" ? topicOrCallback : void 0;\n    const room = useRoomContext();\n    const { send, messageObservable, isSendingObservable } = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>(0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.setupDataMessageHandler)(room, topic, onMessage), [\n        room,\n        topic,\n        onMessage\n    ]);\n    const message = useObservableState(messageObservable, void 0);\n    const isSending = useObservableState(isSendingObservable, false);\n    return {\n        message,\n        send,\n        isSending\n    };\n}\n// src/hooks/useDisconnectButton.ts\n\n\n\nfunction useDisconnectButton(props) {\n    const room = useRoomContext();\n    const connectionState = useConnectionState(room);\n    const buttonProps = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>{\n        const { className, disconnect } = (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.setupDisconnectButton)(room);\n        const mergedProps = mergeProps(props, {\n            className,\n            onClick: ()=>{\n                var _a;\n                return disconnect((_a = props.stopTracks) != null ? _a : true);\n            },\n            disabled: connectionState === livekit_client__WEBPACK_IMPORTED_MODULE_4__.ConnectionState.Disconnected\n        });\n        return mergedProps;\n    }, [\n        room,\n        props,\n        connectionState\n    ]);\n    return {\n        buttonProps\n    };\n}\n// src/hooks/useFacingMode.ts\n\nfunction useFacingMode(trackReference) {\n    if (trackReference.publication instanceof livekit_client__WEBPACK_IMPORTED_MODULE_4__.LocalTrackPublication) {\n        const localTrack = trackReference.publication.track;\n        if (localTrack) {\n            const { facingMode } = (0,livekit_client__WEBPACK_IMPORTED_MODULE_4__.facingModeFromLocalTrack)(localTrack);\n            return facingMode;\n        }\n    }\n    return \"undefined\";\n}\n// src/hooks/useFocusToggle.ts\n\n\nfunction useFocusToggle({ trackRef, trackSource, participant, props }) {\n    const p = useEnsureParticipant(participant);\n    if (!trackRef && !trackSource) {\n        throw new Error(\"trackRef or trackSource must be defined.\");\n    }\n    const layoutContext = useMaybeLayoutContext();\n    const { className } = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>(0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.setupFocusToggle)(), []);\n    const inFocus = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>{\n        if (trackRef) {\n            return (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.isTrackReferencePinned)(trackRef, layoutContext == null ? void 0 : layoutContext.pin.state);\n        } else if (trackSource) {\n            const track = p.getTrack(trackSource);\n            if ((layoutContext == null ? void 0 : layoutContext.pin.state) && track) {\n                return (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.isTrackReferencePinned)({\n                    participant: p,\n                    source: trackSource,\n                    publication: track\n                }, layoutContext.pin.state);\n            } else {\n                return false;\n            }\n        } else {\n            throw new Error(\"trackRef or trackSource and participant must be defined.\");\n        }\n    }, [\n        trackRef,\n        layoutContext == null ? void 0 : layoutContext.pin.state,\n        p,\n        trackSource\n    ]);\n    const mergedProps = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>mergeProps(props, {\n            className,\n            onClick: (event)=>{\n                var _a, _b, _c, _d, _e;\n                (_a = props.onClick) == null ? void 0 : _a.call(props, event);\n                if (trackRef) {\n                    if (inFocus) {\n                        (_c = layoutContext == null ? void 0 : (_b = layoutContext.pin).dispatch) == null ? void 0 : _c.call(_b, {\n                            msg: \"clear_pin\"\n                        });\n                    } else {\n                        (_e = layoutContext == null ? void 0 : (_d = layoutContext.pin).dispatch) == null ? void 0 : _e.call(_d, {\n                            msg: \"set_pin\",\n                            trackReference: trackRef\n                        });\n                    }\n                } else if (trackSource) {\n                    const track = p.getTrack(trackSource);\n                    if ((layoutContext == null ? void 0 : layoutContext.pin.dispatch) && track) {\n                        if (inFocus) {\n                            layoutContext.pin.dispatch({\n                                msg: \"clear_pin\"\n                            });\n                        } else {\n                            layoutContext.pin.dispatch({\n                                msg: \"set_pin\",\n                                trackReference: {\n                                    participant: p,\n                                    publication: track,\n                                    source: track.source\n                                }\n                            });\n                        }\n                    }\n                }\n            }\n        }), [\n        props,\n        className,\n        trackRef,\n        trackSource,\n        inFocus,\n        layoutContext == null ? void 0 : layoutContext.pin,\n        p\n    ]);\n    return {\n        mergedProps,\n        inFocus\n    };\n}\n// src/hooks/useGridLayout.ts\n\n\nfunction useGridLayout(gridElement, trackCount) {\n    const { width, height } = useSize(gridElement);\n    const layout = width > 0 && height > 0 ? (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.selectGridLayout)(_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.GRID_LAYOUTS, trackCount, width, height) : _livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.GRID_LAYOUTS[0];\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        if (gridElement.current && layout) {\n            gridElement.current.style.setProperty(\"--lk-col-count\", layout == null ? void 0 : layout.columns.toString());\n            gridElement.current.style.setProperty(\"--lk-row-count\", layout == null ? void 0 : layout.rows.toString());\n        }\n    }, [\n        gridElement,\n        layout\n    ]);\n    return {\n        layout\n    };\n}\n// src/hooks/useIsMuted.ts\n\n\nfunction useIsMuted(sourceOrTrackRef, options = {}) {\n    var _a, _b;\n    const passedParticipant = typeof sourceOrTrackRef === \"string\" ? options.participant : sourceOrTrackRef.participant;\n    const p = useEnsureParticipant(passedParticipant);\n    const ref = typeof sourceOrTrackRef === \"string\" ? {\n        participant: p,\n        source: sourceOrTrackRef\n    } : sourceOrTrackRef;\n    const [isMuted, setIsMuted] = react__WEBPACK_IMPORTED_MODULE_0__.useState(!!(((_a = ref.publication) == null ? void 0 : _a.isMuted) || ((_b = p.getTrack(ref.source)) == null ? void 0 : _b.isMuted)));\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        const listener = (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.mutedObserver)(ref).subscribe(setIsMuted);\n        return ()=>listener.unsubscribe();\n    }, [\n        (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.getTrackReferenceId)(ref)\n    ]);\n    return isMuted;\n}\n// src/hooks/useIsSpeaking.ts\n\n\nfunction useIsSpeaking(participant) {\n    const p = useEnsureParticipant(participant);\n    const observable = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>(0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.createIsSpeakingObserver)(p), [\n        p\n    ]);\n    const isSpeaking = useObservableState(observable, p.isSpeaking);\n    return isSpeaking;\n}\n// src/hooks/useLiveKitRoom.ts\n\n\n\nvar defaultRoomProps = {\n    connect: true,\n    audio: false,\n    video: false\n};\nfunction useLiveKitRoom(props) {\n    const _a = __spreadValues(__spreadValues({}, defaultRoomProps), props), { token, serverUrl, options, room: passedRoom, connectOptions, connect, audio, video, screen, onConnected, onDisconnected, onError, onMediaDeviceFailure, onEncryptionError, simulateParticipants } = _a, rest = __objRest(_a, [\n        \"token\",\n        \"serverUrl\",\n        \"options\",\n        \"room\",\n        \"connectOptions\",\n        \"connect\",\n        \"audio\",\n        \"video\",\n        \"screen\",\n        \"onConnected\",\n        \"onDisconnected\",\n        \"onError\",\n        \"onMediaDeviceFailure\",\n        \"onEncryptionError\",\n        \"simulateParticipants\"\n    ]);\n    if (options && passedRoom) {\n        _livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.log.warn(\"when using a manually created room, the options object will be ignored. set the desired options directly when creating the room instead.\");\n    }\n    const [room, setRoom] = react__WEBPACK_IMPORTED_MODULE_0__.useState();\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        setRoom(passedRoom != null ? passedRoom : new livekit_client__WEBPACK_IMPORTED_MODULE_4__.Room(options));\n    }, [\n        passedRoom\n    ]);\n    const htmlProps = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>{\n        const { className } = (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.setupLiveKitRoom)();\n        return mergeProps(rest, {\n            className\n        });\n    }, [\n        rest\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        if (!room) return;\n        const onSignalConnected = ()=>{\n            const localP = room.localParticipant;\n            _livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.log.debug(\"trying to publish local tracks\");\n            Promise.all([\n                localP.setMicrophoneEnabled(!!audio, typeof audio !== \"boolean\" ? audio : void 0),\n                localP.setCameraEnabled(!!video, typeof video !== \"boolean\" ? video : void 0),\n                localP.setScreenShareEnabled(!!screen, typeof screen !== \"boolean\" ? screen : void 0)\n            ]).catch((e)=>{\n                _livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.log.warn(e);\n                onError == null ? void 0 : onError(e);\n            });\n        };\n        const handleMediaDeviceError = (e)=>{\n            const mediaDeviceFailure = livekit_client__WEBPACK_IMPORTED_MODULE_4__.MediaDeviceFailure.getFailure(e);\n            onMediaDeviceFailure == null ? void 0 : onMediaDeviceFailure(mediaDeviceFailure);\n        };\n        const handleEncryptionError = (e)=>{\n            onEncryptionError == null ? void 0 : onEncryptionError(e);\n        };\n        room.on(livekit_client__WEBPACK_IMPORTED_MODULE_4__.RoomEvent.SignalConnected, onSignalConnected).on(livekit_client__WEBPACK_IMPORTED_MODULE_4__.RoomEvent.MediaDevicesError, handleMediaDeviceError).on(livekit_client__WEBPACK_IMPORTED_MODULE_4__.RoomEvent.EncryptionError, handleEncryptionError);\n        return ()=>{\n            room.off(livekit_client__WEBPACK_IMPORTED_MODULE_4__.RoomEvent.SignalConnected, onSignalConnected).off(livekit_client__WEBPACK_IMPORTED_MODULE_4__.RoomEvent.MediaDevicesError, handleMediaDeviceError).off(livekit_client__WEBPACK_IMPORTED_MODULE_4__.RoomEvent.EncryptionError, handleEncryptionError);\n        };\n    }, [\n        room,\n        audio,\n        video,\n        screen,\n        onError,\n        onEncryptionError,\n        onMediaDeviceFailure\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        if (!room) return;\n        if (simulateParticipants) {\n            room.simulateParticipants({\n                participants: {\n                    count: simulateParticipants\n                },\n                publish: {\n                    audio: true,\n                    useRealTracks: true\n                }\n            });\n            return;\n        }\n        if (!token) {\n            _livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.log.debug(\"no token yet\");\n            return;\n        }\n        if (!serverUrl) {\n            _livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.log.warn(\"no livekit url provided\");\n            onError == null ? void 0 : onError(Error(\"no livekit url provided\"));\n            return;\n        }\n        if (connect) {\n            _livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.log.debug(\"connecting\");\n            room.connect(serverUrl, token, connectOptions).catch((e)=>{\n                _livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.log.warn(e);\n                onError == null ? void 0 : onError(e);\n            });\n        } else {\n            _livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.log.debug(\"disconnecting because connect is false\");\n            room.disconnect();\n        }\n    }, [\n        connect,\n        token,\n        JSON.stringify(connectOptions),\n        room,\n        onError,\n        serverUrl,\n        simulateParticipants\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        if (!room) return;\n        const connectionStateChangeListener = (state)=>{\n            switch(state){\n                case livekit_client__WEBPACK_IMPORTED_MODULE_4__.ConnectionState.Disconnected:\n                    if (onDisconnected) onDisconnected();\n                    break;\n                case livekit_client__WEBPACK_IMPORTED_MODULE_4__.ConnectionState.Connected:\n                    if (onConnected) onConnected();\n                    break;\n                default:\n                    break;\n            }\n        };\n        room.on(livekit_client__WEBPACK_IMPORTED_MODULE_4__.RoomEvent.ConnectionStateChanged, connectionStateChangeListener);\n        return ()=>{\n            room.off(livekit_client__WEBPACK_IMPORTED_MODULE_4__.RoomEvent.ConnectionStateChanged, connectionStateChangeListener);\n        };\n    }, [\n        token,\n        onConnected,\n        onDisconnected,\n        room\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        if (!room) return;\n        return ()=>{\n            _livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.log.info(\"disconnecting on onmount\");\n            room.disconnect();\n        };\n    }, [\n        room\n    ]);\n    return {\n        room,\n        htmlProps\n    };\n}\n// src/hooks/useLocalParticipant.ts\n\n\nfunction useLocalParticipant(options = {}) {\n    const room = useEnsureRoom(options.room);\n    const [localParticipant, setLocalParticipant] = react__WEBPACK_IMPORTED_MODULE_0__.useState(room.localParticipant);\n    const [isMicrophoneEnabled, setIsMicrophoneEnabled] = react__WEBPACK_IMPORTED_MODULE_0__.useState(localParticipant.isMicrophoneEnabled);\n    const [isCameraEnabled, setIsCameraEnabled] = react__WEBPACK_IMPORTED_MODULE_0__.useState(localParticipant.isMicrophoneEnabled);\n    const [lastMicrophoneError, setLastMicrophoneError] = react__WEBPACK_IMPORTED_MODULE_0__.useState(localParticipant.lastMicrophoneError);\n    const [lastCameraError, setLastCameraError] = react__WEBPACK_IMPORTED_MODULE_0__.useState(localParticipant.lastCameraError);\n    const [isScreenShareEnabled, setIsScreenShareEnabled] = react__WEBPACK_IMPORTED_MODULE_0__.useState(localParticipant.isMicrophoneEnabled);\n    const [microphoneTrack, setMicrophoneTrack] = react__WEBPACK_IMPORTED_MODULE_0__.useState(void 0);\n    const [cameraTrack, setCameraTrack] = react__WEBPACK_IMPORTED_MODULE_0__.useState(void 0);\n    const handleUpdate = (media)=>{\n        setIsCameraEnabled(media.isCameraEnabled);\n        setIsMicrophoneEnabled(media.isMicrophoneEnabled);\n        setIsScreenShareEnabled(media.isScreenShareEnabled);\n        setCameraTrack(media.cameraTrack);\n        setMicrophoneTrack(media.microphoneTrack);\n        setLastMicrophoneError(media.participant.lastMicrophoneError);\n        setLastCameraError(media.participant.lastCameraError);\n        setLocalParticipant(media.participant);\n    };\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        const listener = (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.observeParticipantMedia)(room.localParticipant).subscribe(handleUpdate);\n        return ()=>listener.unsubscribe();\n    }, [\n        room\n    ]);\n    return {\n        isMicrophoneEnabled,\n        isScreenShareEnabled,\n        isCameraEnabled,\n        microphoneTrack,\n        cameraTrack,\n        lastMicrophoneError,\n        lastCameraError,\n        localParticipant\n    };\n}\n// src/hooks/useLocalParticipantPermissions.ts\n\n\nfunction useLocalParticipantPermissions() {\n    const room = useRoomContext();\n    const permissionObserver = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>(0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.participantPermissionObserver)(room.localParticipant), [\n        room\n    ]);\n    const permissions = useObservableState(permissionObserver, room.localParticipant.permissions);\n    return permissions;\n}\n// src/hooks/useMediaDeviceSelect.ts\n\n\nfunction useMediaDeviceSelect({ kind, room, track, requestPermissions, onError }) {\n    const roomContext = useMaybeRoomContext();\n    const deviceObserver = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>(0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.createMediaDeviceObserver)(kind, onError, requestPermissions), [\n        kind,\n        requestPermissions,\n        onError\n    ]);\n    const devices = useObservableState(deviceObserver, []);\n    const [currentDeviceId, setCurrentDeviceId] = react__WEBPACK_IMPORTED_MODULE_0__.useState(\"\");\n    const { className, activeDeviceObservable, setActiveMediaDevice } = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>(0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.setupDeviceSelector)(kind, room != null ? room : roomContext, track), [\n        kind,\n        room,\n        roomContext,\n        track\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        const listener = activeDeviceObservable.subscribe((deviceId)=>{\n            _livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.log.info(\"setCurrentDeviceId\", deviceId);\n            if (deviceId) setCurrentDeviceId(deviceId);\n        });\n        return ()=>{\n            listener == null ? void 0 : listener.unsubscribe();\n        };\n    }, [\n        activeDeviceObservable\n    ]);\n    return {\n        devices,\n        className,\n        activeDeviceId: currentDeviceId,\n        setActiveMediaDevice\n    };\n}\n// src/hooks/useMediaDevices.ts\n\n\nfunction useMediaDevices({ kind }) {\n    const deviceObserver = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>(0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.createMediaDeviceObserver)(kind), [\n        kind\n    ]);\n    const devices = useObservableState(deviceObserver, []);\n    return devices;\n}\n// src/hooks/useMediaTrackBySourceOrName.ts\n\n\n\n// src/utils.ts\n\n\nfunction isProp(prop) {\n    return prop !== void 0;\n}\nfunction mergeProps2(...props) {\n    return mergeProps(...props.filter(isProp));\n}\nfunction cloneSingleChild(children, props, key) {\n    return react__WEBPACK_IMPORTED_MODULE_0__.Children.map(children, (child)=>{\n        if (/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.isValidElement(child) && react__WEBPACK_IMPORTED_MODULE_0__.Children.only(children)) {\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.cloneElement(child, __spreadProps(__spreadValues({}, props), {\n                key\n            }));\n        }\n        return child;\n    });\n}\nfunction warnAboutMissingStyles(el) {\n    var _a, _b;\n    if (// eslint-disable-next-line turbo/no-undeclared-env-vars\n    (((_a = process == null ? void 0 : process.env) == null ? void 0 : _a.NODE_ENV) === \"dev\" || ((_b = process == null ? void 0 : process.env) == null ? void 0 : _b.NODE_ENV) === \"development\") && \"undefined\" !== \"undefined\") {}\n}\n// src/hooks/useMediaTrackBySourceOrName.ts\nfunction useMediaTrackBySourceOrName(observerOptions, options = {}) {\n    var _a;\n    const [publication, setPublication] = react__WEBPACK_IMPORTED_MODULE_0__.useState((0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.getTrackByIdentifier)(observerOptions));\n    const [isMuted, setMuted] = react__WEBPACK_IMPORTED_MODULE_0__.useState(publication == null ? void 0 : publication.isMuted);\n    const [isSubscribed, setSubscribed] = react__WEBPACK_IMPORTED_MODULE_0__.useState(publication == null ? void 0 : publication.isSubscribed);\n    const [track, setTrack] = react__WEBPACK_IMPORTED_MODULE_0__.useState(publication == null ? void 0 : publication.track);\n    const [orientation, setOrientation] = react__WEBPACK_IMPORTED_MODULE_0__.useState(\"landscape\");\n    const previousElement = react__WEBPACK_IMPORTED_MODULE_0__.useRef();\n    const { className, trackObserver } = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>{\n        return (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.setupMediaTrack)(observerOptions);\n    }, [\n        (_a = observerOptions.participant.sid) != null ? _a : observerOptions.participant.identity,\n        observerOptions.source,\n        (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.isTrackReference)(observerOptions) && observerOptions.publication.trackSid\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        const subscription = trackObserver.subscribe((publication2)=>{\n            _livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.log.debug(\"update track\", publication2);\n            setPublication(publication2);\n            setMuted(publication2 == null ? void 0 : publication2.isMuted);\n            setSubscribed(publication2 == null ? void 0 : publication2.isSubscribed);\n            setTrack(publication2 == null ? void 0 : publication2.track);\n        });\n        return ()=>subscription == null ? void 0 : subscription.unsubscribe();\n    }, [\n        trackObserver\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        var _a2, _b;\n        if (track) {\n            if (previousElement.current) {\n                track.detach(previousElement.current);\n            }\n            if (((_a2 = options.element) == null ? void 0 : _a2.current) && !((0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.isLocal)(observerOptions.participant) && (track == null ? void 0 : track.kind) === \"audio\")) {\n                track.attach(options.element.current);\n            }\n        }\n        previousElement.current = (_b = options.element) == null ? void 0 : _b.current;\n        return ()=>{\n            if (previousElement.current) {\n                track == null ? void 0 : track.detach(previousElement.current);\n            }\n        };\n    }, [\n        track,\n        options.element\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        var _a2, _b;\n        if (typeof ((_a2 = publication == null ? void 0 : publication.dimensions) == null ? void 0 : _a2.width) === \"number\" && typeof ((_b = publication == null ? void 0 : publication.dimensions) == null ? void 0 : _b.height) === \"number\") {\n            const orientation_ = publication.dimensions.width > publication.dimensions.height ? \"landscape\" : \"portrait\";\n            setOrientation(orientation_);\n        }\n    }, [\n        publication\n    ]);\n    return {\n        publication,\n        isMuted,\n        isSubscribed,\n        track,\n        elementProps: mergeProps2(options.props, __spreadValues({\n            className,\n            \"data-lk-local-participant\": observerOptions.participant.isLocal,\n            \"data-lk-source\": publication == null ? void 0 : publication.source\n        }, (publication == null ? void 0 : publication.kind) === \"video\" && {\n            \"data-lk-orientation\": orientation\n        }))\n    };\n}\n// src/hooks/useMediaTrack.ts\nfunction useMediaTrack(source, participant, options = {}) {\n    const p = useEnsureParticipant(participant);\n    return useMediaTrackBySourceOrName({\n        source,\n        participant: p\n    }, options);\n}\n// src/hooks/useMediaTrackByName.ts\nfunction useMediaTrackByName(name, participant, options = {}) {\n    const p = useEnsureParticipant(participant);\n    return useMediaTrackBySourceOrName({\n        name,\n        participant: p\n    }, options);\n}\n// src/hooks/usePagination.ts\n\n// src/hooks/useVisualStableUpdate.ts\n\n\nfunction useVisualStableUpdate(trackReferences, maxItemsOnPage, options = {}) {\n    const lastTrackRefs = react__WEBPACK_IMPORTED_MODULE_0__.useRef([]);\n    const lastMaxItemsOnPage = react__WEBPACK_IMPORTED_MODULE_0__.useRef(-1);\n    const layoutChanged = maxItemsOnPage !== lastMaxItemsOnPage.current;\n    const sortedTrackRefs = typeof options.customSortFunction === \"function\" ? options.customSortFunction(trackReferences) : (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.sortTrackReferences)(trackReferences);\n    let updatedTrackRefs = [\n        ...sortedTrackRefs\n    ];\n    if (layoutChanged === false) {\n        try {\n            updatedTrackRefs = (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.updatePages)(lastTrackRefs.current, sortedTrackRefs, maxItemsOnPage);\n        } catch (error) {\n            _livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.log.error(\"Error while running updatePages(): \", error);\n        }\n    }\n    if (layoutChanged) {\n        lastTrackRefs.current = sortedTrackRefs;\n    } else {\n        lastTrackRefs.current = updatedTrackRefs;\n    }\n    lastMaxItemsOnPage.current = maxItemsOnPage;\n    return updatedTrackRefs;\n}\n// src/hooks/usePagination.ts\nfunction usePagination(itemPerPage, trackReferences) {\n    const [currentPage, setCurrentPage] = react__WEBPACK_IMPORTED_MODULE_0__.useState(1);\n    const totalPageCount = Math.max(Math.ceil(trackReferences.length / itemPerPage), 1);\n    if (currentPage > totalPageCount) {\n        setCurrentPage(totalPageCount);\n    }\n    const lastItemIndex = currentPage * itemPerPage;\n    const firstItemIndex = lastItemIndex - itemPerPage;\n    const changePage = (direction)=>{\n        setCurrentPage((state)=>{\n            if (direction === \"next\") {\n                if (state === totalPageCount) {\n                    return state;\n                }\n                return state + 1;\n            } else {\n                if (state === 1) {\n                    return state;\n                }\n                return state - 1;\n            }\n        });\n    };\n    const goToPage = (num)=>{\n        if (num > totalPageCount) {\n            setCurrentPage(totalPageCount);\n        } else if (num < 1) {\n            setCurrentPage(1);\n        } else {\n            setCurrentPage(num);\n        }\n    };\n    const updatedTrackReferences = useVisualStableUpdate(trackReferences, itemPerPage);\n    const tracksOnPage = updatedTrackReferences.slice(firstItemIndex, lastItemIndex);\n    return {\n        totalPageCount,\n        nextPage: ()=>changePage(\"next\"),\n        prevPage: ()=>changePage(\"previous\"),\n        setPage: goToPage,\n        firstItemIndex,\n        lastItemIndex,\n        tracks: tracksOnPage,\n        currentPage\n    };\n}\n// src/hooks/useParticipantInfo.ts\n\n\nfunction useParticipantInfo(props = {}) {\n    const p = useEnsureParticipant(props.participant);\n    const infoObserver = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>(0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.participantInfoObserver)(p), [\n        p\n    ]);\n    const { identity, name, metadata } = useObservableState(infoObserver, {\n        name: p.name,\n        identity: p.identity,\n        metadata: p.metadata\n    });\n    return {\n        identity,\n        name,\n        metadata\n    };\n}\n// src/hooks/useParticipantPermissions.ts\n\n\nfunction useParticipantPermissions(options = {}) {\n    const p = useEnsureParticipant(options.participant);\n    const permissionObserver = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>(0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.participantPermissionObserver)(p), [\n        p\n    ]);\n    const permissions = useObservableState(permissionObserver, p.permissions);\n    return permissions;\n}\n// src/hooks/useParticipantTile.ts\n\n\n\nfunction useParticipantTile({ trackRef, participant, source, publication, onParticipantClick, disableSpeakingIndicator, htmlProps }) {\n    const maybeTrackRef = useMaybeTrackRefContext();\n    const p = useEnsureParticipant(participant);\n    const trackReference = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>{\n        var _a, _b, _c, _d, _e, _f;\n        const _source = (_b = (_a = trackRef == null ? void 0 : trackRef.source) != null ? _a : maybeTrackRef == null ? void 0 : maybeTrackRef.source) != null ? _b : source;\n        if (_source === void 0) {\n            throw new Error(\"Missing track `source`, provided it via `trackRef`, `source` property or via `TrackRefContext`.\");\n        }\n        return {\n            participant: (_d = (_c = trackRef == null ? void 0 : trackRef.participant) != null ? _c : maybeTrackRef == null ? void 0 : maybeTrackRef.participant) != null ? _d : p,\n            publication: (_f = (_e = trackRef == null ? void 0 : trackRef.publication) != null ? _e : maybeTrackRef == null ? void 0 : maybeTrackRef.publication) != null ? _f : publication,\n            source: _source\n        };\n    }, [\n        trackRef == null ? void 0 : trackRef.participant,\n        trackRef == null ? void 0 : trackRef.source,\n        trackRef == null ? void 0 : trackRef.publication,\n        maybeTrackRef == null ? void 0 : maybeTrackRef.participant,\n        maybeTrackRef == null ? void 0 : maybeTrackRef.source,\n        maybeTrackRef == null ? void 0 : maybeTrackRef.publication,\n        p,\n        source,\n        publication\n    ]);\n    const mergedProps = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>{\n        const { className } = (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.setupParticipantTile)();\n        return mergeProps(htmlProps, {\n            className,\n            onClick: (event)=>{\n                var _a, _b;\n                (_a = htmlProps.onClick) == null ? void 0 : _a.call(htmlProps, event);\n                if (typeof onParticipantClick === \"function\") {\n                    const track = (_b = trackReference.publication) != null ? _b : trackReference.participant.getTrack(trackReference.source);\n                    onParticipantClick({\n                        participant: trackReference.participant,\n                        track\n                    });\n                }\n            }\n        });\n    }, [\n        htmlProps,\n        onParticipantClick,\n        trackReference.publication,\n        trackReference.source,\n        trackReference.participant\n    ]);\n    const isVideoMuted = useIsMuted(livekit_client__WEBPACK_IMPORTED_MODULE_4__.Track.Source.Camera, {\n        participant: trackReference.participant\n    });\n    const isAudioMuted = useIsMuted(livekit_client__WEBPACK_IMPORTED_MODULE_4__.Track.Source.Microphone, {\n        participant: trackReference.participant\n    });\n    const isSpeaking = useIsSpeaking(trackReference.participant);\n    const facingMode = useFacingMode(trackReference);\n    return {\n        elementProps: __spreadValues({\n            \"data-lk-audio-muted\": isAudioMuted,\n            \"data-lk-video-muted\": isVideoMuted,\n            \"data-lk-speaking\": disableSpeakingIndicator === true ? false : isSpeaking,\n            \"data-lk-local-participant\": trackReference.participant.isLocal,\n            \"data-lk-source\": trackReference.source,\n            \"data-lk-facing-mode\": facingMode\n        }, mergedProps)\n    };\n}\n// src/hooks/useRemoteParticipants.ts\n\n\nfunction useRemoteParticipants(options = {}) {\n    const room = useEnsureRoom(options.room);\n    const [participants, setParticipants] = react__WEBPACK_IMPORTED_MODULE_0__.useState([]);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        const listener = (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.connectedParticipantsObserver)(room, {\n            additionalRoomEvents: options.updateOnlyOn\n        }).subscribe(setParticipants);\n        return ()=>listener.unsubscribe();\n    }, [\n        room,\n        JSON.stringify(options.updateOnlyOn)\n    ]);\n    return participants;\n}\n// src/hooks/useParticipants.ts\nfunction useParticipants(options = {}) {\n    const remoteParticipants = useRemoteParticipants(options);\n    const { localParticipant } = useLocalParticipant(options);\n    return [\n        localParticipant,\n        ...remoteParticipants\n    ];\n}\n// src/hooks/usePinnedTracks.ts\n\nfunction usePinnedTracks(layoutContext) {\n    layoutContext = useEnsureLayoutContext(layoutContext);\n    return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>{\n        if ((layoutContext == null ? void 0 : layoutContext.pin.state) !== void 0 && layoutContext.pin.state.length >= 1) {\n            return layoutContext.pin.state;\n        }\n        return [];\n    }, [\n        layoutContext.pin.state\n    ]);\n}\n// src/hooks/useRemoteParticipant.ts\n\n\nfunction useRemoteParticipant(identity, options = {}) {\n    const room = useRoomContext();\n    const [updateOnlyOn] = react__WEBPACK_IMPORTED_MODULE_0__.useState(options.updateOnlyOn);\n    const observable = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>(0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.connectedParticipantObserver)(room, identity, {\n            additionalEvents: updateOnlyOn\n        }), [\n        room,\n        identity,\n        updateOnlyOn\n    ]);\n    const participant = useObservableState(observable, room.getParticipantByIdentity(identity));\n    return participant;\n}\n// src/hooks/useRoomInfo.ts\n\n\nfunction useRoomInfo(options = {}) {\n    const room = useEnsureRoom(options.room);\n    const infoObserver = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>(0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.roomInfoObserver)(room), [\n        room\n    ]);\n    const { name, metadata } = useObservableState(infoObserver, {\n        name: room.name,\n        metadata: room.metadata\n    });\n    return {\n        name,\n        metadata\n    };\n}\n// src/hooks/useSortedParticipants.ts\n\n\n// src/hooks/useSpeakingParticipants.ts\n\n\nfunction useSpeakingParticipants() {\n    const room = useRoomContext();\n    const speakerObserver = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>(0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.activeSpeakerObserver)(room), [\n        room\n    ]);\n    const activeSpeakers = useObservableState(speakerObserver, room.activeSpeakers);\n    return activeSpeakers;\n}\n// src/hooks/useSortedParticipants.ts\nfunction useSortedParticipants(participants) {\n    const [sortedParticipants, setSortedParticipants] = react__WEBPACK_IMPORTED_MODULE_0__.useState((0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.sortParticipants)(participants));\n    const activeSpeakers = useSpeakingParticipants();\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        setSortedParticipants((0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.sortParticipants)(participants));\n    }, [\n        activeSpeakers,\n        participants\n    ]);\n    return sortedParticipants;\n}\n// src/hooks/useStartAudio.ts\n\n\nfunction useStartAudio({ room, props }) {\n    const roomEnsured = useEnsureRoom(room);\n    const { className, roomAudioPlaybackAllowedObservable: roomAudioPlaybackAllowedObservable2, handleStartAudioPlayback } = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>(0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.setupStartAudio)(), []);\n    const observable = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>roomAudioPlaybackAllowedObservable2(roomEnsured), [\n        roomEnsured,\n        roomAudioPlaybackAllowedObservable2\n    ]);\n    const { canPlayAudio } = useObservableState(observable, {\n        canPlayAudio: roomEnsured.canPlaybackAudio\n    });\n    const mergedProps = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>mergeProps(props, {\n            className,\n            onClick: ()=>{\n                handleStartAudioPlayback(roomEnsured);\n            },\n            style: {\n                display: canPlayAudio ? \"none\" : \"block\"\n            }\n        }), [\n        props,\n        className,\n        canPlayAudio,\n        handleStartAudioPlayback,\n        roomEnsured\n    ]);\n    return {\n        mergedProps,\n        canPlayAudio\n    };\n}\n// src/hooks/useStartVideo.ts\n\n\nfunction useStartVideo({ room, props }) {\n    const roomEnsured = useEnsureRoom(room);\n    const { className, roomVideoPlaybackAllowedObservable, handleStartVideoPlayback } = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>(0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.setupStartVideo)(), []);\n    const observable = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>roomVideoPlaybackAllowedObservable(roomEnsured), [\n        roomEnsured,\n        roomVideoPlaybackAllowedObservable\n    ]);\n    const { canPlayVideo } = useObservableState(observable, {\n        canPlayVideo: roomEnsured.canPlaybackVideo\n    });\n    const mergedProps = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>mergeProps(props, {\n            className,\n            onClick: ()=>{\n                handleStartVideoPlayback(roomEnsured);\n            },\n            style: {\n                display: canPlayVideo ? \"none\" : \"block\"\n            }\n        }), [\n        props,\n        className,\n        canPlayVideo,\n        handleStartVideoPlayback,\n        roomEnsured\n    ]);\n    return {\n        mergedProps,\n        canPlayVideo\n    };\n}\n// src/hooks/useSwipe.ts\n\nfunction useSwipe(element, options = {}) {\n    var _a;\n    const touchStart = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n    const touchEnd = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n    const minSwipeDistance = (_a = options.minSwipeDistance) != null ? _a : 50;\n    const onTouchStart = (event)=>{\n        touchEnd.current = null;\n        touchStart.current = event.targetTouches[0].clientX;\n    };\n    const onTouchMove = (event)=>{\n        touchEnd.current = event.targetTouches[0].clientX;\n    };\n    const onTouchEnd = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(()=>{\n        if (!touchStart.current || !touchEnd.current) {\n            return;\n        }\n        const distance = touchStart.current - touchEnd.current;\n        const isLeftSwipe = distance > minSwipeDistance;\n        const isRightSwipe = distance < -minSwipeDistance;\n        if (isLeftSwipe && options.onLeftSwipe) options.onLeftSwipe();\n        if (isRightSwipe && options.onRightSwipe) options.onRightSwipe();\n    }, [\n        minSwipeDistance,\n        options\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        const elementCopy = element.current;\n        if (elementCopy) {\n            elementCopy.addEventListener(\"touchstart\", onTouchStart, {\n                passive: true\n            });\n            elementCopy.addEventListener(\"touchmove\", onTouchMove, {\n                passive: true\n            });\n            elementCopy.addEventListener(\"touchend\", onTouchEnd, {\n                passive: true\n            });\n        }\n        return ()=>{\n            if (elementCopy) {\n                elementCopy.removeEventListener(\"touchstart\", onTouchStart);\n                elementCopy.removeEventListener(\"touchmove\", onTouchMove);\n                elementCopy.removeEventListener(\"touchend\", onTouchEnd);\n            }\n        };\n    }, [\n        element,\n        onTouchEnd\n    ]);\n}\n// src/hooks/useChatToggle.ts\n\n\nfunction useChatToggle({ props }) {\n    const { dispatch, state } = useLayoutContext().widget;\n    const { className } = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>(0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.setupChatToggle)(), []);\n    const mergedProps = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>{\n        return mergeProps(props, {\n            className,\n            onClick: ()=>{\n                if (dispatch) dispatch({\n                    msg: \"toggle_chat\"\n                });\n            },\n            \"aria-pressed\": (state == null ? void 0 : state.showChat) ? \"true\" : \"false\",\n            \"data-lk-unread-msgs\": state ? state.unreadMessages < 10 ? state.unreadMessages.toFixed(0) : \"9+\" : \"0\"\n        });\n    }, [\n        props,\n        className,\n        dispatch,\n        state\n    ]);\n    return {\n        mergedProps\n    };\n}\n// src/hooks/useToken.ts\n\n\nfunction useToken(tokenEndpoint, roomName, options = {}) {\n    const [token, setToken] = react__WEBPACK_IMPORTED_MODULE_0__.useState(void 0);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        var _a;\n        if (tokenEndpoint === void 0) {\n            throw Error(\"token endpoint needs to be defined\");\n        }\n        if (((_a = options.userInfo) == null ? void 0 : _a.identity) === void 0) {\n            return;\n        }\n        const tokenFetcher = ()=>__async(this, null, function*() {\n                _livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.log.debug(\"fetching token\");\n                const params = new URLSearchParams(__spreadProps(__spreadValues({}, options.userInfo), {\n                    roomName\n                }));\n                const res = yield fetch(`${tokenEndpoint}?${params.toString()}`);\n                if (!res.ok) {\n                    _livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.log.error(`Could not fetch token. Server responded with status ${res.status}: ${res.statusText}`);\n                    return;\n                }\n                const { accessToken } = yield res.json();\n                setToken(accessToken);\n            });\n        tokenFetcher();\n    }, [\n        tokenEndpoint,\n        roomName,\n        JSON.stringify(options)\n    ]);\n    return token;\n}\n// src/hooks/useTrackMutedIndicator.ts\n\n\nfunction useTrackMutedIndicator(trackRefOrSource, options = {}) {\n    var _a, _b, _c, _d;\n    let ref = useMaybeTrackRefContext();\n    const p = (_b = (_a = useMaybeParticipantContext()) != null ? _a : options.participant) != null ? _b : ref == null ? void 0 : ref.participant;\n    if (typeof trackRefOrSource === \"string\") {\n        if (!p) {\n            throw Error(`Participant missing, either provide it via context or pass it in directly`);\n        }\n        ref = {\n            participant: p,\n            source: trackRefOrSource\n        };\n    } else if (trackRefOrSource) {\n        ref = trackRefOrSource;\n    } else {\n        throw Error(`No track reference found, either provide it via context or pass it in directly`);\n    }\n    const { className, mediaMutedObserver } = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>(0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.setupTrackMutedIndicator)(ref), [\n        (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.getTrackReferenceId)(ref)\n    ]);\n    const isMuted = useObservableState(mediaMutedObserver, !!(((_c = ref.publication) == null ? void 0 : _c.isMuted) || ((_d = ref.participant.getTrack(ref.source)) == null ? void 0 : _d.isMuted)));\n    return {\n        isMuted,\n        className\n    };\n}\n// src/hooks/useTrackToggle.ts\n\n\nfunction useTrackToggle(_a) {\n    var _b = _a, { source, onChange, initialState, captureOptions } = _b, rest = __objRest(_b, [\n        \"source\",\n        \"onChange\",\n        \"initialState\",\n        \"captureOptions\"\n    ]);\n    var _a2;\n    const room = useMaybeRoomContext();\n    const track = (_a2 = room == null ? void 0 : room.localParticipant) == null ? void 0 : _a2.getTrack(source);\n    const userInteractionRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(false);\n    const { toggle, className, pendingObserver, enabledObserver } = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>room ? (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.setupMediaToggle)(source, room, captureOptions) : (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.setupManualToggle)(), [\n        room,\n        source,\n        JSON.stringify(captureOptions)\n    ]);\n    const pending = useObservableState(pendingObserver, false);\n    const enabled = useObservableState(enabledObserver, initialState != null ? initialState : !!(track == null ? void 0 : track.isEnabled));\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        onChange == null ? void 0 : onChange(enabled, userInteractionRef.current);\n        userInteractionRef.current = false;\n    }, [\n        enabled,\n        onChange\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        if (initialState !== void 0) {\n            _livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.log.debug(\"forcing initial toggle state\", source, initialState);\n            toggle(initialState);\n        }\n    }, []);\n    const newProps = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>mergeProps(rest, {\n            className\n        }), [\n        rest,\n        className\n    ]);\n    const clickHandler = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((evt)=>{\n        var _a3;\n        userInteractionRef.current = true;\n        toggle().finally(()=>userInteractionRef.current = false);\n        (_a3 = rest.onClick) == null ? void 0 : _a3.call(rest, evt);\n    }, [\n        rest,\n        toggle\n    ]);\n    return {\n        toggle,\n        enabled,\n        pending,\n        track,\n        buttonProps: __spreadProps(__spreadValues({}, newProps), {\n            \"aria-pressed\": enabled,\n            \"data-lk-source\": source,\n            \"data-lk-enabled\": enabled,\n            disabled: pending,\n            onClick: clickHandler\n        })\n    };\n}\n// src/hooks/useTracks.ts\n\n\n\nfunction useTracks(sources = [\n    livekit_client__WEBPACK_IMPORTED_MODULE_4__.Track.Source.Camera,\n    livekit_client__WEBPACK_IMPORTED_MODULE_4__.Track.Source.Microphone,\n    livekit_client__WEBPACK_IMPORTED_MODULE_4__.Track.Source.ScreenShare,\n    livekit_client__WEBPACK_IMPORTED_MODULE_4__.Track.Source.ScreenShareAudio,\n    livekit_client__WEBPACK_IMPORTED_MODULE_4__.Track.Source.Unknown\n], options = {}) {\n    const room = useEnsureRoom(options.room);\n    const [trackReferences, setTrackReferences] = react__WEBPACK_IMPORTED_MODULE_0__.useState([]);\n    const [participants, setParticipants] = react__WEBPACK_IMPORTED_MODULE_0__.useState([]);\n    const sources_ = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>{\n        return sources.map((s)=>(0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.isSourceWitOptions)(s) ? s.source : s);\n    }, [\n        JSON.stringify(sources)\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        const subscription = (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.trackReferencesObservable)(room, sources_, {\n            additionalRoomEvents: options.updateOnlyOn,\n            onlySubscribed: options.onlySubscribed\n        }).subscribe(({ trackReferences: trackReferences2, participants: participants2 })=>{\n            _livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.log.debug(\"setting track bundles\", trackReferences2, participants2);\n            setTrackReferences(trackReferences2);\n            setParticipants(participants2);\n        });\n        return ()=>subscription.unsubscribe();\n    }, [\n        room,\n        JSON.stringify(options.updateOnlyOn),\n        JSON.stringify(sources)\n    ]);\n    const maybeTrackReferences = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>{\n        if ((0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.isSourcesWithOptions)(sources)) {\n            const requirePlaceholder = requiredPlaceholders(sources, participants);\n            const trackReferencesWithPlaceholders = Array.from(trackReferences);\n            participants.forEach((participant)=>{\n                var _a;\n                if (requirePlaceholder.has(participant.identity)) {\n                    const sourcesToAddPlaceholder = (_a = requirePlaceholder.get(participant.identity)) != null ? _a : [];\n                    sourcesToAddPlaceholder.forEach((placeholderSource)=>{\n                        if (trackReferences.find(({ participant: p, publication })=>participant.identity === p.identity && publication.source === placeholderSource)) {\n                            return;\n                        }\n                        _livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.log.debug(`Add ${placeholderSource} placeholder for participant ${participant.identity}.`);\n                        const placeholder = {\n                            participant,\n                            source: placeholderSource\n                        };\n                        trackReferencesWithPlaceholders.push(placeholder);\n                    });\n                }\n            });\n            return trackReferencesWithPlaceholders;\n        } else {\n            return trackReferences;\n        }\n    }, [\n        trackReferences,\n        participants,\n        sources\n    ]);\n    return maybeTrackReferences;\n}\nfunction difference(setA, setB) {\n    const _difference = new Set(setA);\n    for (const elem of setB){\n        _difference.delete(elem);\n    }\n    return _difference;\n}\nfunction requiredPlaceholders(sources, participants) {\n    const placeholderMap = /* @__PURE__ */ new Map();\n    if ((0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.isSourcesWithOptions)(sources)) {\n        const sourcesThatNeedPlaceholder = sources.filter((sourceWithOption)=>sourceWithOption.withPlaceholder).map((sourceWithOption)=>sourceWithOption.source);\n        participants.forEach((participant)=>{\n            const sourcesOfSubscribedTracks = participant.getTracks().map((pub)=>{\n                var _a;\n                return (_a = pub.track) == null ? void 0 : _a.source;\n            }).filter((trackSource)=>trackSource !== void 0);\n            const placeholderNeededForThisParticipant = Array.from(difference(new Set(sourcesThatNeedPlaceholder), new Set(sourcesOfSubscribedTracks)));\n            if (placeholderNeededForThisParticipant.length > 0) {\n                placeholderMap.set(participant.identity, placeholderNeededForThisParticipant);\n            }\n        });\n    }\n    return placeholderMap;\n}\n// src/hooks/useTrack.ts\nfunction useTrack(trackRef, options = {}) {\n    return useMediaTrackBySourceOrName(trackRef, options);\n}\n// src/hooks/useTrackByName.ts\nfunction useTrackByName(trackRef, options = {}) {\n    const ref = useEnsureTrackRef(trackRef);\n    return useMediaTrackBySourceOrName(ref, options);\n}\n// src/hooks/useChat.ts\n\n\nfunction useChat(options) {\n    const room = useRoomContext();\n    const [setup, setSetup] = react__WEBPACK_IMPORTED_MODULE_0__.useState();\n    const isSending = useObservableState(setup == null ? void 0 : setup.isSendingObservable, false);\n    const chatMessages = useObservableState(setup == null ? void 0 : setup.messageObservable, []);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        const setupChatReturn = (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.setupChat)(room, options);\n        setSetup(setupChatReturn);\n    }, [\n        room,\n        options\n    ]);\n    return {\n        send: setup == null ? void 0 : setup.send,\n        update: setup == null ? void 0 : setup.update,\n        chatMessages,\n        isSending\n    };\n}\n// src/hooks/usePersistentUserChoices.ts\n\n\nfunction usePersistentUserChoices(options = {}) {\n    var _a;\n    const [userChoices, setSettings] = react__WEBPACK_IMPORTED_MODULE_0__.useState((0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.loadUserChoices)(options.defaults, (_a = options.preventLoad) != null ? _a : false));\n    const saveAudioInputEnabled = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((isEnabled)=>{\n        setSettings((prev)=>__spreadProps(__spreadValues({}, prev), {\n                audioEnabled: isEnabled\n            }));\n    }, []);\n    const saveVideoInputEnabled = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((isEnabled)=>{\n        setSettings((prev)=>__spreadProps(__spreadValues({}, prev), {\n                videoEnabled: isEnabled\n            }));\n    }, []);\n    const saveAudioInputDeviceId = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((deviceId)=>{\n        setSettings((prev)=>__spreadProps(__spreadValues({}, prev), {\n                audioDeviceId: deviceId\n            }));\n    }, []);\n    const saveVideoInputDeviceId = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((deviceId)=>{\n        setSettings((prev)=>__spreadProps(__spreadValues({}, prev), {\n                videoDeviceId: deviceId\n            }));\n    }, []);\n    const saveUsername = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((username)=>{\n        setSettings((prev)=>__spreadProps(__spreadValues({}, prev), {\n                username\n            }));\n    }, []);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        var _a2;\n        (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.saveUserChoices)(userChoices, (_a2 = options.preventSave) != null ? _a2 : false);\n    }, [\n        userChoices,\n        options.preventSave\n    ]);\n    return {\n        userChoices,\n        saveAudioInputEnabled,\n        saveVideoInputEnabled,\n        saveAudioInputDeviceId,\n        saveVideoInputDeviceId,\n        saveUsername\n    };\n}\n// src/hooks/useIsEncrypted.ts\n\n\n\nfunction useIsEncrypted(participant) {\n    const p = useEnsureParticipant(participant);\n    const room = useEnsureRoom();\n    const observer = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>(0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.encryptionStatusObservable)(room, p), [\n        room,\n        p\n    ]);\n    const isEncrypted = useObservableState(observer, p instanceof livekit_client__WEBPACK_IMPORTED_MODULE_4__.LocalParticipant ? p.isE2EEEnabled : p.isEncrypted);\n    return isEncrypted;\n}\n// src/hooks/useTrackVolume.ts\n\n\n\nvar useTrackVolume = (trackOrTrackReference, options = {\n    fftSize: 32,\n    smoothingTimeConstant: 0\n})=>{\n    const track = (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.isTrackReference)(trackOrTrackReference) ? trackOrTrackReference.publication.track : trackOrTrackReference;\n    const [volume, setVolume] = react__WEBPACK_IMPORTED_MODULE_0__.useState(0);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        if (!track || !track.mediaStream) {\n            return;\n        }\n        const { cleanup, analyser } = (0,livekit_client__WEBPACK_IMPORTED_MODULE_4__.createAudioAnalyser)(track, options);\n        const bufferLength = analyser.frequencyBinCount;\n        const dataArray = new Uint8Array(bufferLength);\n        const updateVolume = ()=>{\n            analyser.getByteFrequencyData(dataArray);\n            let sum = 0;\n            for(let i = 0; i < dataArray.length; i++){\n                const a = dataArray[i];\n                sum += a * a;\n            }\n            setVolume(Math.sqrt(sum / dataArray.length) / 255);\n        };\n        const interval = setInterval(updateVolume, 1e3 / 30);\n        return ()=>{\n            cleanup();\n            clearInterval(interval);\n        };\n    }, [\n        track,\n        track == null ? void 0 : track.mediaStream,\n        JSON.stringify(options)\n    ]);\n    return volume;\n};\nvar normalizeFrequencies = (frequencies)=>{\n    const normalizeDb = (value)=>{\n        const minDb = -100;\n        const maxDb = -10;\n        let db = 1 - Math.max(minDb, Math.min(maxDb, value)) * -1 / 100;\n        db = Math.sqrt(db);\n        return db;\n    };\n    return frequencies.map((value)=>{\n        if (value === -Infinity) {\n            return 0;\n        }\n        return normalizeDb(value);\n    });\n};\nvar multibandDefaults = {\n    bands: 5,\n    loPass: 100,\n    hiPass: 600,\n    updateInterval: 10,\n    analyserOptions: {\n        fftSize: 2048\n    }\n};\nvar useMultibandTrackVolume = (trackOrTrackReference, options = {})=>{\n    var _a;\n    const track = trackOrTrackReference instanceof livekit_client__WEBPACK_IMPORTED_MODULE_4__.Track ? trackOrTrackReference : (_a = trackOrTrackReference == null ? void 0 : trackOrTrackReference.publication) == null ? void 0 : _a.track;\n    const [frequencyBands, setFrequencyBands] = react__WEBPACK_IMPORTED_MODULE_0__.useState([]);\n    const opts = __spreadValues(__spreadValues({}, multibandDefaults), options);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        if (!track || !(track == null ? void 0 : track.mediaStream)) {\n            return;\n        }\n        const { analyser, cleanup } = (0,livekit_client__WEBPACK_IMPORTED_MODULE_4__.createAudioAnalyser)(track, opts.analyserOptions);\n        const bufferLength = analyser.frequencyBinCount;\n        const dataArray = new Float32Array(bufferLength);\n        const updateVolume = ()=>{\n            analyser.getFloatFrequencyData(dataArray);\n            let frequencies = new Float32Array(dataArray.length);\n            for(let i = 0; i < dataArray.length; i++){\n                frequencies[i] = dataArray[i];\n            }\n            frequencies = frequencies.slice(options.loPass, options.hiPass);\n            const normalizedFrequencies = normalizeFrequencies(frequencies);\n            const chunkSize = Math.ceil(normalizedFrequencies.length / opts.bands);\n            const chunks = [];\n            for(let i = 0; i < opts.bands; i++){\n                const summedVolumes = normalizedFrequencies.slice(i * chunkSize, (i + 1) * chunkSize).reduce((acc, val)=>acc += val, 0);\n                chunks.push(summedVolumes / chunkSize);\n            }\n            setFrequencyBands(chunks);\n        };\n        const interval = setInterval(updateVolume, opts.updateInterval);\n        return ()=>{\n            cleanup();\n            clearInterval(interval);\n        };\n    }, [\n        track,\n        track == null ? void 0 : track.mediaStream,\n        JSON.stringify(options)\n    ]);\n    return frequencyBands;\n};\n// src/components/controls/ClearPinButton.tsx\nfunction ClearPinButton(props) {\n    const { buttonProps } = useClearPinButton(props);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", __spreadValues({}, buttonProps), props.children);\n}\n// src/components/ConnectionState.tsx\n\nfunction ConnectionState3(_a) {\n    var _b = _a, { room } = _b, props = __objRest(_b, [\n        \"room\"\n    ]);\n    const connectionState = useConnectionState(room);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", __spreadValues({}, props), connectionState);\n}\n// src/components/controls/ChatToggle.tsx\n\nfunction ChatToggle(props) {\n    const { mergedProps } = useChatToggle({\n        props\n    });\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", __spreadValues({}, mergedProps), props.children);\n}\n// src/components/controls/DisconnectButton.tsx\n\nfunction DisconnectButton(props) {\n    const { buttonProps } = useDisconnectButton(props);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", __spreadValues({}, buttonProps), props.children);\n}\n// src/components/controls/FocusToggle.tsx\n\n// src/assets/icons/CameraDisabledIcon.tsx\n\nvar SvgCameraDisabledIcon = (props)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", __spreadValues({\n        xmlns: \"http://www.w3.org/2000/svg\",\n        width: 16,\n        height: 16,\n        fill: \"currentColor\"\n    }, props), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        d: \"M1.354.646a.5.5 0 1 0-.708.708l14 14a.5.5 0 0 0 .708-.708L11 10.293V4.5A1.5 1.5 0 0 0 9.5 3H3.707zM0 4.5a1.5 1.5 0 0 1 .943-1.393l9.532 9.533c-.262.224-.603.36-.975.36h-8A1.5 1.5 0 0 1 0 11.5z\"\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        d: \"m15.2 3.6-2.8 2.1a1 1 0 0 0-.4.8v3a1 1 0 0 0 .4.8l2.8 2.1a.5.5 0 0 0 .8-.4V4a.5.5 0 0 0-.8-.4z\"\n    }));\nvar CameraDisabledIcon_default = SvgCameraDisabledIcon;\n// src/assets/icons/CameraIcon.tsx\n\nvar SvgCameraIcon = (props)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", __spreadValues({\n        xmlns: \"http://www.w3.org/2000/svg\",\n        width: 16,\n        height: 16,\n        fill: \"currentColor\"\n    }, props), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        d: \"M0 4.5A1.5 1.5 0 0 1 1.5 3h8A1.5 1.5 0 0 1 11 4.5v7A1.5 1.5 0 0 1 9.5 13h-8A1.5 1.5 0 0 1 0 11.5zM15.2 3.6l-2.8 2.1a1 1 0 0 0-.4.8v3a1 1 0 0 0 .4.8l2.8 2.1a.5.5 0 0 0 .8-.4V4a.5.5 0 0 0-.8-.4z\"\n    }));\nvar CameraIcon_default = SvgCameraIcon;\n// src/assets/icons/ChatCloseIcon.tsx\n\nvar SvgChatCloseIcon = (props)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", __spreadValues({\n        xmlns: \"http://www.w3.org/2000/svg\",\n        width: 16,\n        height: 16,\n        viewBox: \"0 0 24 24\"\n    }, props), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fill: \"#FFF\",\n        d: \"M4.99 3.99a1 1 0 0 0-.697 1.717L10.586 12l-6.293 6.293a1 1 0 1 0 1.414 1.414L12 13.414l6.293 6.293a1 1 0 1 0 1.414-1.414L13.414 12l6.293-6.293a1 1 0 0 0-.727-1.717 1 1 0 0 0-.687.303L12 10.586 5.707 4.293a1 1 0 0 0-.717-.303z\"\n    }));\nvar ChatCloseIcon_default = SvgChatCloseIcon;\n// src/assets/icons/ChatIcon.tsx\n\nvar SvgChatIcon = (props)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", __spreadValues({\n        xmlns: \"http://www.w3.org/2000/svg\",\n        width: 16,\n        height: 18,\n        fill: \"none\"\n    }, props), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fill: \"currentColor\",\n        fillRule: \"evenodd\",\n        d: \"M0 2.75A2.75 2.75 0 0 1 2.75 0h10.5A2.75 2.75 0 0 1 16 2.75v13.594a.75.75 0 0 1-1.234.572l-3.691-3.12a1.25 1.25 0 0 0-.807-.296H2.75A2.75 2.75 0 0 1 0 10.75v-8ZM2.75 1.5c-.69 0-1.25.56-1.25 1.25v8c0 .69.56 1.25 1.25 1.25h7.518c.65 0 1.279.23 1.775.65l2.457 2.077V2.75c0-.69-.56-1.25-1.25-1.25H2.75Z\",\n        clipRule: \"evenodd\"\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fill: \"currentColor\",\n        fillRule: \"evenodd\",\n        d: \"M3 4.5a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1-.5-.5Zm0 2a.5.5 0 0 1 .5-.5h9a.5.5 0 0 1 0 1h-9a.5.5 0 0 1-.5-.5Zm0 2a.5.5 0 0 1 .5-.5h5a.5.5 0 0 1 0 1h-5a.5.5 0 0 1-.5-.5Z\",\n        clipRule: \"evenodd\"\n    }));\nvar ChatIcon_default = SvgChatIcon;\n// src/assets/icons/Chevron.tsx\n\nvar SvgChevron = (props)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", __spreadValues({\n        xmlns: \"http://www.w3.org/2000/svg\",\n        width: 16,\n        height: 16,\n        fill: \"none\"\n    }, props), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fill: \"currentcolor\",\n        fillRule: \"evenodd\",\n        d: \"M5.293 2.293a1 1 0 0 1 1.414 0l4.823 4.823a1.25 1.25 0 0 1 0 1.768l-4.823 4.823a1 1 0 0 1-1.414-1.414L9.586 8 5.293 3.707a1 1 0 0 1 0-1.414z\",\n        clipRule: \"evenodd\"\n    }));\nvar Chevron_default = SvgChevron;\n// src/assets/icons/FocusToggleIcon.tsx\n\nvar SvgFocusToggleIcon = (props)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", __spreadValues({\n        xmlns: \"http://www.w3.org/2000/svg\",\n        width: 16,\n        height: 16,\n        fill: \"none\"\n    }, props), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"g\", {\n        stroke: \"currentColor\",\n        strokeLinecap: \"round\",\n        strokeLinejoin: \"round\",\n        strokeWidth: 1.5\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        d: \"M10 1.75h4.25m0 0V6m0-4.25L9 7M6 14.25H1.75m0 0V10m0 4.25L7 9\"\n    })));\nvar FocusToggleIcon_default = SvgFocusToggleIcon;\n// src/assets/icons/GearIcon.tsx\n\nvar SvgGearIcon = (props)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", __spreadValues({\n        xmlns: \"http://www.w3.org/2000/svg\",\n        width: 16,\n        height: 16,\n        fill: \"none\"\n    }, props), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fill: \"currentColor\",\n        fillRule: \"evenodd\",\n        d: \"M2 2.75A2.75 2.75 0 0 1 4.75 0h6.5A2.75 2.75 0 0 1 14 2.75v10.5A2.75 2.75 0 0 1 11.25 16h-6.5A2.75 2.75 0 0 1 2 13.25v-.5a.75.75 0 0 1 1.5 0v.5c0 .69.56 1.25 1.25 1.25h6.5c.69 0 1.25-.56 1.25-1.25V2.75c0-.69-.56-1.25-1.25-1.25h-6.5c-.69 0-1.25.56-1.25 1.25v.5a.75.75 0 0 1-1.5 0v-.5Z\",\n        clipRule: \"evenodd\"\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fill: \"currentColor\",\n        fillRule: \"evenodd\",\n        d: \"M8.78 7.47a.75.75 0 0 1 0 1.06l-2.25 2.25a.75.75 0 1 1-1.06-1.06l.97-.97H1.75a.75.75 0 0 1 0-1.5h4.69l-.97-.97a.75.75 0 0 1 1.06-1.06l2.25 2.25Z\",\n        clipRule: \"evenodd\"\n    }));\nvar GearIcon_default = SvgGearIcon;\n// src/assets/icons/LeaveIcon.tsx\n\nvar SvgLeaveIcon = (props)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", __spreadValues({\n        xmlns: \"http://www.w3.org/2000/svg\",\n        width: 16,\n        height: 16,\n        fill: \"none\"\n    }, props), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fill: \"currentColor\",\n        fillRule: \"evenodd\",\n        d: \"M2 2.75A2.75 2.75 0 0 1 4.75 0h6.5A2.75 2.75 0 0 1 14 2.75v10.5A2.75 2.75 0 0 1 11.25 16h-6.5A2.75 2.75 0 0 1 2 13.25v-.5a.75.75 0 0 1 1.5 0v.5c0 .69.56 1.25 1.25 1.25h6.5c.69 0 1.25-.56 1.25-1.25V2.75c0-.69-.56-1.25-1.25-1.25h-6.5c-.69 0-1.25.56-1.25 1.25v.5a.75.75 0 0 1-1.5 0v-.5Z\",\n        clipRule: \"evenodd\"\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fill: \"currentColor\",\n        fillRule: \"evenodd\",\n        d: \"M8.78 7.47a.75.75 0 0 1 0 1.06l-2.25 2.25a.75.75 0 1 1-1.06-1.06l.97-.97H1.75a.75.75 0 0 1 0-1.5h4.69l-.97-.97a.75.75 0 0 1 1.06-1.06l2.25 2.25Z\",\n        clipRule: \"evenodd\"\n    }));\nvar LeaveIcon_default = SvgLeaveIcon;\n// src/assets/icons/LockLockedIcon.tsx\n\nvar SvgLockLockedIcon = (props)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", __spreadValues({\n        xmlns: \"http://www.w3.org/2000/svg\",\n        width: 16,\n        height: 16,\n        fill: \"none\"\n    }, props), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fill: \"currentcolor\",\n        fillRule: \"evenodd\",\n        d: \"M4 6.104V4a4 4 0 1 1 8 0v2.104c1.154.326 2 1.387 2 2.646v4.5A2.75 2.75 0 0 1 11.25 16h-6.5A2.75 2.75 0 0 1 2 13.25v-4.5c0-1.259.846-2.32 2-2.646ZM5.5 4a2.5 2.5 0 0 1 5 0v2h-5V4Z\",\n        clipRule: \"evenodd\"\n    }));\nvar LockLockedIcon_default = SvgLockLockedIcon;\n// src/assets/icons/MicDisabledIcon.tsx\n\nvar SvgMicDisabledIcon = (props)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", __spreadValues({\n        xmlns: \"http://www.w3.org/2000/svg\",\n        width: 16,\n        height: 16,\n        fill: \"currentColor\"\n    }, props), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        d: \"M12.227 11.52a5.477 5.477 0 0 0 1.246-2.97.5.5 0 0 0-.995-.1 4.478 4.478 0 0 1-.962 2.359l-1.07-1.07C10.794 9.247 11 8.647 11 8V3a3 3 0 0 0-6 0v1.293L1.354.646a.5.5 0 1 0-.708.708l14 14a.5.5 0 0 0 .708-.708zM8 12.5c.683 0 1.33-.152 1.911-.425l.743.743c-.649.359-1.378.59-2.154.66V15h2a.5.5 0 0 1 0 1h-5a.5.5 0 0 1 0-1h2v-1.522a5.502 5.502 0 0 1-4.973-4.929.5.5 0 0 1 .995-.098A4.5 4.5 0 0 0 8 12.5z\"\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        d: \"M8.743 10.907 5 7.164V8a3 3 0 0 0 3.743 2.907z\"\n    }));\nvar MicDisabledIcon_default = SvgMicDisabledIcon;\n// src/assets/icons/MicIcon.tsx\n\nvar SvgMicIcon = (props)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", __spreadValues({\n        xmlns: \"http://www.w3.org/2000/svg\",\n        width: 16,\n        height: 16,\n        fill: \"currentColor\"\n    }, props), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fillRule: \"evenodd\",\n        d: \"M2.975 8.002a.5.5 0 0 1 .547.449 4.5 4.5 0 0 0 8.956 0 .5.5 0 1 1 .995.098A5.502 5.502 0 0 1 8.5 13.478V15h2a.5.5 0 0 1 0 1h-5a.5.5 0 0 1 0-1h2v-1.522a5.502 5.502 0 0 1-4.973-4.929.5.5 0 0 1 .448-.547z\",\n        clipRule: \"evenodd\"\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        d: \"M5 3a3 3 0 1 1 6 0v5a3 3 0 0 1-6 0z\"\n    }));\nvar MicIcon_default = SvgMicIcon;\n// src/assets/icons/QualityExcellentIcon.tsx\n\nvar SvgQualityExcellentIcon = (props)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", __spreadValues({\n        xmlns: \"http://www.w3.org/2000/svg\",\n        width: 16,\n        height: 16,\n        fill: \"currentcolor\"\n    }, props), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        d: \"M0 11.5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5zm6-5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v9a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5zm6-6a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v15a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5z\"\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        d: \"M0 11.5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5zm6-5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v9a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5zm6-6a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v15a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5z\"\n    }));\nvar QualityExcellentIcon_default = SvgQualityExcellentIcon;\n// src/assets/icons/QualityGoodIcon.tsx\n\nvar SvgQualityGoodIcon = (props)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", __spreadValues({\n        xmlns: \"http://www.w3.org/2000/svg\",\n        width: 16,\n        height: 16,\n        fill: \"currentcolor\"\n    }, props), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        d: \"M0 11.5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5zm6-5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v9a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5z\"\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        d: \"M0 11.5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5zm6-5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v9a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5z\"\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"g\", {\n        opacity: 0.25\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        d: \"M12 .5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v15a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5z\"\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        d: \"M12 .5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v15a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5z\"\n    })));\nvar QualityGoodIcon_default = SvgQualityGoodIcon;\n// src/assets/icons/QualityPoorIcon.tsx\n\nvar SvgQualityPoorIcon = (props)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", __spreadValues({\n        xmlns: \"http://www.w3.org/2000/svg\",\n        width: 16,\n        height: 16,\n        fill: \"currentcolor\"\n    }, props), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        d: \"M0 11.5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5z\"\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        d: \"M0 11.5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5z\"\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"g\", {\n        opacity: 0.25\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        d: \"M6 6.5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v9a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5z\"\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        d: \"M6 6.5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v9a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5zm6-6a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v15a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5z\"\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        d: \"M12 .5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v15a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5z\"\n    })));\nvar QualityPoorIcon_default = SvgQualityPoorIcon;\n// src/assets/icons/QualityUnknownIcon.tsx\n\nvar SvgQualityUnknownIcon = (props)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", __spreadValues({\n        xmlns: \"http://www.w3.org/2000/svg\",\n        width: 16,\n        height: 16,\n        fill: \"currentColor\"\n    }, props), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"g\", {\n        opacity: 0.25\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        d: \"M0 11.5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5v-4Zm6-5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v9a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5v-9Zm6-6a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v15a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5V.5Z\"\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        d: \"M0 11.5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v4a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5v-4Zm6-5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v9a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5v-9Zm6-6a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 .5.5v15a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5V.5Z\"\n    })));\nvar QualityUnknownIcon_default = SvgQualityUnknownIcon;\n// src/assets/icons/ScreenShareIcon.tsx\n\nvar SvgScreenShareIcon = (props)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", __spreadValues({\n        xmlns: \"http://www.w3.org/2000/svg\",\n        width: 20,\n        height: 16,\n        fill: \"none\"\n    }, props), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fill: \"currentColor\",\n        fillRule: \"evenodd\",\n        d: \"M0 2.75A2.75 2.75 0 0 1 2.75 0h14.5A2.75 2.75 0 0 1 20 2.75v10.5A2.75 2.75 0 0 1 17.25 16H2.75A2.75 2.75 0 0 1 0 13.25V2.75ZM2.75 1.5c-.69 0-1.25.56-1.25 1.25v10.5c0 .69.56 1.25 1.25 1.25h14.5c.69 0 1.25-.56 1.25-1.25V2.75c0-.69-.56-1.25-1.25-1.25H2.75Z\",\n        clipRule: \"evenodd\"\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fill: \"currentColor\",\n        fillRule: \"evenodd\",\n        d: \"M9.47 4.22a.75.75 0 0 1 1.06 0l2.25 2.25a.75.75 0 0 1-1.06 1.06l-.97-.97v4.69a.75.75 0 0 1-1.5 0V6.56l-.97.97a.75.75 0 0 1-1.06-1.06l2.25-2.25Z\",\n        clipRule: \"evenodd\"\n    }));\nvar ScreenShareIcon_default = SvgScreenShareIcon;\n// src/assets/icons/ScreenShareStopIcon.tsx\n\nvar SvgScreenShareStopIcon = (props)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", __spreadValues({\n        xmlns: \"http://www.w3.org/2000/svg\",\n        width: 20,\n        height: 16,\n        fill: \"none\"\n    }, props), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"g\", {\n        fill: \"currentColor\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        d: \"M7.28 4.22a.75.75 0 0 0-1.06 1.06L8.94 8l-2.72 2.72a.75.75 0 1 0 1.06 1.06L10 9.06l2.72 2.72a.75.75 0 1 0 1.06-1.06L11.06 8l2.72-2.72a.75.75 0 0 0-1.06-1.06L10 6.94z\"\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fillRule: \"evenodd\",\n        d: \"M2.75 0A2.75 2.75 0 0 0 0 2.75v10.5A2.75 2.75 0 0 0 2.75 16h14.5A2.75 2.75 0 0 0 20 13.25V2.75A2.75 2.75 0 0 0 17.25 0zM1.5 2.75c0-.69.56-1.25 1.25-1.25h14.5c.69 0 1.25.56 1.25 1.25v10.5c0 .69-.56 1.25-1.25 1.25H2.75c-.69 0-1.25-.56-1.25-1.25z\",\n        clipRule: \"evenodd\"\n    })));\nvar ScreenShareStopIcon_default = SvgScreenShareStopIcon;\n// src/assets/icons/SpinnerIcon.tsx\n\nvar SvgSpinnerIcon = (props)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", __spreadValues({\n        xmlns: \"http://www.w3.org/2000/svg\",\n        width: 16,\n        height: 16,\n        fill: \"none\"\n    }, props), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fill: \"currentColor\",\n        fillRule: \"evenodd\",\n        d: \"M8 0a.75.75 0 0 1 .75.75v2.5a.75.75 0 0 1-1.5 0V.75A.75.75 0 0 1 8 0Z\",\n        clipRule: \"evenodd\"\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fill: \"currentColor\",\n        fillRule: \"evenodd\",\n        d: \"M8 12a.75.75 0 0 1 .75.75v2.5a.75.75 0 0 1-1.5 0v-2.5A.75.75 0 0 1 8 12Z\",\n        clipRule: \"evenodd\",\n        opacity: 0.7\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fill: \"currentColor\",\n        fillRule: \"evenodd\",\n        d: \"M12 1.072a.75.75 0 0 1 .274 1.024l-1.25 2.165a.75.75 0 0 1-1.299-.75l1.25-2.165A.75.75 0 0 1 12 1.072Z\",\n        clipRule: \"evenodd\"\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fill: \"currentColor\",\n        fillRule: \"evenodd\",\n        d: \"M6 11.464a.75.75 0 0 1 .274 1.025l-1.25 2.165a.75.75 0 0 1-1.299-.75l1.25-2.165A.75.75 0 0 1 6 11.464Z\",\n        clipRule: \"evenodd\",\n        opacity: 0.6\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fill: \"currentColor\",\n        fillRule: \"evenodd\",\n        d: \"M14.928 4a.75.75 0 0 1-.274 1.025l-2.165 1.25a.75.75 0 1 1-.75-1.3l2.165-1.25A.75.75 0 0 1 14.928 4Z\",\n        clipRule: \"evenodd\"\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fill: \"currentColor\",\n        fillRule: \"evenodd\",\n        d: \"M4.536 10a.75.75 0 0 1-.275 1.024l-2.165 1.25a.75.75 0 0 1-.75-1.298l2.165-1.25A.75.75 0 0 1 4.536 10Z\",\n        clipRule: \"evenodd\",\n        opacity: 0.5\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fill: \"currentColor\",\n        fillRule: \"evenodd\",\n        d: \"M16 8a.75.75 0 0 1-.75.75h-2.5a.75.75 0 0 1 0-1.5h2.5A.75.75 0 0 1 16 8Z\",\n        clipRule: \"evenodd\"\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fill: \"currentColor\",\n        fillRule: \"evenodd\",\n        d: \"M4 8a.75.75 0 0 1-.75.75H.75a.75.75 0 0 1 0-1.5h2.5A.75.75 0 0 1 4 8Z\",\n        clipRule: \"evenodd\",\n        opacity: 0.4\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fill: \"currentColor\",\n        fillRule: \"evenodd\",\n        d: \"M14.928 12a.75.75 0 0 1-1.024.274l-2.165-1.25a.75.75 0 0 1 .75-1.299l2.165 1.25A.75.75 0 0 1 14.928 12Z\",\n        clipRule: \"evenodd\",\n        opacity: 0.9\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fill: \"currentColor\",\n        fillRule: \"evenodd\",\n        d: \"M4.536 6a.75.75 0 0 1-1.025.275l-2.165-1.25a.75.75 0 1 1 .75-1.3l2.165 1.25A.75.75 0 0 1 4.536 6Z\",\n        clipRule: \"evenodd\",\n        opacity: 0.3\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fill: \"currentColor\",\n        fillRule: \"evenodd\",\n        d: \"M12 14.928a.75.75 0 0 1-1.024-.274l-1.25-2.165a.75.75 0 0 1 1.298-.75l1.25 2.165A.75.75 0 0 1 12 14.928Z\",\n        clipRule: \"evenodd\",\n        opacity: 0.8\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        fill: \"currentColor\",\n        fillRule: \"evenodd\",\n        d: \"M6 4.536a.75.75 0 0 1-1.024-.275l-1.25-2.165a.75.75 0 1 1 1.299-.75l1.25 2.165A.75.75 0 0 1 6 4.536Z\",\n        clipRule: \"evenodd\",\n        opacity: 0.2\n    }));\nvar SpinnerIcon_default = SvgSpinnerIcon;\n// src/assets/icons/UnfocusToggleIcon.tsx\n\nvar SvgUnfocusToggleIcon = (props)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", __spreadValues({\n        xmlns: \"http://www.w3.org/2000/svg\",\n        width: 16,\n        height: 16,\n        fill: \"none\"\n    }, props), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"g\", {\n        stroke: \"currentColor\",\n        strokeLinecap: \"round\",\n        strokeLinejoin: \"round\",\n        strokeWidth: 1.5\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        d: \"M13.25 7H9m0 0V2.75M9 7l5.25-5.25M2.75 9H7m0 0v4.25M7 9l-5.25 5.25\"\n    })));\nvar UnfocusToggleIcon_default = SvgUnfocusToggleIcon;\n// src/components/controls/FocusToggle.tsx\nfunction FocusToggle(_a) {\n    var _b = _a, { trackRef, trackSource, participant } = _b, props = __objRest(_b, [\n        \"trackRef\",\n        \"trackSource\",\n        \"participant\"\n    ]);\n    const trackRefFromContext = useMaybeTrackRefContext();\n    const { mergedProps, inFocus } = useFocusToggle({\n        trackRef: trackRef != null ? trackRef : trackRefFromContext,\n        trackSource,\n        participant,\n        props\n    });\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(LayoutContext.Consumer, null, (layoutContext)=>layoutContext !== void 0 && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", __spreadValues({}, mergedProps), props.children ? props.children : inFocus ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(UnfocusToggleIcon_default, null) : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(FocusToggleIcon_default, null)));\n}\n// src/components/controls/MediaDeviceSelect.tsx\n\n\nfunction MediaDeviceSelect(_a) {\n    var _b = _a, { kind, initialSelection, onActiveDeviceChange, onDeviceListChange, onDeviceSelectError, exactMatch, track, requestPermissions, onError } = _b, props = __objRest(_b, [\n        \"kind\",\n        \"initialSelection\",\n        \"onActiveDeviceChange\",\n        \"onDeviceListChange\",\n        \"onDeviceSelectError\",\n        \"exactMatch\",\n        \"track\",\n        \"requestPermissions\",\n        \"onError\"\n    ]);\n    const room = useMaybeRoomContext();\n    const handleError = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((e)=>{\n        if (room) {\n            room.emit(livekit_client__WEBPACK_IMPORTED_MODULE_4__.RoomEvent.MediaDevicesError, e);\n        }\n        onError == null ? void 0 : onError(e);\n    }, [\n        room,\n        onError\n    ]);\n    const { devices, activeDeviceId, setActiveMediaDevice, className } = useMediaDeviceSelect({\n        kind,\n        room,\n        track,\n        requestPermissions,\n        onError: handleError\n    });\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        if (initialSelection !== void 0) {\n            setActiveMediaDevice(initialSelection);\n        }\n    }, [\n        setActiveMediaDevice\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        if (typeof onDeviceListChange === \"function\") {\n            onDeviceListChange(devices);\n        }\n    }, [\n        onDeviceListChange,\n        devices\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        if (activeDeviceId && activeDeviceId !== \"\") {\n            onActiveDeviceChange == null ? void 0 : onActiveDeviceChange(activeDeviceId);\n        }\n    }, [\n        activeDeviceId\n    ]);\n    const handleActiveDeviceChange = (deviceId)=>__async(this, null, function*() {\n            try {\n                yield setActiveMediaDevice(deviceId, {\n                    exact: exactMatch\n                });\n            } catch (e) {\n                if (e instanceof Error) {\n                    onDeviceSelectError == null ? void 0 : onDeviceSelectError(e);\n                } else {\n                    throw e;\n                }\n            }\n        });\n    const mergedProps = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>mergeProps2(props, {\n            className\n        }, {\n            className: \"lk-list\"\n        }), [\n        className,\n        props\n    ]);\n    function isActive(deviceId, activeDeviceId2, index) {\n        return deviceId === activeDeviceId2 || index === 0 && activeDeviceId2 === \"default\";\n    }\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"ul\", __spreadValues({}, mergedProps), devices.map((device, index)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"li\", {\n            key: device.deviceId,\n            id: device.deviceId,\n            \"data-lk-active\": isActive(device.deviceId, activeDeviceId, index),\n            \"aria-selected\": isActive(device.deviceId, activeDeviceId, index),\n            role: \"option\"\n        }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", {\n            className: \"lk-button\",\n            onClick: ()=>handleActiveDeviceChange(device.deviceId)\n        }, device.label))));\n}\n// src/components/controls/StartAudio.tsx\n\nfunction StartAudio(_a) {\n    var _b = _a, { label = \"Allow Audio\" } = _b, props = __objRest(_b, [\n        \"label\"\n    ]);\n    const room = useRoomContext();\n    const { mergedProps } = useStartAudio({\n        room,\n        props\n    });\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", __spreadValues({}, mergedProps), label);\n}\n// src/components/controls/TrackToggle.tsx\n\n// src/assets/icons/util.tsx\n\n\nfunction getSourceIcon(source, enabled) {\n    switch(source){\n        case livekit_client__WEBPACK_IMPORTED_MODULE_4__.Track.Source.Microphone:\n            return enabled ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(MicIcon_default, null) : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(MicDisabledIcon_default, null);\n        case livekit_client__WEBPACK_IMPORTED_MODULE_4__.Track.Source.Camera:\n            return enabled ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(CameraIcon_default, null) : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(CameraDisabledIcon_default, null);\n        case livekit_client__WEBPACK_IMPORTED_MODULE_4__.Track.Source.ScreenShare:\n            return enabled ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ScreenShareStopIcon_default, null) : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ScreenShareIcon_default, null);\n        default:\n            return void 0;\n    }\n}\nfunction getConnectionQualityIcon(quality) {\n    switch(quality){\n        case livekit_client__WEBPACK_IMPORTED_MODULE_4__.ConnectionQuality.Excellent:\n            return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(QualityExcellentIcon_default, null);\n        case livekit_client__WEBPACK_IMPORTED_MODULE_4__.ConnectionQuality.Good:\n            return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(QualityGoodIcon_default, null);\n        case livekit_client__WEBPACK_IMPORTED_MODULE_4__.ConnectionQuality.Poor:\n            return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(QualityPoorIcon_default, null);\n        default:\n            return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(QualityUnknownIcon_default, null);\n    }\n}\n// src/components/controls/TrackToggle.tsx\nfunction TrackToggle(_a) {\n    var _b = _a, { showIcon } = _b, props = __objRest(_b, [\n        \"showIcon\"\n    ]);\n    const { buttonProps, enabled } = useTrackToggle(props);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", __spreadValues({}, buttonProps), (showIcon != null ? showIcon : true) && getSourceIcon(props.source, enabled), props.children);\n}\n// src/components/layout/FocusLayout.tsx\n\n// src/components/participant/ParticipantTile.tsx\n\n\n\n// src/components/participant/ConnectionQualityIndicator.tsx\n\nfunction ConnectionQualityIndicator(props) {\n    var _a;\n    const { className, quality } = useConnectionQualityIndicator(props);\n    const elementProps = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>{\n        return __spreadProps(__spreadValues({}, mergeProps2(props, {\n            className\n        })), {\n            \"data-lk-quality\": quality\n        });\n    }, [\n        quality,\n        props,\n        className\n    ]);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", __spreadValues({}, elementProps), (_a = props.children) != null ? _a : getConnectionQualityIcon(quality));\n}\n// src/components/participant/ParticipantName.tsx\n\n\nfunction ParticipantName(_a) {\n    var _b = _a, { participant } = _b, props = __objRest(_b, [\n        \"participant\"\n    ]);\n    const p = useEnsureParticipant(participant);\n    const { className, infoObserver } = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>{\n        return (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.setupParticipantName)(p);\n    }, [\n        p\n    ]);\n    const { identity, name } = useObservableState(infoObserver, {\n        name: p.name,\n        identity: p.identity,\n        metadata: p.metadata\n    });\n    const mergedProps = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>{\n        return mergeProps2(props, {\n            className,\n            \"data-lk-participant-name\": name\n        });\n    }, [\n        props,\n        className,\n        name\n    ]);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", __spreadValues({}, mergedProps), name !== \"\" ? name : identity, props.children);\n}\n// src/components/participant/TrackMutedIndicator.tsx\n\nfunction TrackMutedIndicator(_a) {\n    var _b = _a, { source, participant, trackRef, show = \"always\" } = _b, props = __objRest(_b, [\n        \"source\",\n        \"participant\",\n        \"trackRef\",\n        \"show\"\n    ]);\n    var _a2, _b2;\n    const { className, isMuted } = useTrackMutedIndicator(trackRef != null ? trackRef : source, {\n        participant\n    });\n    const showIndicator = show === \"always\" || show === \"muted\" && isMuted || show === \"unmuted\" && !isMuted;\n    const htmlProps = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>mergeProps2(props, {\n            className\n        }), [\n        className,\n        props\n    ]);\n    if (!showIndicator) {\n        return null;\n    }\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", __spreadProps(__spreadValues({}, htmlProps), {\n        \"data-lk-muted\": isMuted\n    }), (_b2 = props.children) != null ? _b2 : getSourceIcon((_a2 = trackRef == null ? void 0 : trackRef.source) != null ? _a2 : source, !isMuted));\n}\n// src/assets/images/ParticipantPlaceholder.tsx\n\nvar SvgParticipantPlaceholder = (props)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", __spreadValues({\n        width: 320,\n        height: 320,\n        viewBox: \"0 0 320 320\",\n        preserveAspectRatio: \"xMidYMid meet\",\n        fill: \"none\",\n        xmlns: \"http://www.w3.org/2000/svg\"\n    }, props), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        d: \"M160 180C204.182 180 240 144.183 240 100C240 55.8172 204.182 20 160 20C115.817 20 79.9997 55.8172 79.9997 100C79.9997 144.183 115.817 180 160 180Z\",\n        fill: \"white\",\n        fillOpacity: 0.25\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n        d: \"M97.6542 194.614C103.267 191.818 109.841 192.481 115.519 195.141C129.025 201.466 144.1 205 159.999 205C175.899 205 190.973 201.466 204.48 195.141C210.158 192.481 216.732 191.818 222.345 194.614C262.703 214.719 291.985 253.736 298.591 300.062C300.15 310.997 291.045 320 280 320H39.9997C28.954 320 19.8495 310.997 21.4087 300.062C28.014 253.736 57.2966 214.72 97.6542 194.614Z\",\n        fill: \"white\",\n        fillOpacity: 0.25\n    }));\nvar ParticipantPlaceholder_default = SvgParticipantPlaceholder;\n// src/components/participant/VideoTrack.tsx\n\n\n\nfunction VideoTrack(_a) {\n    var _b = _a, { onTrackClick, onClick, onSubscriptionStatusChanged, trackRef, name, publication, source, participant: p, manageSubscription } = _b, props = __objRest(_b, [\n        \"onTrackClick\",\n        \"onClick\",\n        \"onSubscriptionStatusChanged\",\n        \"trackRef\",\n        \"name\",\n        \"publication\",\n        \"source\",\n        \"participant\",\n        \"manageSubscription\"\n    ]);\n    var _a2, _b2, _c, _d, _e, _f, _g, _h, _i, _j;\n    const maybeTrackRef = useMaybeTrackRefContext();\n    const _name = (_d = (_c = (_a2 = trackRef == null ? void 0 : trackRef.publication) == null ? void 0 : _a2.trackName) != null ? _c : (_b2 = maybeTrackRef == null ? void 0 : maybeTrackRef.publication) == null ? void 0 : _b2.trackName) != null ? _d : name;\n    const _source = (_f = (_e = trackRef == null ? void 0 : trackRef.source) != null ? _e : maybeTrackRef == null ? void 0 : maybeTrackRef.source) != null ? _f : source;\n    const _publication = (_h = (_g = trackRef == null ? void 0 : trackRef.publication) != null ? _g : maybeTrackRef == null ? void 0 : maybeTrackRef.publication) != null ? _h : publication;\n    const _participant = (_j = (_i = trackRef == null ? void 0 : trackRef.participant) != null ? _i : maybeTrackRef == null ? void 0 : maybeTrackRef.participant) != null ? _j : p;\n    if (_source === void 0) {\n        throw new Error(\"VideoTrack: You must provide a trackRef or source property.\");\n    }\n    const participant = useEnsureParticipant(_participant);\n    const mediaEl = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n    const intersectionEntry = usehooks_ts__WEBPACK_IMPORTED_MODULE_5__.useIntersectionObserver(mediaEl, {});\n    const debouncedIntersectionEntry = usehooks_ts__WEBPACK_IMPORTED_MODULE_5__.useDebounce(intersectionEntry, 3e3);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        if (manageSubscription && _publication instanceof livekit_client__WEBPACK_IMPORTED_MODULE_4__.RemoteTrackPublication && (debouncedIntersectionEntry == null ? void 0 : debouncedIntersectionEntry.isIntersecting) === false && (intersectionEntry == null ? void 0 : intersectionEntry.isIntersecting) === false) {\n            _publication.setSubscribed(false);\n        }\n    }, [\n        debouncedIntersectionEntry,\n        _publication,\n        manageSubscription\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        if (manageSubscription && _publication instanceof livekit_client__WEBPACK_IMPORTED_MODULE_4__.RemoteTrackPublication && (intersectionEntry == null ? void 0 : intersectionEntry.isIntersecting) === true) {\n            _publication.setSubscribed(true);\n        }\n    }, [\n        intersectionEntry,\n        _publication,\n        manageSubscription\n    ]);\n    const { elementProps, publication: pub, isSubscribed } = useMediaTrackBySourceOrName({\n        participant,\n        name: _name,\n        source: _source,\n        publication: _publication\n    }, {\n        element: mediaEl,\n        props\n    });\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        onSubscriptionStatusChanged == null ? void 0 : onSubscriptionStatusChanged(!!isSubscribed);\n    }, [\n        isSubscribed,\n        onSubscriptionStatusChanged\n    ]);\n    const clickHandler = (evt)=>{\n        onClick == null ? void 0 : onClick(evt);\n        onTrackClick == null ? void 0 : onTrackClick({\n            participant,\n            track: pub\n        });\n    };\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"video\", __spreadProps(__spreadValues({\n        ref: mediaEl\n    }, elementProps), {\n        muted: true,\n        onClick: clickHandler\n    }));\n}\n// src/components/participant/AudioTrack.tsx\n\n\n\nfunction AudioTrack(_a) {\n    var _b = _a, { trackRef, onSubscriptionStatusChanged, volume, source, name, publication, participant: p } = _b, props = __objRest(_b, [\n        \"trackRef\",\n        \"onSubscriptionStatusChanged\",\n        \"volume\",\n        \"source\",\n        \"name\",\n        \"publication\",\n        \"participant\"\n    ]);\n    var _a2, _b2, _c, _d, _e, _f, _g, _h, _i, _j;\n    const maybeTrackRef = useMaybeTrackRefContext();\n    const _name = (_d = (_c = (_a2 = trackRef == null ? void 0 : trackRef.publication) == null ? void 0 : _a2.trackName) != null ? _c : (_b2 = maybeTrackRef == null ? void 0 : maybeTrackRef.publication) == null ? void 0 : _b2.trackName) != null ? _d : name;\n    const _source = (_f = (_e = trackRef == null ? void 0 : trackRef.source) != null ? _e : maybeTrackRef == null ? void 0 : maybeTrackRef.source) != null ? _f : source;\n    const _publication = (_h = (_g = trackRef == null ? void 0 : trackRef.publication) != null ? _g : maybeTrackRef == null ? void 0 : maybeTrackRef.publication) != null ? _h : publication;\n    const _participant = (_j = (_i = trackRef == null ? void 0 : trackRef.participant) != null ? _i : maybeTrackRef == null ? void 0 : maybeTrackRef.participant) != null ? _j : p;\n    if (_source === void 0) {\n        throw new Error(\"The AudioTrack component expects a trackRef or source property.\");\n    }\n    const mediaEl = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n    const participant = useEnsureParticipant(_participant);\n    const { elementProps, isSubscribed, track, publication: pub } = useMediaTrackBySourceOrName({\n        source: _source,\n        name: _name,\n        participant,\n        publication: _publication\n    }, {\n        element: mediaEl,\n        props\n    });\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        onSubscriptionStatusChanged == null ? void 0 : onSubscriptionStatusChanged(!!isSubscribed);\n    }, [\n        isSubscribed,\n        onSubscriptionStatusChanged\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        if (track === void 0 || volume === void 0) {\n            return;\n        }\n        if (track instanceof livekit_client__WEBPACK_IMPORTED_MODULE_4__.RemoteAudioTrack) {\n            track.setVolume(volume);\n        } else {\n            _livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.log.warn(\"Volume can only be set on remote audio tracks.\");\n        }\n    }, [\n        volume,\n        track\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        if (pub === void 0 || props.muted === void 0) {\n            return;\n        }\n        if (pub instanceof livekit_client__WEBPACK_IMPORTED_MODULE_4__.RemoteTrackPublication) {\n            pub.setEnabled(!props.muted);\n        } else {\n            _livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.log.warn(\"Can only call setEnabled on remote track publications.\");\n        }\n    }, [\n        props.muted,\n        pub,\n        track\n    ]);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"audio\", __spreadValues({\n        ref: mediaEl\n    }, elementProps));\n}\n// src/components/participant/ParticipantTile.tsx\nfunction ParticipantContextIfNeeded(props) {\n    const hasContext = !!useMaybeParticipantContext();\n    return props.participant && !hasContext ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ParticipantContext.Provider, {\n        value: props.participant\n    }, props.children) : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, props.children);\n}\nfunction TrackRefContextIfNeeded(props) {\n    const hasContext = !!useMaybeTrackRefContext();\n    return props.trackRef && !hasContext ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(TrackRefContext.Provider, {\n        value: props.trackRef\n    }, props.children) : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, props.children);\n}\nfunction ParticipantTile(_a) {\n    var _b = _a, { trackRef, participant, children, source = livekit_client__WEBPACK_IMPORTED_MODULE_4__.Track.Source.Camera, onParticipantClick, publication, disableSpeakingIndicator } = _b, htmlProps = __objRest(_b, [\n        \"trackRef\",\n        \"participant\",\n        \"children\",\n        \"source\",\n        \"onParticipantClick\",\n        \"publication\",\n        \"disableSpeakingIndicator\"\n    ]);\n    var _a2, _b2;\n    const maybeTrackRef = useMaybeTrackRefContext();\n    const p = useEnsureParticipant(participant);\n    const trackReference = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>{\n        var _a3, _b3, _c, _d, _e, _f;\n        return {\n            participant: (_b3 = (_a3 = trackRef == null ? void 0 : trackRef.participant) != null ? _a3 : maybeTrackRef == null ? void 0 : maybeTrackRef.participant) != null ? _b3 : p,\n            source: (_d = (_c = trackRef == null ? void 0 : trackRef.source) != null ? _c : maybeTrackRef == null ? void 0 : maybeTrackRef.source) != null ? _d : source,\n            publication: (_f = (_e = trackRef == null ? void 0 : trackRef.publication) != null ? _e : maybeTrackRef == null ? void 0 : maybeTrackRef.publication) != null ? _f : publication\n        };\n    }, [\n        maybeTrackRef,\n        p,\n        publication,\n        source,\n        trackRef\n    ]);\n    const { elementProps } = useParticipantTile({\n        participant: trackReference.participant,\n        htmlProps,\n        source: trackReference.source,\n        publication: trackReference.publication,\n        disableSpeakingIndicator,\n        onParticipantClick\n    });\n    const isEncrypted = useIsEncrypted(p);\n    const layoutContext = useMaybeLayoutContext();\n    const autoManageSubscription = (_a2 = useFeatureContext()) == null ? void 0 : _a2.autoSubscription;\n    const handleSubscribe = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((subscribed)=>{\n        if (trackReference.source && !subscribed && layoutContext && layoutContext.pin.dispatch && (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.isTrackReferencePinned)(trackReference, layoutContext.pin.state)) {\n            layoutContext.pin.dispatch({\n                msg: \"clear_pin\"\n            });\n        }\n    }, [\n        trackReference,\n        layoutContext\n    ]);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", __spreadValues({\n        style: {\n            position: \"relative\"\n        }\n    }, elementProps), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(TrackRefContextIfNeeded, {\n        trackRef: trackReference\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ParticipantContextIfNeeded, {\n        participant: trackReference.participant\n    }, children != null ? children : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.isTrackReference)(trackReference) && (((_b2 = trackReference.publication) == null ? void 0 : _b2.kind) === \"video\" || trackReference.source === livekit_client__WEBPACK_IMPORTED_MODULE_4__.Track.Source.Camera || trackReference.source === livekit_client__WEBPACK_IMPORTED_MODULE_4__.Track.Source.ScreenShare) ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(VideoTrack, {\n        trackRef: trackReference,\n        onSubscriptionStatusChanged: handleSubscribe,\n        manageSubscription: autoManageSubscription\n    }) : (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.isTrackReference)(trackReference) && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(AudioTrack, {\n        trackRef: trackReference,\n        onSubscriptionStatusChanged: handleSubscribe\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"lk-participant-placeholder\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ParticipantPlaceholder_default, null)), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"lk-participant-metadata\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"lk-participant-metadata-item\"\n    }, trackReference.source === livekit_client__WEBPACK_IMPORTED_MODULE_4__.Track.Source.Camera ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, isEncrypted && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(LockLockedIcon_default, {\n        style: {\n            marginRight: \"0.25rem\"\n        }\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(TrackMutedIndicator, {\n        source: livekit_client__WEBPACK_IMPORTED_MODULE_4__.Track.Source.Microphone,\n        show: \"muted\"\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ParticipantName, null)) : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ScreenShareIcon_default, {\n        style: {\n            marginRight: \"0.25rem\"\n        }\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ParticipantName, null, \"'s screen\"))), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ConnectionQualityIndicator, {\n        className: \"lk-participant-metadata-item\"\n    }))), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(FocusToggle, {\n        trackRef: trackReference\n    }))));\n}\n// src/components/layout/FocusLayout.tsx\nfunction FocusLayoutContainer(props) {\n    const elementProps = mergeProps2(props, {\n        className: \"lk-focus-layout\"\n    });\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", __spreadValues({}, elementProps), props.children);\n}\nfunction FocusLayout(_a) {\n    var _b = _a, { trackRef, track } = _b, htmlProps = __objRest(_b, [\n        \"trackRef\",\n        \"track\"\n    ]);\n    const trackReference = trackRef != null ? trackRef : track;\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ParticipantTile, __spreadValues(__spreadValues({}, trackReference), htmlProps));\n}\n// src/components/layout/GridLayout.tsx\n\n// src/components/TrackLoop.tsx\n\n\nfunction TrackLoop(_a) {\n    var _b = _a, { tracks } = _b, props = __objRest(_b, [\n        \"tracks\"\n    ]);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, tracks.map((trackReference)=>{\n        return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(TrackRefContext.Provider, {\n            value: trackReference,\n            key: (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.getTrackReferenceId)(trackReference)\n        }, cloneSingleChild(props.children));\n    }));\n}\n// src/components/controls/PaginationControl.tsx\n\n\nfunction PaginationControl({ totalPageCount, nextPage, prevPage, currentPage, pagesContainer: connectedElement }) {\n    const [interactive, setInteractive] = react__WEBPACK_IMPORTED_MODULE_0__.useState(false);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        let subscription;\n        if (connectedElement) {\n            subscription = (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.createInteractingObservable)(connectedElement.current, 2e3).subscribe(setInteractive);\n        }\n        return ()=>{\n            if (subscription) {\n                subscription.unsubscribe();\n            }\n        };\n    }, [\n        connectedElement\n    ]);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"lk-pagination-control\",\n        \"data-lk-user-interaction\": interactive\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", {\n        className: \"lk-button\",\n        onClick: prevPage\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Chevron_default, null)), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        className: \"lk-pagination-count\"\n    }, `${currentPage} of ${totalPageCount}`), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", {\n        className: \"lk-button\",\n        onClick: nextPage\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Chevron_default, null)));\n}\n// src/components/controls/PaginationIndicator.tsx\n\nfunction PaginationIndicator({ totalPageCount, currentPage }) {\n    const bubbles = new Array(totalPageCount).fill(\"\").map((_, index)=>{\n        if (index + 1 === currentPage) {\n            return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n                \"data-lk-active\": true,\n                key: index\n            });\n        } else {\n            return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n                key: index\n            });\n        }\n    });\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"lk-pagination-indicator\"\n    }, bubbles);\n}\n// src/components/layout/GridLayout.tsx\nfunction GridLayout(_a) {\n    var _b = _a, { tracks } = _b, props = __objRest(_b, [\n        \"tracks\"\n    ]);\n    const gridEl = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createRef();\n    const elementProps = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>mergeProps2(props, {\n            className: \"lk-grid-layout\"\n        }), [\n        props\n    ]);\n    const { layout } = useGridLayout(gridEl, tracks.length);\n    const pagination = usePagination(layout.maxTiles, tracks);\n    useSwipe(gridEl, {\n        onLeftSwipe: pagination.nextPage,\n        onRightSwipe: pagination.prevPage\n    });\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", __spreadValues({\n        ref: gridEl,\n        \"data-lk-pagination\": pagination.totalPageCount > 1\n    }, elementProps), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(TrackLoop, {\n        tracks: pagination.tracks\n    }, props.children), tracks.length > layout.maxTiles && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(PaginationIndicator, {\n        totalPageCount: pagination.totalPageCount,\n        currentPage: pagination.currentPage\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(PaginationControl, __spreadValues({\n        pagesContainer: gridEl\n    }, pagination))));\n}\n// src/components/layout/CarouselLayout.tsx\n\n\nvar MIN_HEIGHT = 130;\nvar MIN_WIDTH = 140;\nvar MIN_VISIBLE_TILES = 1;\nvar ASPECT_RATIO = 16 / 10;\nvar ASPECT_RATIO_INVERT = (1 - ASPECT_RATIO) * -1;\nvar CarouselView = CarouselLayout;\nfunction CarouselLayout(_a) {\n    var _b = _a, { tracks, orientation } = _b, props = __objRest(_b, [\n        \"tracks\",\n        \"orientation\"\n    ]);\n    const asideEl = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n    const [prevTiles, setPrevTiles] = react__WEBPACK_IMPORTED_MODULE_0__.useState(0);\n    const { width, height } = useSize(asideEl);\n    const carouselOrientation = orientation ? orientation : height >= width ? \"vertical\" : \"horizontal\";\n    const tileSpan = carouselOrientation === \"vertical\" ? Math.max(width * ASPECT_RATIO_INVERT, MIN_HEIGHT) : Math.max(height * ASPECT_RATIO, MIN_WIDTH);\n    const scrollBarWidth = (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.getScrollBarWidth)();\n    const tilesThatFit = carouselOrientation === \"vertical\" ? Math.max((height - scrollBarWidth) / tileSpan, MIN_VISIBLE_TILES) : Math.max((width - scrollBarWidth) / tileSpan, MIN_VISIBLE_TILES);\n    let maxVisibleTiles = Math.round(tilesThatFit);\n    if (Math.abs(tilesThatFit - prevTiles) < 0.5) {\n        maxVisibleTiles = Math.round(prevTiles);\n    } else if (prevTiles !== tilesThatFit) {\n        setPrevTiles(tilesThatFit);\n    }\n    const sortedTiles = useVisualStableUpdate(tracks, maxVisibleTiles);\n    react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect(()=>{\n        if (asideEl.current) {\n            asideEl.current.dataset.lkOrientation = carouselOrientation;\n            asideEl.current.style.setProperty(\"--lk-max-visible-tiles\", maxVisibleTiles.toString());\n        }\n    }, [\n        maxVisibleTiles,\n        carouselOrientation\n    ]);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"aside\", __spreadValues({\n        key: carouselOrientation,\n        className: \"lk-carousel\",\n        ref: asideEl\n    }, props), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(TrackLoop, {\n        tracks: sortedTiles\n    }, props.children));\n}\n// src/components/layout/LayoutContextProvider.tsx\n\n\nfunction LayoutContextProvider({ value, onPinChange, onWidgetChange, children }) {\n    const layoutContextValue = useEnsureCreateLayoutContext(value);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        _livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.log.debug(\"PinState Updated\", {\n            state: layoutContextValue.pin.state\n        });\n        if (onPinChange && layoutContextValue.pin.state) onPinChange(layoutContextValue.pin.state);\n    }, [\n        layoutContextValue.pin.state,\n        onPinChange\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        _livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.log.debug(\"Widget Updated\", {\n            widgetState: layoutContextValue.widget.state\n        });\n        if (onWidgetChange && layoutContextValue.widget.state) {\n            onWidgetChange(layoutContextValue.widget.state);\n        }\n    }, [\n        onWidgetChange,\n        layoutContextValue.widget.state\n    ]);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(LayoutContext.Provider, {\n        value: layoutContextValue\n    }, children);\n}\n// src/components/LiveKitRoom.tsx\n\nfunction LiveKitRoom(props) {\n    const { room, htmlProps } = useLiveKitRoom(props);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", __spreadValues({}, htmlProps), room && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(RoomContext.Provider, {\n        value: room\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(LKFeatureContext.Provider, {\n        value: props.featureFlags\n    }, props.children)));\n}\n// src/components/participant/AudioVisualizer.tsx\n\n\nfunction AudioVisualizer(_a) {\n    var _b = _a, { participant, trackRef } = _b, props = __objRest(_b, [\n        \"participant\",\n        \"trackRef\"\n    ]);\n    var _a2, _b2;\n    const svgWidth = 200;\n    const svgHeight = 90;\n    const barWidth = 6;\n    const barSpacing = 4;\n    const volMultiplier = 50;\n    const barCount = 7;\n    const p = (_a2 = useMaybeParticipantContext()) != null ? _a2 : participant;\n    let ref = (_b2 = useMaybeTrackRefContext()) != null ? _b2 : trackRef;\n    if (!ref) {\n        if (!p) {\n            throw Error(`Participant missing, provide it directly or within a context`);\n        }\n        ref = {\n            participant: p,\n            source: livekit_client__WEBPACK_IMPORTED_MODULE_4__.Track.Source.Microphone\n        };\n    }\n    const volumes = useMultibandTrackVolume(ref, {\n        bands: 7,\n        loPass: 300\n    });\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", __spreadProps(__spreadValues({\n        width: \"100%\",\n        height: \"100%\",\n        viewBox: `0 0 ${svgWidth} ${svgHeight}`\n    }, props), {\n        className: \"lk-audio-visualizer\"\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"rect\", {\n        x: \"0\",\n        y: \"0\",\n        width: \"100%\",\n        height: \"100%\"\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"g\", {\n        style: {\n            transform: `translate(${(svgWidth - barCount * (barWidth + barSpacing)) / 2}px, 0)`\n        }\n    }, volumes.map((vol, idx)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"rect\", {\n            key: idx,\n            x: idx * (barWidth + barSpacing),\n            y: svgHeight / 2 - vol * volMultiplier / 2,\n            width: barWidth,\n            height: vol * volMultiplier\n        }))));\n}\n// src/components/ParticipantLoop.tsx\n\nfunction ParticipantLoop(_a) {\n    var _b = _a, { participants } = _b, props = __objRest(_b, [\n        \"participants\"\n    ]);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, participants.map((participant)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ParticipantContext.Provider, {\n            value: participant,\n            key: participant.identity\n        }, cloneSingleChild(props.children))));\n}\n// src/components/RoomAudioRenderer.tsx\n\n\n\nfunction RoomAudioRenderer({ volume, muted }) {\n    const tracks = useTracks([\n        livekit_client__WEBPACK_IMPORTED_MODULE_4__.Track.Source.Microphone,\n        livekit_client__WEBPACK_IMPORTED_MODULE_4__.Track.Source.ScreenShareAudio,\n        livekit_client__WEBPACK_IMPORTED_MODULE_4__.Track.Source.Unknown\n    ], {\n        updateOnlyOn: [],\n        onlySubscribed: false\n    }).filter((ref)=>!(0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.isLocal)(ref.participant) && ref.publication.kind === livekit_client__WEBPACK_IMPORTED_MODULE_4__.Track.Kind.Audio);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        for (const track of tracks){\n            track.publication.setSubscribed(true);\n        }\n    }, [\n        tracks\n    ]);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            display: \"none\"\n        }\n    }, tracks.map((trackRef)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(AudioTrack, {\n            key: (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.getTrackReferenceId)(trackRef),\n            trackRef,\n            volume,\n            muted\n        })));\n}\n// src/components/RoomName.tsx\n\nfunction RoomName(_a) {\n    var _b = _a, { childrenPosition = \"before\", children } = _b, htmlAttributes = __objRest(_b, [\n        \"childrenPosition\",\n        \"children\"\n    ]);\n    const { name } = useRoomInfo();\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", __spreadValues({}, htmlAttributes), childrenPosition === \"before\" && children, name, childrenPosition === \"after\" && children);\n}\n// src/components/Toast.tsx\n\nfunction Toast(props) {\n    const htmlProps = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>mergeProps2(props, {\n            className: \"lk-toast\"\n        }), [\n        props\n    ]);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", __spreadValues({}, htmlProps), props.children);\n}\n// src/components/participant/ParticipantAudioTile.tsx\n\n\nfunction ParticipantAudioTile(_a) {\n    var _b = _a, { participant, children, source, publication, disableSpeakingIndicator, onParticipantClick } = _b, htmlProps = __objRest(_b, [\n        \"participant\",\n        \"children\",\n        \"source\",\n        \"publication\",\n        \"disableSpeakingIndicator\",\n        \"onParticipantClick\"\n    ]);\n    const p = useEnsureParticipant(participant);\n    const { elementProps } = useParticipantTile({\n        participant: p,\n        htmlProps,\n        disableSpeakingIndicator,\n        source: livekit_client__WEBPACK_IMPORTED_MODULE_4__.Track.Source.Microphone,\n        publication,\n        onParticipantClick\n    });\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", __spreadValues({\n        style: {\n            position: \"relative\"\n        }\n    }, elementProps), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ParticipantContextIfNeeded, {\n        participant: p\n    }, children != null ? children : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(AudioTrack, {\n        source: source != null ? source : livekit_client__WEBPACK_IMPORTED_MODULE_4__.Track.Source.Microphone\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(AudioVisualizer, null), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"lk-participant-metadata\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"lk-participant-metadata-item\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(TrackMutedIndicator, {\n        source: livekit_client__WEBPACK_IMPORTED_MODULE_4__.Track.Source.Microphone\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ParticipantName, null)), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ConnectionQualityIndicator, {\n        className: \"lk-participant-metadata-item\"\n    })))));\n}\n// src/components/ConnectionStateToast.tsx\n\n\nfunction ConnectionStateToast(props) {\n    const [notification, setNotification] = react__WEBPACK_IMPORTED_MODULE_0__.useState(void 0);\n    const state = useConnectionState(props.room);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        switch(state){\n            case livekit_client__WEBPACK_IMPORTED_MODULE_4__.ConnectionState.Reconnecting:\n                setNotification(/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(SpinnerIcon_default, {\n                    className: \"lk-spinner\"\n                }), \" Reconnecting\"));\n                break;\n            case livekit_client__WEBPACK_IMPORTED_MODULE_4__.ConnectionState.Connecting:\n                setNotification(/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(SpinnerIcon_default, {\n                    className: \"lk-spinner\"\n                }), \" Connecting\"));\n                break;\n            case livekit_client__WEBPACK_IMPORTED_MODULE_4__.ConnectionState.Disconnected:\n                setNotification(/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, \"Disconnected\"));\n                break;\n            default:\n                setNotification(void 0);\n                break;\n        }\n    }, [\n        state\n    ]);\n    return notification ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Toast, {\n        className: \"lk-toast-connection-state\"\n    }, notification) : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null);\n}\n// src/components/ChatEntry.tsx\n\n\nfunction ChatEntry(_a) {\n    var _b = _a, { entry, hideName = false, hideTimestamp = false, messageFormatter } = _b, props = __objRest(_b, [\n        \"entry\",\n        \"hideName\",\n        \"hideTimestamp\",\n        \"messageFormatter\"\n    ]);\n    var _a2, _b2, _c, _d;\n    const formattedMessage = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>{\n        return messageFormatter ? messageFormatter(entry.message) : entry.message;\n    }, [\n        entry.message,\n        messageFormatter\n    ]);\n    const hasBeenEdited = !!entry.editTimestamp;\n    const time = new Date(entry.timestamp);\n    const locale = navigator ? navigator.language : \"en-US\";\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"li\", __spreadValues({\n        className: \"lk-chat-entry\",\n        title: time.toLocaleTimeString(locale, {\n            timeStyle: \"full\"\n        }),\n        \"data-lk-message-origin\": ((_a2 = entry.from) == null ? void 0 : _a2.isLocal) ? \"local\" : \"remote\"\n    }, props), (!hideTimestamp || !hideName || hasBeenEdited) && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        className: \"lk-meta-data\"\n    }, !hideName && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"strong\", {\n        className: \"lk-participant-name\"\n    }, (_d = (_b2 = entry.from) == null ? void 0 : _b2.name) != null ? _d : (_c = entry.from) == null ? void 0 : _c.identity), (!hideTimestamp || hasBeenEdited) && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        className: \"lk-timestamp\"\n    }, hasBeenEdited && \"edited \", time.toLocaleTimeString(locale, {\n        timeStyle: \"short\"\n    }))), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n        className: \"lk-message-body\"\n    }, formattedMessage));\n}\nfunction formatChatMessageLinks(message) {\n    return (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.tokenize)(message, (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.createDefaultGrammar)()).map((tok, i)=>{\n        if (typeof tok === `string`) {\n            return tok;\n        } else {\n            const content = tok.content.toString();\n            const href = tok.type === `url` ? /^http(s?):\\/\\//.test(content) ? content : `https://${content}` : `mailto:${content}`;\n            return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"a\", {\n                className: \"lk-chat-link\",\n                key: i,\n                href,\n                target: \"_blank\",\n                rel: \"noreferrer\"\n            }, content);\n        }\n    });\n}\n// src/prefabs/Chat.tsx\n\nfunction Chat(_a) {\n    var _b = _a, { messageFormatter, messageDecoder, messageEncoder, channelTopic } = _b, props = __objRest(_b, [\n        \"messageFormatter\",\n        \"messageDecoder\",\n        \"messageEncoder\",\n        \"channelTopic\"\n    ]);\n    const inputRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n    const ulRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n    const chatOptions = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>{\n        return {\n            messageDecoder,\n            messageEncoder,\n            channelTopic\n        };\n    }, [\n        messageDecoder,\n        messageEncoder,\n        channelTopic\n    ]);\n    const { send, chatMessages, isSending } = useChat(chatOptions);\n    const layoutContext = useMaybeLayoutContext();\n    const lastReadMsgAt = react__WEBPACK_IMPORTED_MODULE_0__.useRef(0);\n    function handleSubmit(event) {\n        return __async(this, null, function*() {\n            event.preventDefault();\n            if (inputRef.current && inputRef.current.value.trim() !== \"\") {\n                if (send) {\n                    yield send(inputRef.current.value);\n                    inputRef.current.value = \"\";\n                    inputRef.current.focus();\n                }\n            }\n        });\n    }\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        var _a2;\n        if (ulRef) {\n            (_a2 = ulRef.current) == null ? void 0 : _a2.scrollTo({\n                top: ulRef.current.scrollHeight\n            });\n        }\n    }, [\n        ulRef,\n        chatMessages\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        var _a2, _b2, _c, _d, _e;\n        if (!layoutContext || chatMessages.length === 0) {\n            return;\n        }\n        if (((_a2 = layoutContext.widget.state) == null ? void 0 : _a2.showChat) && chatMessages.length > 0 && lastReadMsgAt.current !== ((_b2 = chatMessages[chatMessages.length - 1]) == null ? void 0 : _b2.timestamp)) {\n            lastReadMsgAt.current = (_c = chatMessages[chatMessages.length - 1]) == null ? void 0 : _c.timestamp;\n            return;\n        }\n        const unreadMessageCount = chatMessages.filter((msg)=>!lastReadMsgAt.current || msg.timestamp > lastReadMsgAt.current).length;\n        const { widget } = layoutContext;\n        if (unreadMessageCount > 0 && ((_d = widget.state) == null ? void 0 : _d.unreadMessages) !== unreadMessageCount) {\n            (_e = widget.dispatch) == null ? void 0 : _e.call(widget, {\n                msg: \"unread_msg\",\n                count: unreadMessageCount\n            });\n        }\n    }, [\n        chatMessages,\n        layoutContext == null ? void 0 : layoutContext.widget\n    ]);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", __spreadProps(__spreadValues({}, props), {\n        className: \"lk-chat\"\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"lk-chat-header\"\n    }, \"Messages\", /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ChatToggle, {\n        className: \"lk-close-button\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ChatCloseIcon_default, null))), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"ul\", {\n        className: \"lk-list lk-chat-messages\",\n        ref: ulRef\n    }, props.children ? chatMessages.map((msg, idx)=>{\n        var _a2;\n        return cloneSingleChild(props.children, {\n            entry: msg,\n            key: (_a2 = msg.id) != null ? _a2 : idx,\n            messageFormatter\n        });\n    }) : chatMessages.map((msg, idx, allMsg)=>{\n        var _a2;\n        const hideName = idx >= 1 && allMsg[idx - 1].from === msg.from;\n        const hideTimestamp = idx >= 1 && msg.timestamp - allMsg[idx - 1].timestamp < 6e4;\n        return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ChatEntry, {\n            key: (_a2 = msg.id) != null ? _a2 : idx,\n            hideName,\n            hideTimestamp: hideName === false ? false : hideTimestamp,\n            entry: msg,\n            messageFormatter\n        });\n    })), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"form\", {\n        className: \"lk-chat-form\",\n        onSubmit: handleSubmit\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"input\", {\n        className: \"lk-form-control lk-chat-form-input\",\n        disabled: isSending,\n        ref: inputRef,\n        type: \"text\",\n        placeholder: \"Enter a message...\"\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", {\n        type: \"submit\",\n        className: \"lk-button lk-chat-form-button\",\n        disabled: isSending\n    }, \"Send\")));\n}\n// src/prefabs/PreJoin.tsx\n\n\n// src/prefabs/MediaDeviceMenu.tsx\n\n\n\nfunction MediaDeviceMenu(_a) {\n    var _b = _a, { kind, initialSelection, onActiveDeviceChange, tracks, requestPermissions = false } = _b, props = __objRest(_b, [\n        \"kind\",\n        \"initialSelection\",\n        \"onActiveDeviceChange\",\n        \"tracks\",\n        \"requestPermissions\"\n    ]);\n    const [isOpen, setIsOpen] = react__WEBPACK_IMPORTED_MODULE_0__.useState(false);\n    const [devices, setDevices] = react__WEBPACK_IMPORTED_MODULE_0__.useState([]);\n    const [updateRequired, setUpdateRequired] = react__WEBPACK_IMPORTED_MODULE_0__.useState(true);\n    const handleActiveDeviceChange = (kind2, deviceId)=>{\n        _livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.log.debug(\"handle device change\");\n        setIsOpen(false);\n        onActiveDeviceChange == null ? void 0 : onActiveDeviceChange(kind2, deviceId);\n    };\n    const button = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n    const tooltip = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n    react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect(()=>{\n        if (button.current && tooltip.current && (devices || updateRequired)) {\n            (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.computeMenuPosition)(button.current, tooltip.current).then(({ x, y })=>{\n                if (tooltip.current) {\n                    Object.assign(tooltip.current.style, {\n                        left: `${x}px`,\n                        top: `${y}px`\n                    });\n                }\n            });\n        }\n        setUpdateRequired(false);\n    }, [\n        button,\n        tooltip,\n        devices,\n        updateRequired\n    ]);\n    const handleClickOutside = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((event)=>{\n        if (!tooltip.current) {\n            return;\n        }\n        if (event.target === button.current) {\n            return;\n        }\n        if (isOpen && (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.wasClickOutside)(tooltip.current, event)) {\n            setIsOpen(false);\n        }\n    }, [\n        isOpen,\n        tooltip,\n        button\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        document.addEventListener(\"click\", handleClickOutside);\n        window.addEventListener(\"resize\", ()=>setUpdateRequired(true));\n        return ()=>{\n            document.removeEventListener(\"click\", handleClickOutside);\n            window.removeEventListener(\"resize\", ()=>setUpdateRequired(true));\n        };\n    }, [\n        handleClickOutside,\n        setUpdateRequired\n    ]);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", __spreadProps(__spreadValues({\n        className: \"lk-button lk-button-menu\",\n        \"aria-pressed\": isOpen\n    }, props), {\n        onClick: ()=>setIsOpen(!isOpen),\n        ref: button\n    }), props.children), !props.disabled && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"lk-device-menu\",\n        ref: tooltip,\n        style: {\n            visibility: isOpen ? \"visible\" : \"hidden\"\n        }\n    }, kind ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(MediaDeviceSelect, {\n        initialSelection,\n        onActiveDeviceChange: (deviceId)=>handleActiveDeviceChange(kind, deviceId),\n        onDeviceListChange: setDevices,\n        kind,\n        track: tracks == null ? void 0 : tracks[kind],\n        requestPermissions\n    }) : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"lk-device-menu-heading\"\n    }, \"Audio inputs\"), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(MediaDeviceSelect, {\n        kind: \"audioinput\",\n        onActiveDeviceChange: (deviceId)=>handleActiveDeviceChange(\"audioinput\", deviceId),\n        onDeviceListChange: setDevices,\n        track: tracks == null ? void 0 : tracks.audioinput,\n        requestPermissions\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"lk-device-menu-heading\"\n    }, \"Video inputs\"), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(MediaDeviceSelect, {\n        kind: \"videoinput\",\n        onActiveDeviceChange: (deviceId)=>handleActiveDeviceChange(\"videoinput\", deviceId),\n        onDeviceListChange: setDevices,\n        track: tracks == null ? void 0 : tracks.videoinput,\n        requestPermissions\n    }))));\n}\n// src/prefabs/PreJoin.tsx\n\n// src/hooks/useWarnAboutMissingStyles.ts\n\nfunction useWarnAboutMissingStyles() {\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        warnAboutMissingStyles();\n    }, []);\n}\n// src/prefabs/PreJoin.tsx\nvar DEFAULT_USER_CHOICES = {\n    username: \"\",\n    videoEnabled: true,\n    audioEnabled: true,\n    videoDeviceId: \"default\",\n    audioDeviceId: \"default\",\n    e2ee: false,\n    sharedPassphrase: \"\"\n};\nfunction usePreviewTracks(options, onError) {\n    const [tracks, setTracks] = react__WEBPACK_IMPORTED_MODULE_0__.useState();\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        let trackPromise = void 0;\n        let needsCleanup = false;\n        if (options.audio || options.video) {\n            trackPromise = (0,livekit_client__WEBPACK_IMPORTED_MODULE_4__.createLocalTracks)(options);\n            trackPromise.then((tracks2)=>{\n                if (needsCleanup) {\n                    tracks2.forEach((tr)=>tr.stop());\n                } else {\n                    setTracks(tracks2);\n                }\n            }).catch(onError);\n        }\n        return ()=>{\n            needsCleanup = true;\n            trackPromise == null ? void 0 : trackPromise.then((tracks2)=>tracks2.forEach((track)=>{\n                    track.stop();\n                }));\n        };\n    }, [\n        JSON.stringify(options)\n    ]);\n    return tracks;\n}\nfunction usePreviewDevice(enabled, deviceId, kind) {\n    const [deviceError, setDeviceError] = react__WEBPACK_IMPORTED_MODULE_0__.useState(null);\n    const [isCreatingTrack, setIsCreatingTrack] = react__WEBPACK_IMPORTED_MODULE_0__.useState(false);\n    const devices = useMediaDevices({\n        kind\n    });\n    const [selectedDevice, setSelectedDevice] = react__WEBPACK_IMPORTED_MODULE_0__.useState(void 0);\n    const [localTrack, setLocalTrack] = react__WEBPACK_IMPORTED_MODULE_0__.useState();\n    const [localDeviceId, setLocalDeviceId] = react__WEBPACK_IMPORTED_MODULE_0__.useState(deviceId);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        setLocalDeviceId(deviceId);\n    }, [\n        deviceId\n    ]);\n    const createTrack = (deviceId2, kind2)=>__async(this, null, function*() {\n            try {\n                const track = kind2 === \"videoinput\" ? yield (0,livekit_client__WEBPACK_IMPORTED_MODULE_4__.createLocalVideoTrack)({\n                    deviceId: deviceId2,\n                    resolution: livekit_client__WEBPACK_IMPORTED_MODULE_4__.VideoPresets.h720.resolution\n                }) : yield (0,livekit_client__WEBPACK_IMPORTED_MODULE_4__.createLocalAudioTrack)({\n                    deviceId: deviceId2\n                });\n                const newDeviceId = yield track.getDeviceId();\n                if (newDeviceId && deviceId2 !== newDeviceId) {\n                    prevDeviceId.current = newDeviceId;\n                    setLocalDeviceId(newDeviceId);\n                }\n                setLocalTrack(track);\n            } catch (e) {\n                if (e instanceof Error) {\n                    setDeviceError(e);\n                }\n            }\n        });\n    const switchDevice = (track, id)=>__async(this, null, function*() {\n            yield track.setDeviceId(id);\n            prevDeviceId.current = id;\n        });\n    const prevDeviceId = react__WEBPACK_IMPORTED_MODULE_0__.useRef(localDeviceId);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        if (enabled && !localTrack && !deviceError && !isCreatingTrack) {\n            _livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.log.debug(\"creating track\", kind);\n            setIsCreatingTrack(true);\n            createTrack(localDeviceId, kind).finally(()=>{\n                setIsCreatingTrack(false);\n            });\n        }\n    }, [\n        enabled,\n        localTrack,\n        deviceError,\n        isCreatingTrack\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        if (!localTrack) {\n            return;\n        }\n        if (!enabled) {\n            _livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.log.debug(`muting ${kind} track`);\n            localTrack.mute().then(()=>_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.log.debug(localTrack.mediaStreamTrack));\n        } else if ((selectedDevice == null ? void 0 : selectedDevice.deviceId) && prevDeviceId.current !== (selectedDevice == null ? void 0 : selectedDevice.deviceId)) {\n            _livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.log.debug(`switching ${kind} device from`, prevDeviceId.current, selectedDevice.deviceId);\n            switchDevice(localTrack, selectedDevice.deviceId);\n        } else {\n            _livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.log.debug(`unmuting local ${kind} track`);\n            localTrack.unmute();\n        }\n    }, [\n        localTrack,\n        selectedDevice,\n        enabled,\n        kind\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        return ()=>{\n            if (localTrack) {\n                _livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.log.debug(`stopping local ${kind} track`);\n                localTrack.stop();\n                localTrack.mute();\n            }\n        };\n    }, []);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        setSelectedDevice(devices.find((dev)=>dev.deviceId === localDeviceId));\n    }, [\n        localDeviceId,\n        devices\n    ]);\n    return {\n        selectedDevice,\n        localTrack,\n        deviceError\n    };\n}\nfunction PreJoin(_a) {\n    var _b = _a, { defaults = {}, onValidate, onSubmit, onError, debug, joinLabel = \"Join Room\", micLabel = \"Microphone\", camLabel = \"Camera\", userLabel = \"Username\", showE2EEOptions = false, persistUserChoices = true } = _b, htmlProps = __objRest(_b, [\n        \"defaults\",\n        \"onValidate\",\n        \"onSubmit\",\n        \"onError\",\n        \"debug\",\n        \"joinLabel\",\n        \"micLabel\",\n        \"camLabel\",\n        \"userLabel\",\n        \"showE2EEOptions\",\n        \"persistUserChoices\"\n    ]);\n    var _a2, _b2;\n    const [userChoices, setUserChoices] = react__WEBPACK_IMPORTED_MODULE_0__.useState(DEFAULT_USER_CHOICES);\n    const partialDefaults = __spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues({}, defaults.audioDeviceId !== void 0 && {\n        audioDeviceId: defaults.audioDeviceId\n    }), defaults.videoDeviceId !== void 0 && {\n        videoDeviceId: defaults.videoDeviceId\n    }), defaults.audioEnabled !== void 0 && {\n        audioEnabled: defaults.audioEnabled\n    }), defaults.videoEnabled !== void 0 && {\n        videoEnabled: defaults.videoEnabled\n    }), defaults.username !== void 0 && {\n        username: defaults.username\n    });\n    const { userChoices: initialUserChoices, saveAudioInputDeviceId, saveAudioInputEnabled, saveVideoInputDeviceId, saveVideoInputEnabled, saveUsername } = usePersistentUserChoices({\n        defaults: partialDefaults,\n        preventSave: !persistUserChoices,\n        preventLoad: !persistUserChoices\n    });\n    const [audioEnabled, setAudioEnabled] = react__WEBPACK_IMPORTED_MODULE_0__.useState(initialUserChoices.audioEnabled);\n    const [videoEnabled, setVideoEnabled] = react__WEBPACK_IMPORTED_MODULE_0__.useState(initialUserChoices.videoEnabled);\n    const [audioDeviceId, setAudioDeviceId] = react__WEBPACK_IMPORTED_MODULE_0__.useState(initialUserChoices.audioDeviceId);\n    const [videoDeviceId, setVideoDeviceId] = react__WEBPACK_IMPORTED_MODULE_0__.useState(initialUserChoices.videoDeviceId);\n    const [username, setUsername] = react__WEBPACK_IMPORTED_MODULE_0__.useState(initialUserChoices.username);\n    const [e2ee, setE2ee] = react__WEBPACK_IMPORTED_MODULE_0__.useState((_a2 = defaults.e2ee) != null ? _a2 : DEFAULT_USER_CHOICES.e2ee);\n    const [sharedPassphrase, setSharedPassphrase] = react__WEBPACK_IMPORTED_MODULE_0__.useState((_b2 = defaults.sharedPassphrase) != null ? _b2 : DEFAULT_USER_CHOICES.sharedPassphrase);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        saveAudioInputEnabled(audioEnabled);\n    }, [\n        audioEnabled,\n        saveAudioInputEnabled\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        saveVideoInputEnabled(videoEnabled);\n    }, [\n        videoEnabled,\n        saveVideoInputEnabled\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        saveAudioInputDeviceId(audioDeviceId);\n    }, [\n        audioDeviceId,\n        saveAudioInputDeviceId\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        saveVideoInputDeviceId(videoDeviceId);\n    }, [\n        videoDeviceId,\n        saveVideoInputDeviceId\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        saveUsername(username);\n    }, [\n        username,\n        saveUsername\n    ]);\n    const tracks = usePreviewTracks({\n        audio: audioEnabled ? {\n            deviceId: initialUserChoices.audioDeviceId\n        } : false,\n        video: videoEnabled ? {\n            deviceId: initialUserChoices.videoDeviceId\n        } : false\n    }, onError);\n    const videoEl = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n    const videoTrack = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>tracks == null ? void 0 : tracks.filter((track)=>track.kind === livekit_client__WEBPACK_IMPORTED_MODULE_4__.Track.Kind.Video)[0], [\n        tracks\n    ]);\n    const facingMode = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>{\n        if (videoTrack) {\n            const { facingMode: facingMode2 } = (0,livekit_client__WEBPACK_IMPORTED_MODULE_4__.facingModeFromLocalTrack)(videoTrack);\n            return facingMode2;\n        } else {\n            return \"undefined\";\n        }\n    }, [\n        videoTrack\n    ]);\n    const audioTrack = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>tracks == null ? void 0 : tracks.filter((track)=>track.kind === livekit_client__WEBPACK_IMPORTED_MODULE_4__.Track.Kind.Audio)[0], [\n        tracks\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        if (videoEl.current && videoTrack) {\n            videoTrack.unmute();\n            videoTrack.attach(videoEl.current);\n        }\n        return ()=>{\n            videoTrack == null ? void 0 : videoTrack.detach();\n        };\n    }, [\n        videoTrack\n    ]);\n    const [isValid, setIsValid] = react__WEBPACK_IMPORTED_MODULE_0__.useState();\n    const handleValidation = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((values)=>{\n        if (typeof onValidate === \"function\") {\n            return onValidate(values);\n        } else {\n            return values.username !== \"\";\n        }\n    }, [\n        onValidate\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        const newUserChoices = {\n            username,\n            videoEnabled,\n            videoDeviceId,\n            audioEnabled,\n            audioDeviceId,\n            e2ee,\n            sharedPassphrase\n        };\n        setUserChoices(newUserChoices);\n        setIsValid(handleValidation(newUserChoices));\n    }, [\n        username,\n        videoEnabled,\n        handleValidation,\n        audioEnabled,\n        audioDeviceId,\n        videoDeviceId,\n        sharedPassphrase,\n        e2ee\n    ]);\n    function handleSubmit(event) {\n        event.preventDefault();\n        if (handleValidation(userChoices)) {\n            if (typeof onSubmit === \"function\") {\n                onSubmit(userChoices);\n            }\n        } else {\n            _livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.log.warn(\"Validation failed with: \", userChoices);\n        }\n    }\n    useWarnAboutMissingStyles();\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", __spreadValues({\n        className: \"lk-prejoin\"\n    }, htmlProps), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"lk-video-container\"\n    }, videoTrack && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"video\", {\n        ref: videoEl,\n        width: \"1280\",\n        height: \"720\",\n        \"data-lk-facing-mode\": facingMode\n    }), (!videoTrack || !videoEnabled) && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"lk-camera-off-note\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ParticipantPlaceholder_default, null))), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"lk-button-group-container\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"lk-button-group audio\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(TrackToggle, {\n        initialState: audioEnabled,\n        source: livekit_client__WEBPACK_IMPORTED_MODULE_4__.Track.Source.Microphone,\n        onChange: (enabled)=>setAudioEnabled(enabled)\n    }, micLabel), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"lk-button-group-menu\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(MediaDeviceMenu, {\n        initialSelection: audioDeviceId,\n        kind: \"audioinput\",\n        disabled: !audioTrack,\n        tracks: {\n            audioinput: audioTrack\n        },\n        onActiveDeviceChange: (_, id)=>setAudioDeviceId(id)\n    }))), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"lk-button-group video\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(TrackToggle, {\n        initialState: videoEnabled,\n        source: livekit_client__WEBPACK_IMPORTED_MODULE_4__.Track.Source.Camera,\n        onChange: (enabled)=>setVideoEnabled(enabled)\n    }, camLabel), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"lk-button-group-menu\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(MediaDeviceMenu, {\n        initialSelection: videoDeviceId,\n        kind: \"videoinput\",\n        disabled: !videoTrack,\n        tracks: {\n            videoinput: videoTrack\n        },\n        onActiveDeviceChange: (_, id)=>setVideoDeviceId(id)\n    })))), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"form\", {\n        className: \"lk-username-container\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"input\", {\n        className: \"lk-form-control\",\n        id: \"username\",\n        name: \"username\",\n        type: \"text\",\n        defaultValue: username,\n        placeholder: userLabel,\n        onChange: (inputEl)=>setUsername(inputEl.target.value),\n        autoComplete: \"off\"\n    }), showE2EEOptions && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            display: \"flex\",\n            flexDirection: \"column\",\n            gap: \"1rem\"\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            display: \"flex\",\n            flexDirection: \"row\",\n            gap: \"1rem\"\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"input\", {\n        id: \"use-e2ee\",\n        type: \"checkbox\",\n        checked: e2ee,\n        onChange: (ev)=>setE2ee(ev.target.checked)\n    }), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"label\", {\n        htmlFor: \"use-e2ee\"\n    }, \"Enable end-to-end encryption\")), e2ee && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        style: {\n            display: \"flex\",\n            flexDirection: \"row\",\n            gap: \"1rem\"\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"label\", {\n        htmlFor: \"passphrase\"\n    }, \"Passphrase\"), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"input\", {\n        id: \"passphrase\",\n        type: \"password\",\n        value: sharedPassphrase,\n        onChange: (ev)=>setSharedPassphrase(ev.target.value)\n    }))), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", {\n        className: \"lk-button lk-join-button\",\n        type: \"submit\",\n        onClick: handleSubmit,\n        disabled: !isValid\n    }, joinLabel)), debug && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"strong\", null, \"User Choices:\"), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"ul\", {\n        className: \"lk-list\",\n        style: {\n            overflow: \"hidden\",\n            maxWidth: \"15rem\"\n        }\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"li\", null, \"Username: \", `${userChoices.username}`), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"li\", null, \"Video Enabled: \", `${userChoices.videoEnabled}`), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"li\", null, \"Audio Enabled: \", `${userChoices.audioEnabled}`), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"li\", null, \"Video Device: \", `${userChoices.videoDeviceId}`), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"li\", null, \"Audio Device: \", `${userChoices.audioDeviceId}`))));\n}\n// src/prefabs/VideoConference.tsx\n\n\n\n// src/prefabs/ControlBar.tsx\n\n\n\n// src/components/controls/StartMediaButton.tsx\n\nfunction StartMediaButton(_a) {\n    var _b = _a, { label } = _b, props = __objRest(_b, [\n        \"label\"\n    ]);\n    const room = useRoomContext();\n    const { mergedProps: audioProps, canPlayAudio } = useStartAudio({\n        room,\n        props\n    });\n    const { mergedProps, canPlayVideo } = useStartVideo({\n        room,\n        props: audioProps\n    });\n    const _a2 = mergedProps, { style } = _a2, restProps = __objRest(_a2, [\n        \"style\"\n    ]);\n    style.display = canPlayAudio && canPlayVideo ? \"none\" : \"block\";\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"button\", __spreadValues({\n        style\n    }, restProps), label != null ? label : `Start ${!canPlayAudio ? \"Audio\" : \"Video\"}`);\n}\n// src/prefabs/ControlBar.tsx\nfunction ControlBar(_a) {\n    var _b = _a, { variation, controls, saveUserChoices: saveUserChoices2 = true } = _b, props = __objRest(_b, [\n        \"variation\",\n        \"controls\",\n        \"saveUserChoices\"\n    ]);\n    var _a2, _b2, _c, _d, _e;\n    const [isChatOpen, setIsChatOpen] = react__WEBPACK_IMPORTED_MODULE_0__.useState(false);\n    const layoutContext = useMaybeLayoutContext();\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        var _a3, _b3;\n        if (((_a3 = layoutContext == null ? void 0 : layoutContext.widget.state) == null ? void 0 : _a3.showChat) !== void 0) {\n            setIsChatOpen((_b3 = layoutContext == null ? void 0 : layoutContext.widget.state) == null ? void 0 : _b3.showChat);\n        }\n    }, [\n        (_a2 = layoutContext == null ? void 0 : layoutContext.widget.state) == null ? void 0 : _a2.showChat\n    ]);\n    const isTooLittleSpace = useMediaQuery(`(max-width: ${isChatOpen ? 1e3 : 760}px)`);\n    const defaultVariation = isTooLittleSpace ? \"minimal\" : \"verbose\";\n    variation != null ? variation : variation = defaultVariation;\n    const visibleControls = __spreadValues({\n        leave: true\n    }, controls);\n    const localPermissions = useLocalParticipantPermissions();\n    if (!localPermissions) {\n        visibleControls.camera = false;\n        visibleControls.chat = false;\n        visibleControls.microphone = false;\n        visibleControls.screenShare = false;\n    } else {\n        (_b2 = visibleControls.camera) != null ? _b2 : visibleControls.camera = localPermissions.canPublish;\n        (_c = visibleControls.microphone) != null ? _c : visibleControls.microphone = localPermissions.canPublish;\n        (_d = visibleControls.screenShare) != null ? _d : visibleControls.screenShare = localPermissions.canPublish;\n        (_e = visibleControls.chat) != null ? _e : visibleControls.chat = localPermissions.canPublishData && (controls == null ? void 0 : controls.chat);\n    }\n    const showIcon = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>variation === \"minimal\" || variation === \"verbose\", [\n        variation\n    ]);\n    const showText = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>variation === \"textOnly\" || variation === \"verbose\", [\n        variation\n    ]);\n    const browserSupportsScreenSharing = (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.supportsScreenSharing)();\n    const [isScreenShareEnabled, setIsScreenShareEnabled] = react__WEBPACK_IMPORTED_MODULE_0__.useState(false);\n    const onScreenShareChange = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((enabled)=>{\n        setIsScreenShareEnabled(enabled);\n    }, [\n        setIsScreenShareEnabled\n    ]);\n    const htmlProps = mergeProps2({\n        className: \"lk-control-bar\"\n    }, props);\n    const { saveAudioInputEnabled, saveVideoInputEnabled, saveAudioInputDeviceId, saveVideoInputDeviceId } = usePersistentUserChoices({\n        preventSave: !saveUserChoices2\n    });\n    const microphoneOnChange = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((enabled, isUserInitiated)=>isUserInitiated ? saveAudioInputEnabled(enabled) : null, [\n        saveAudioInputEnabled\n    ]);\n    const cameraOnChange = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((enabled, isUserInitiated)=>isUserInitiated ? saveVideoInputEnabled(enabled) : null, [\n        saveVideoInputEnabled\n    ]);\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", __spreadValues({}, htmlProps), visibleControls.microphone && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"lk-button-group\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(TrackToggle, {\n        source: livekit_client__WEBPACK_IMPORTED_MODULE_4__.Track.Source.Microphone,\n        showIcon,\n        onChange: microphoneOnChange\n    }, showText && \"Microphone\"), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"lk-button-group-menu\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(MediaDeviceMenu, {\n        kind: \"audioinput\",\n        onActiveDeviceChange: (_kind, deviceId)=>saveAudioInputDeviceId(deviceId != null ? deviceId : \"\")\n    }))), visibleControls.camera && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"lk-button-group\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(TrackToggle, {\n        source: livekit_client__WEBPACK_IMPORTED_MODULE_4__.Track.Source.Camera,\n        showIcon,\n        onChange: cameraOnChange\n    }, showText && \"Camera\"), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"lk-button-group-menu\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(MediaDeviceMenu, {\n        kind: \"videoinput\",\n        onActiveDeviceChange: (_kind, deviceId)=>saveVideoInputDeviceId(deviceId != null ? deviceId : \"\")\n    }))), visibleControls.screenShare && browserSupportsScreenSharing && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(TrackToggle, {\n        source: livekit_client__WEBPACK_IMPORTED_MODULE_4__.Track.Source.ScreenShare,\n        captureOptions: {\n            audio: true,\n            selfBrowserSurface: \"include\"\n        },\n        showIcon,\n        onChange: onScreenShareChange\n    }, showText && (isScreenShareEnabled ? \"Stop screen share\" : \"Share screen\")), visibleControls.chat && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ChatToggle, null, showIcon && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ChatIcon_default, null), showText && \"Chat\"), visibleControls.leave && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(DisconnectButton, null, showIcon && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(LeaveIcon_default, null), showText && \"Leave\"), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(StartMediaButton, null));\n}\n// src/prefabs/VideoConference.tsx\nfunction VideoConference(_a) {\n    var _b = _a, { chatMessageFormatter, chatMessageDecoder, chatMessageEncoder } = _b, props = __objRest(_b, [\n        \"chatMessageFormatter\",\n        \"chatMessageDecoder\",\n        \"chatMessageEncoder\"\n    ]);\n    var _a2, _b2;\n    const [widgetState, setWidgetState] = react__WEBPACK_IMPORTED_MODULE_0__.useState({\n        showChat: false,\n        unreadMessages: 0\n    });\n    const lastAutoFocusedScreenShareTrack = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n    const tracks = useTracks([\n        {\n            source: livekit_client__WEBPACK_IMPORTED_MODULE_4__.Track.Source.Camera,\n            withPlaceholder: true\n        },\n        {\n            source: livekit_client__WEBPACK_IMPORTED_MODULE_4__.Track.Source.ScreenShare,\n            withPlaceholder: false\n        }\n    ], {\n        updateOnlyOn: [\n            livekit_client__WEBPACK_IMPORTED_MODULE_4__.RoomEvent.ActiveSpeakersChanged\n        ],\n        onlySubscribed: false\n    });\n    const widgetUpdate = (state)=>{\n        _livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.log.debug(\"updating widget state\", state);\n        setWidgetState(state);\n    };\n    const layoutContext = useCreateLayoutContext();\n    const screenShareTracks = tracks.filter(_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.isTrackReference).filter((track)=>track.publication.source === livekit_client__WEBPACK_IMPORTED_MODULE_4__.Track.Source.ScreenShare);\n    const focusTrack = (_a2 = usePinnedTracks(layoutContext)) == null ? void 0 : _a2[0];\n    const carouselTracks = tracks.filter((track)=>!(0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.isEqualTrackRef)(track, focusTrack));\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        var _a3, _b3, _c, _d;\n        if (screenShareTracks.some((track)=>track.publication.isSubscribed) && lastAutoFocusedScreenShareTrack.current === null) {\n            _livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.log.debug(\"Auto set screen share focus:\", {\n                newScreenShareTrack: screenShareTracks[0]\n            });\n            (_b3 = (_a3 = layoutContext.pin).dispatch) == null ? void 0 : _b3.call(_a3, {\n                msg: \"set_pin\",\n                trackReference: screenShareTracks[0]\n            });\n            lastAutoFocusedScreenShareTrack.current = screenShareTracks[0];\n        } else if (lastAutoFocusedScreenShareTrack.current && !screenShareTracks.some((track)=>{\n            var _a4, _b4;\n            return track.publication.trackSid === ((_b4 = (_a4 = lastAutoFocusedScreenShareTrack.current) == null ? void 0 : _a4.publication) == null ? void 0 : _b4.trackSid);\n        })) {\n            _livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.log.debug(\"Auto clearing screen share focus.\");\n            (_d = (_c = layoutContext.pin).dispatch) == null ? void 0 : _d.call(_c, {\n                msg: \"clear_pin\"\n            });\n            lastAutoFocusedScreenShareTrack.current = null;\n        }\n    }, [\n        screenShareTracks.map((ref)=>`${ref.publication.trackSid}_${ref.publication.isSubscribed}`).join(),\n        (_b2 = focusTrack == null ? void 0 : focusTrack.publication) == null ? void 0 : _b2.trackSid\n    ]);\n    useWarnAboutMissingStyles();\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", __spreadValues({\n        className: \"lk-video-conference\"\n    }, props), (0,_livekit_components_core__WEBPACK_IMPORTED_MODULE_2__.isWeb)() && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(LayoutContextProvider, {\n        value: layoutContext,\n        onWidgetChange: widgetUpdate\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"lk-video-conference-inner\"\n    }, !focusTrack ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"lk-grid-layout-wrapper\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(GridLayout, {\n        tracks\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ParticipantTile, null))) : /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"lk-focus-layout-wrapper\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(FocusLayoutContainer, null, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(CarouselLayout, {\n        tracks: carouselTracks\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ParticipantTile, null)), focusTrack && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(FocusLayout, {\n        trackRef: focusTrack\n    }))), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ControlBar, {\n        controls: {\n            chat: true\n        }\n    })), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Chat, {\n        style: {\n            display: widgetState.showChat ? \"grid\" : \"none\"\n        },\n        messageFormatter: chatMessageFormatter,\n        messageEncoder: chatMessageEncoder,\n        messageDecoder: chatMessageDecoder\n    })), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(RoomAudioRenderer, null), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ConnectionStateToast, null));\n}\n// src/prefabs/AudioConference.tsx\n\n\nfunction AudioConference(_a) {\n    var props = __objRest(_a, []);\n    const [widgetState, setWidgetState] = react__WEBPACK_IMPORTED_MODULE_0__.useState({\n        showChat: false,\n        unreadMessages: 0\n    });\n    const audioTracks = useTracks([\n        livekit_client__WEBPACK_IMPORTED_MODULE_4__.Track.Source.Microphone\n    ]);\n    useWarnAboutMissingStyles();\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(LayoutContextProvider, {\n        onWidgetChange: setWidgetState\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", __spreadValues({\n        className: \"lk-audio-conference\"\n    }, props), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"lk-audio-conference-stage\"\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(TrackLoop, {\n        tracks: audioTracks\n    }, /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ParticipantAudioTile, null))), /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ControlBar, {\n        controls: {\n            microphone: true,\n            screenShare: false,\n            camera: false,\n            chat: true\n        }\n    }), widgetState.showChat && /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Chat, null)));\n}\n// src/index.ts\n\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@livekit/components-react/dist/index.mjs\n");

/***/ })

};
;