"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/camelcase-keys";
exports.ids = ["vendor-chunks/camelcase-keys"];
exports.modules = {

/***/ "(rsc)/./node_modules/camelcase-keys/index.js":
/*!**********************************************!*\
  !*** ./node_modules/camelcase-keys/index.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst mapObj = __webpack_require__(/*! map-obj */ \"(rsc)/./node_modules/map-obj/index.js\");\nconst camelCase = __webpack_require__(/*! camelcase */ \"(rsc)/./node_modules/camelcase/index.js\");\nconst QuickLru = __webpack_require__(/*! quick-lru */ \"(rsc)/./node_modules/quick-lru/index.js\");\nconst has = (array, key)=>array.some((x)=>{\n        if (typeof x === \"string\") {\n            return x === key;\n        }\n        x.lastIndex = 0;\n        return x.test(key);\n    });\nconst cache = new QuickLru({\n    maxSize: 100000\n});\n// Reproduces behavior from `map-obj`\nconst isObject = (value)=>typeof value === \"object\" && value !== null && !(value instanceof RegExp) && !(value instanceof Error) && !(value instanceof Date);\nconst camelCaseConvert = (input, options)=>{\n    if (!isObject(input)) {\n        return input;\n    }\n    options = {\n        deep: false,\n        pascalCase: false,\n        ...options\n    };\n    const { exclude, pascalCase, stopPaths, deep } = options;\n    const stopPathsSet = new Set(stopPaths);\n    const makeMapper = (parentPath)=>(key, value)=>{\n            if (deep && isObject(value)) {\n                const path = parentPath === undefined ? key : `${parentPath}.${key}`;\n                if (!stopPathsSet.has(path)) {\n                    value = mapObj(value, makeMapper(path));\n                }\n            }\n            if (!(exclude && has(exclude, key))) {\n                const cacheKey = pascalCase ? `${key}_` : key;\n                if (cache.has(cacheKey)) {\n                    key = cache.get(cacheKey);\n                } else {\n                    const returnValue = camelCase(key, {\n                        pascalCase,\n                        locale: false\n                    });\n                    if (key.length < 100) {\n                        cache.set(cacheKey, returnValue);\n                    }\n                    key = returnValue;\n                }\n            }\n            return [\n                key,\n                value\n            ];\n        };\n    return mapObj(input, makeMapper(undefined));\n};\nmodule.exports = (input, options)=>{\n    if (Array.isArray(input)) {\n        return Object.keys(input).map((key)=>camelCaseConvert(input[key], options));\n    }\n    return camelCaseConvert(input, options);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvY2FtZWxjYXNlLWtleXMvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSxNQUFNQSxTQUFTQyxtQkFBT0EsQ0FBQztBQUN2QixNQUFNQyxZQUFZRCxtQkFBT0EsQ0FBQztBQUMxQixNQUFNRSxXQUFXRixtQkFBT0EsQ0FBQztBQUV6QixNQUFNRyxNQUFNLENBQUNDLE9BQU9DLE1BQVFELE1BQU1FLElBQUksQ0FBQ0MsQ0FBQUE7UUFDdEMsSUFBSSxPQUFPQSxNQUFNLFVBQVU7WUFDMUIsT0FBT0EsTUFBTUY7UUFDZDtRQUVBRSxFQUFFQyxTQUFTLEdBQUc7UUFDZCxPQUFPRCxFQUFFRSxJQUFJLENBQUNKO0lBQ2Y7QUFFQSxNQUFNSyxRQUFRLElBQUlSLFNBQVM7SUFBQ1MsU0FBUztBQUFNO0FBRTNDLHFDQUFxQztBQUNyQyxNQUFNQyxXQUFXQyxDQUFBQSxRQUNoQixPQUFPQSxVQUFVLFlBQ2pCQSxVQUFVLFFBQ1YsQ0FBRUEsQ0FBQUEsaUJBQWlCQyxNQUFLLEtBQ3hCLENBQUVELENBQUFBLGlCQUFpQkUsS0FBSSxLQUN2QixDQUFFRixDQUFBQSxpQkFBaUJHLElBQUc7QUFFdkIsTUFBTUMsbUJBQW1CLENBQUNDLE9BQU9DO0lBQ2hDLElBQUksQ0FBQ1AsU0FBU00sUUFBUTtRQUNyQixPQUFPQTtJQUNSO0lBRUFDLFVBQVU7UUFDVEMsTUFBTTtRQUNOQyxZQUFZO1FBQ1osR0FBR0YsT0FBTztJQUNYO0lBRUEsTUFBTSxFQUFDRyxPQUFPLEVBQUVELFVBQVUsRUFBRUUsU0FBUyxFQUFFSCxJQUFJLEVBQUMsR0FBR0Q7SUFFL0MsTUFBTUssZUFBZSxJQUFJQyxJQUFJRjtJQUU3QixNQUFNRyxhQUFhQyxDQUFBQSxhQUFjLENBQUN0QixLQUFLUTtZQUN0QyxJQUFJTyxRQUFRUixTQUFTQyxRQUFRO2dCQUM1QixNQUFNZSxPQUFPRCxlQUFlRSxZQUFZeEIsTUFBTSxDQUFDLEVBQUVzQixXQUFXLENBQUMsRUFBRXRCLElBQUksQ0FBQztnQkFFcEUsSUFBSSxDQUFDbUIsYUFBYXJCLEdBQUcsQ0FBQ3lCLE9BQU87b0JBQzVCZixRQUFRZCxPQUFPYyxPQUFPYSxXQUFXRTtnQkFDbEM7WUFDRDtZQUVBLElBQUksQ0FBRU4sQ0FBQUEsV0FBV25CLElBQUltQixTQUFTakIsSUFBRyxHQUFJO2dCQUNwQyxNQUFNeUIsV0FBV1QsYUFBYSxDQUFDLEVBQUVoQixJQUFJLENBQUMsQ0FBQyxHQUFHQTtnQkFFMUMsSUFBSUssTUFBTVAsR0FBRyxDQUFDMkIsV0FBVztvQkFDeEJ6QixNQUFNSyxNQUFNcUIsR0FBRyxDQUFDRDtnQkFDakIsT0FBTztvQkFDTixNQUFNRSxjQUFjL0IsVUFBVUksS0FBSzt3QkFBQ2dCO3dCQUFZWSxRQUFRO29CQUFLO29CQUU3RCxJQUFJNUIsSUFBSTZCLE1BQU0sR0FBRyxLQUFLO3dCQUNyQnhCLE1BQU15QixHQUFHLENBQUNMLFVBQVVFO29CQUNyQjtvQkFFQTNCLE1BQU0yQjtnQkFDUDtZQUNEO1lBRUEsT0FBTztnQkFBQzNCO2dCQUFLUTthQUFNO1FBQ3BCO0lBRUEsT0FBT2QsT0FBT21CLE9BQU9RLFdBQVdHO0FBQ2pDO0FBRUFPLE9BQU9DLE9BQU8sR0FBRyxDQUFDbkIsT0FBT0M7SUFDeEIsSUFBSW1CLE1BQU1DLE9BQU8sQ0FBQ3JCLFFBQVE7UUFDekIsT0FBT3NCLE9BQU9DLElBQUksQ0FBQ3ZCLE9BQU93QixHQUFHLENBQUNyQyxDQUFBQSxNQUFPWSxpQkFBaUJDLEtBQUssQ0FBQ2IsSUFBSSxFQUFFYztJQUNuRTtJQUVBLE9BQU9GLGlCQUFpQkMsT0FBT0M7QUFDaEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jbGllbnQvLi9ub2RlX21vZHVsZXMvY2FtZWxjYXNlLWtleXMvaW5kZXguanM/OWEwMiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5jb25zdCBtYXBPYmogPSByZXF1aXJlKCdtYXAtb2JqJyk7XG5jb25zdCBjYW1lbENhc2UgPSByZXF1aXJlKCdjYW1lbGNhc2UnKTtcbmNvbnN0IFF1aWNrTHJ1ID0gcmVxdWlyZSgncXVpY2stbHJ1Jyk7XG5cbmNvbnN0IGhhcyA9IChhcnJheSwga2V5KSA9PiBhcnJheS5zb21lKHggPT4ge1xuXHRpZiAodHlwZW9mIHggPT09ICdzdHJpbmcnKSB7XG5cdFx0cmV0dXJuIHggPT09IGtleTtcblx0fVxuXG5cdHgubGFzdEluZGV4ID0gMDtcblx0cmV0dXJuIHgudGVzdChrZXkpO1xufSk7XG5cbmNvbnN0IGNhY2hlID0gbmV3IFF1aWNrTHJ1KHttYXhTaXplOiAxMDAwMDB9KTtcblxuLy8gUmVwcm9kdWNlcyBiZWhhdmlvciBmcm9tIGBtYXAtb2JqYFxuY29uc3QgaXNPYmplY3QgPSB2YWx1ZSA9PlxuXHR0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmXG5cdHZhbHVlICE9PSBudWxsICYmXG5cdCEodmFsdWUgaW5zdGFuY2VvZiBSZWdFeHApICYmXG5cdCEodmFsdWUgaW5zdGFuY2VvZiBFcnJvcikgJiZcblx0ISh2YWx1ZSBpbnN0YW5jZW9mIERhdGUpO1xuXG5jb25zdCBjYW1lbENhc2VDb252ZXJ0ID0gKGlucHV0LCBvcHRpb25zKSA9PiB7XG5cdGlmICghaXNPYmplY3QoaW5wdXQpKSB7XG5cdFx0cmV0dXJuIGlucHV0O1xuXHR9XG5cblx0b3B0aW9ucyA9IHtcblx0XHRkZWVwOiBmYWxzZSxcblx0XHRwYXNjYWxDYXNlOiBmYWxzZSxcblx0XHQuLi5vcHRpb25zXG5cdH07XG5cblx0Y29uc3Qge2V4Y2x1ZGUsIHBhc2NhbENhc2UsIHN0b3BQYXRocywgZGVlcH0gPSBvcHRpb25zO1xuXG5cdGNvbnN0IHN0b3BQYXRoc1NldCA9IG5ldyBTZXQoc3RvcFBhdGhzKTtcblxuXHRjb25zdCBtYWtlTWFwcGVyID0gcGFyZW50UGF0aCA9PiAoa2V5LCB2YWx1ZSkgPT4ge1xuXHRcdGlmIChkZWVwICYmIGlzT2JqZWN0KHZhbHVlKSkge1xuXHRcdFx0Y29uc3QgcGF0aCA9IHBhcmVudFBhdGggPT09IHVuZGVmaW5lZCA/IGtleSA6IGAke3BhcmVudFBhdGh9LiR7a2V5fWA7XG5cblx0XHRcdGlmICghc3RvcFBhdGhzU2V0LmhhcyhwYXRoKSkge1xuXHRcdFx0XHR2YWx1ZSA9IG1hcE9iaih2YWx1ZSwgbWFrZU1hcHBlcihwYXRoKSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCEoZXhjbHVkZSAmJiBoYXMoZXhjbHVkZSwga2V5KSkpIHtcblx0XHRcdGNvbnN0IGNhY2hlS2V5ID0gcGFzY2FsQ2FzZSA/IGAke2tleX1fYCA6IGtleTtcblxuXHRcdFx0aWYgKGNhY2hlLmhhcyhjYWNoZUtleSkpIHtcblx0XHRcdFx0a2V5ID0gY2FjaGUuZ2V0KGNhY2hlS2V5KTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGNvbnN0IHJldHVyblZhbHVlID0gY2FtZWxDYXNlKGtleSwge3Bhc2NhbENhc2UsIGxvY2FsZTogZmFsc2V9KTtcblxuXHRcdFx0XHRpZiAoa2V5Lmxlbmd0aCA8IDEwMCkgeyAvLyBQcmV2ZW50IGFidXNlXG5cdFx0XHRcdFx0Y2FjaGUuc2V0KGNhY2hlS2V5LCByZXR1cm5WYWx1ZSk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRrZXkgPSByZXR1cm5WYWx1ZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gW2tleSwgdmFsdWVdO1xuXHR9O1xuXG5cdHJldHVybiBtYXBPYmooaW5wdXQsIG1ha2VNYXBwZXIodW5kZWZpbmVkKSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IChpbnB1dCwgb3B0aW9ucykgPT4ge1xuXHRpZiAoQXJyYXkuaXNBcnJheShpbnB1dCkpIHtcblx0XHRyZXR1cm4gT2JqZWN0LmtleXMoaW5wdXQpLm1hcChrZXkgPT4gY2FtZWxDYXNlQ29udmVydChpbnB1dFtrZXldLCBvcHRpb25zKSk7XG5cdH1cblxuXHRyZXR1cm4gY2FtZWxDYXNlQ29udmVydChpbnB1dCwgb3B0aW9ucyk7XG59O1xuIl0sIm5hbWVzIjpbIm1hcE9iaiIsInJlcXVpcmUiLCJjYW1lbENhc2UiLCJRdWlja0xydSIsImhhcyIsImFycmF5Iiwia2V5Iiwic29tZSIsIngiLCJsYXN0SW5kZXgiLCJ0ZXN0IiwiY2FjaGUiLCJtYXhTaXplIiwiaXNPYmplY3QiLCJ2YWx1ZSIsIlJlZ0V4cCIsIkVycm9yIiwiRGF0ZSIsImNhbWVsQ2FzZUNvbnZlcnQiLCJpbnB1dCIsIm9wdGlvbnMiLCJkZWVwIiwicGFzY2FsQ2FzZSIsImV4Y2x1ZGUiLCJzdG9wUGF0aHMiLCJzdG9wUGF0aHNTZXQiLCJTZXQiLCJtYWtlTWFwcGVyIiwicGFyZW50UGF0aCIsInBhdGgiLCJ1bmRlZmluZWQiLCJjYWNoZUtleSIsImdldCIsInJldHVyblZhbHVlIiwibG9jYWxlIiwibGVuZ3RoIiwic2V0IiwibW9kdWxlIiwiZXhwb3J0cyIsIkFycmF5IiwiaXNBcnJheSIsIk9iamVjdCIsImtleXMiLCJtYXAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/camelcase-keys/index.js\n");

/***/ })

};
;